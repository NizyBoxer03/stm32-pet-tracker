
furryfinder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800aab8  0800aab8  0001aab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e8  0800b2e8  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2e8  0800b2e8  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2e8  0800b2e8  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e8  0800b2e8  0001b2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800b2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000024c  0800b53c  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800b53c  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb23  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002422  00000000  00000000  0002bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002e1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019025  00000000  00000000  0002f528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d53a  00000000  00000000  0004854d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008635f  00000000  00000000  00055a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbde6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f9c  00000000  00000000  000dbe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000024c 	.word	0x2000024c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa9c 	.word	0x0800aa9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000250 	.word	0x20000250
 800014c:	0800aa9c 	.word	0x0800aa9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b0d1      	sub	sp, #324	; 0x144
 8000bdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f001 fc9f 	bl	8002520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f941 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 fa77 	bl	80010d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bea:	f000 fa47 	bl	800107c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bee:	f000 f9f1 	bl	8000fd4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bf2:	f000 fa19 	bl	8001028 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000bf6:	f000 f989 	bl	8000f0c <MX_RTC_Init>

	GPRMC_t GPS;

	uint8_t url[URL_LEN];
	uint8_t sms[SMS_LEN];
	uint8_t check = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	uint8_t check2 = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
	uint16_t volt = 0;
 8000c06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c0a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]

	bool bypass = false;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136

	SIM800L_Wakeup();
 8000c18:	f001 f80e 	bl	8001c38 <SIM800L_Wakeup>
	SIM800L_Reset();
 8000c1c:	f000 fce2 	bl	80015e4 <SIM800L_Reset>

	HAL_Delay(2000);
 8000c20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c24:	f001 fcde 	bl	80025e4 <HAL_Delay>

	HAL_UART_Receive_DMA(&huart2, usart2_buffer, 1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4980      	ldr	r1, [pc, #512]	; (8000e2c <main+0x254>)
 8000c2c:	4880      	ldr	r0, [pc, #512]	; (8000e30 <main+0x258>)
 8000c2e:	f003 fee3 	bl	80049f8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart3, usart3_buffer, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	497f      	ldr	r1, [pc, #508]	; (8000e34 <main+0x25c>)
 8000c36:	4880      	ldr	r0, [pc, #512]	; (8000e38 <main+0x260>)
 8000c38:	f003 fede 	bl	80049f8 <HAL_UART_Receive_DMA>

	state = GPS_UPDATE; //Outside while statement, but inside of main so it's executed upon wakeup
 8000c3c:	4b7f      	ldr	r3, [pc, #508]	; (8000e3c <main+0x264>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		switch(state)
 8000c42:	4b7e      	ldr	r3, [pc, #504]	; (8000e3c <main+0x264>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d8fb      	bhi.n	8000c42 <main+0x6a>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <main+0x78>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c65 	.word	0x08000c65
 8000c54:	08000cf3 	.word	0x08000cf3
 8000c58:	08000d23 	.word	0x08000d23
 8000c5c:	08000def 	.word	0x08000def
 8000c60:	08000df7 	.word	0x08000df7
		{
			case GPS_UPDATE:
				if(gpsSentenceReady)
 8000c64:	4b76      	ldr	r3, [pc, #472]	; (8000e40 <main+0x268>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 80dc 	beq.w	8000e26 <main+0x24e>
				{
					if(!ParseGPRMC(sentence, &GPS))
 8000c6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000c72:	4619      	mov	r1, r3
 8000c74:	4873      	ldr	r0, [pc, #460]	; (8000e44 <main+0x26c>)
 8000c76:	f000 faf9 	bl	800126c <ParseGPRMC>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f040 80d2 	bne.w	8000e26 <main+0x24e>
					{
						if(CalculateChecksum(sentence) == GPS.checksum)
 8000c82:	4870      	ldr	r0, [pc, #448]	; (8000e44 <main+0x26c>)
 8000c84:	f000 fc2c 	bl	80014e0 <CalculateChecksum>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 80c8 	bne.w	8000e26 <main+0x24e>
						{
              BuildGPSCoord(GPS.latdeg, GPS.Hlatmin, GPS.Llatmin, GPS.latdir, GPSLat);
 8000c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c9a:	b218      	sxth	r0, r3
 8000c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ca0:	b2d9      	uxtb	r1, r3
 8000ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ca6:	461c      	mov	r4, r3
 8000ca8:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8000cac:	4a66      	ldr	r2, [pc, #408]	; (8000e48 <main+0x270>)
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	f000 fc35 	bl	8001520 <BuildGPSCoord>
              BuildGPSCoord(GPS.longdeg, GPS.Hlongmin, GPS.Llongmin, GPS.longdir, GPSLong);
 8000cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cba:	b218      	sxth	r0, r3
 8000cbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000cc6:	461c      	mov	r4, r3
 8000cc8:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000ccc:	4a5f      	ldr	r2, [pc, #380]	; (8000e4c <main+0x274>)
 8000cce:	9200      	str	r2, [sp, #0]
 8000cd0:	4622      	mov	r2, r4
 8000cd2:	f000 fc25 	bl	8001520 <BuildGPSCoord>
							sprintf(url,"AT+HTTPPARA=\"URL\",\"http://186.13.143.39:80/gpsdata.php\?lat=%s&lng=%s&did=%ld\"\n\r", GPSLat, GPSLong, UDID);
 8000cd6:	4b5e      	ldr	r3, [pc, #376]	; (8000e50 <main+0x278>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	4b5a      	ldr	r3, [pc, #360]	; (8000e4c <main+0x274>)
 8000ce2:	4a59      	ldr	r2, [pc, #356]	; (8000e48 <main+0x270>)
 8000ce4:	495b      	ldr	r1, [pc, #364]	; (8000e54 <main+0x27c>)
 8000ce6:	f005 fc55 	bl	8006594 <siprintf>

							state = WEB_UPDATE;
 8000cea:	4b54      	ldr	r3, [pc, #336]	; (8000e3c <main+0x264>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				break;
 8000cf0:	e099      	b.n	8000e26 <main+0x24e>

			case WEB_UPDATE:
				check = SIM800L_WEBUpdate(url);
 8000cf2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fe7e 	bl	80019f8 <SIM800L_WEBUpdate>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
				switch(check)
 8000d02:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <main+0x138>
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d004      	beq.n	8000d18 <main+0x140>

					case FATAL_ERROR:
						state = GPS_UPDATE; //Continuing because I have no idea what it's actually supposed to do
						break;
				}
				break;
 8000d0e:	e08b      	b.n	8000e28 <main+0x250>
						state = BAT_UPDATE;
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <main+0x264>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	701a      	strb	r2, [r3, #0]
						break;
 8000d16:	e003      	b.n	8000d20 <main+0x148>
						state = GPS_UPDATE; //Continuing because I have no idea what it's actually supposed to do
 8000d18:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <main+0x264>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
						break;
 8000d1e:	bf00      	nop
				break;
 8000d20:	e082      	b.n	8000e28 <main+0x250>

			case BAT_UPDATE:
				if(/*elDiegoDesbordado >= 2*/1) //Bypassing because everything gets reset and the variable is always 0
				{
					if(!bypass) check = SIM800L_BatteryCheck(&volt);
 8000d22:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <main+0x166>
 8000d30:	1dbb      	adds	r3, r7, #6
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fc82 	bl	800163c <SIM800L_BatteryCheck>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

					switch(check)
 8000d3e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <main+0x174>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d04f      	beq.n	8000dea <main+0x212>
				}
				else
				{
					state = A_MIMIR;
				}
				break;
 8000d4a:	e06d      	b.n	8000e28 <main+0x250>
							if(!bypass)
 8000d4c:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d018      	beq.n	8000d8c <main+0x1b4>
								perc = VoltageToPercentage(volt);
 8000d5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d5e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f9f1 	bl	800114c <VoltageToPercentage>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <main+0x280>)
 8000d70:	701a      	strb	r2, [r3, #0]
								sprintf(url, "AT+HTTPPARA=\"URL\",\"http://186.13.143.39:80/bl.php\?bl=%d&did=%ld\"\n\r", perc, UDID);
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <main+0x280>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <main+0x278>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000d80:	4936      	ldr	r1, [pc, #216]	; (8000e5c <main+0x284>)
 8000d82:	f005 fc07 	bl	8006594 <siprintf>
								bypass = true;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
							check2 = SIM800L_WEBUpdate(url);
 8000d8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fe31 	bl	80019f8 <SIM800L_WEBUpdate>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
							switch(check2) //They are identical for some reason, leaving it in in case it's a mistake (ask Lucas)
 8000d9c:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <main+0x1d2>
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d01b      	beq.n	8000de0 <main+0x208>
							break;
 8000da8:	e020      	b.n	8000dec <main+0x214>
                  if(perc <= 10 && sendBatteryPercentage)
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <main+0x280>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b0a      	cmp	r3, #10
 8000db0:	d813      	bhi.n	8000dda <main+0x202>
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <main+0x288>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00f      	beq.n	8000dda <main+0x202>
                    sprintf(sms, "Advertencia: Batería baja. Porcentaje: %d%%\n\r\x1A", perc);
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <main+0x280>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	4927      	ldr	r1, [pc, #156]	; (8000e64 <main+0x28c>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f005 fbe4 	bl	8006594 <siprintf>
                    sendBatteryPercentage = false;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <main+0x288>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
                    state = AYUDAME_LOCOOOOOOOOOO;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <main+0x264>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e002      	b.n	8000de0 <main+0x208>
									  state = A_MIMIR;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <main+0x264>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	701a      	strb	r2, [r3, #0]
									bypass = false;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
									break;
 8000de6:	bf00      	nop
							break;
 8000de8:	e000      	b.n	8000dec <main+0x214>
							break;
 8000dea:	bf00      	nop
				break;
 8000dec:	e01c      	b.n	8000e28 <main+0x250>


			case A_MIMIR:
				RTC_Sleep(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 f9c0 	bl	8001174 <RTC_Sleep>
				break;
 8000df4:	e018      	b.n	8000e28 <main+0x250>

      case AYUDAME_LOCOOOOOOOOOO:
        check = SIM800L_SendSMS(sms);
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fd12 	bl	8001824 <SIM800L_SendSMS>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        switch(check)
 8000e06:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <main+0x23c>
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d004      	beq.n	8000e1c <main+0x244>

          case FATAL_ERROR:
            state = A_MIMIR;
            break;
        }
        break;
 8000e12:	e009      	b.n	8000e28 <main+0x250>
            state = A_MIMIR;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <main+0x264>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	701a      	strb	r2, [r3, #0]
            break;
 8000e1a:	e003      	b.n	8000e24 <main+0x24c>
            state = A_MIMIR;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <main+0x264>)
 8000e1e:	2203      	movs	r2, #3
 8000e20:	701a      	strb	r2, [r3, #0]
            break;
 8000e22:	bf00      	nop
        break;
 8000e24:	e000      	b.n	8000e28 <main+0x250>
				break;
 8000e26:	bf00      	nop
		switch(state)
 8000e28:	e70b      	b.n	8000c42 <main+0x6a>
 8000e2a:	bf00      	nop
 8000e2c:	2000041c 	.word	0x2000041c
 8000e30:	2000027c 	.word	0x2000027c
 8000e34:	20000420 	.word	0x20000420
 8000e38:	200002c4 	.word	0x200002c4
 8000e3c:	200003f8 	.word	0x200003f8
 8000e40:	200004dc 	.word	0x200004dc
 8000e44:	20000424 	.word	0x20000424
 8000e48:	200003d8 	.word	0x200003d8
 8000e4c:	200003e8 	.word	0x200003e8
 8000e50:	20000004 	.word	0x20000004
 8000e54:	0800aab8 	.word	0x0800aab8
 8000e58:	200003f7 	.word	0x200003f7
 8000e5c:	0800ab08 	.word	0x0800ab08
 8000e60:	20000000 	.word	0x20000000
 8000e64:	0800ab4c 	.word	0x0800ab4c

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 fd12 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 f930 	bl	8003114 <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000eba:	f000 f9d1 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fb9d 	bl	8003618 <HAL_RCC_ClockConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ee4:	f000 f9bc 	bl	8001260 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 fd1d 	bl	8003934 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f00:	f000 f9ae 	bl	8001260 <Error_Handler>
  }
}
 8000f04:	bf00      	nop
 8000f06:	3750      	adds	r7, #80	; 0x50
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2100      	movs	r1, #0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	801a      	strh	r2, [r3, #0]
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <MX_RTC_Init+0xc0>)
 8000f2e:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <MX_RTC_Init+0xc4>)
 8000f30:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_RTC_Init+0xc0>)
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_RTC_Init+0xc0>)
 8000f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f40:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f42:	4822      	ldr	r0, [pc, #136]	; (8000fcc <MX_RTC_Init+0xc0>)
 8000f44:	f002 fe62 	bl	8003c0c <HAL_RTC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000f4e:	f000 f987 	bl	8001260 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <MX_RTC_Init+0xc0>)
 8000f68:	f002 fedc 	bl	8003d24 <HAL_RTC_SetTime>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f000 f975 	bl	8001260 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f76:	2301      	movs	r3, #1
 8000f78:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480f      	ldr	r0, [pc, #60]	; (8000fcc <MX_RTC_Init+0xc0>)
 8000f90:	f003 f838 	bl	8004004 <HAL_RTC_SetDate>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f9a:	f000 f961 	bl	8001260 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_RTC_Init+0xc0>)
 8000fb6:	f003 f8db 	bl	8004170 <HAL_RTC_SetAlarm_IT>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000fc0:	f000 f94e 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000268 	.word	0x20000268
 8000fd0:	40002800 	.word	0x40002800

08000fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <MX_USART2_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART2_UART_Init+0x4c>)
 800100c:	f003 fc34 	bl	8004878 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 f923 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000027c 	.word	0x2000027c
 8001024:	40004400 	.word	0x40004400

08001028 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <MX_USART3_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001034:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART3_UART_Init+0x4c>)
 8001060:	f003 fc0a 	bl	8004878 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f000 f8f9 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002c4 	.word	0x200002c4
 8001078:	40004800 	.word	0x40004800

0800107c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_DMA_Init+0x58>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_DMA_Init+0x58>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_DMA_Init+0x58>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	200c      	movs	r0, #12
 80010a0:	f001 fbb7 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010a4:	200c      	movs	r0, #12
 80010a6:	f001 fbd0 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200d      	movs	r0, #13
 80010b0:	f001 fbaf 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010b4:	200d      	movs	r0, #13
 80010b6:	f001 fbc8 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2010      	movs	r0, #16
 80010c0:	f001 fba7 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010c4:	2010      	movs	r0, #16
 80010c6:	f001 fbc0 	bl	800284a <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_GPIO_Init+0x70>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <MX_GPIO_Init+0x70>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_GPIO_Init+0x70>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_GPIO_Init+0x70>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_GPIO_Init+0x70>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_GPIO_Init+0x70>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_GPIO_Init+0x70>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <MX_GPIO_Init+0x70>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_GPIO_Init+0x70>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_GPIO_Init+0x70>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <MX_GPIO_Init+0x70>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <MX_GPIO_Init+0x70>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000

0800114c <VoltageToPercentage>:

/* USER CODE BEGIN 4 */

uint16_t VoltageToPercentage(uint16_t Volt) {
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
	uint16_t aux = ((MAX_BATTERY_VOLTAGE - MIN_BATTERY_VOLTAGE)
			- (MAX_BATTERY_VOLTAGE - Volt)) * 100
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
			/ (MAX_BATTERY_VOLTAGE - MIN_BATTERY_VOLTAGE);
 800115c:	2b00      	cmp	r3, #0
 800115e:	da00      	bge.n	8001162 <VoltageToPercentage+0x16>
 8001160:	3307      	adds	r3, #7
 8001162:	10db      	asrs	r3, r3, #3
	uint16_t aux = ((MAX_BATTERY_VOLTAGE - MIN_BATTERY_VOLTAGE)
 8001164:	81fb      	strh	r3, [r7, #14]
	return aux;
 8001166:	89fb      	ldrh	r3, [r7, #14]
	}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <RTC_Sleep>:

void RTC_Sleep(uint8_t min)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  RTC_AlarmTypeDef aux;
  RTC_TimeTypeDef currTime;

	//Perform power-down tasks
	SIM800L_Sleep(); //Put SIM800L to sleep
 800117e:	f000 fd3f 	bl	8001c00 <SIM800L_Sleep>

	//Timer mode calculation
  aux.Alarm = RTC_ALARM_A;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  
   HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	4822      	ldr	r0, [pc, #136]	; (8001218 <RTC_Sleep+0xa4>)
 8001190:	f002 fe60 	bl	8003e54 <HAL_RTC_GetTime>
  
  aux.AlarmTime = currTime;
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	f107 020c 	add.w	r2, r7, #12
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	4611      	mov	r1, r2
 80011a0:	8019      	strh	r1, [r3, #0]
 80011a2:	3302      	adds	r3, #2
 80011a4:	0c12      	lsrs	r2, r2, #16
 80011a6:	701a      	strb	r2, [r3, #0]
  
  aux.AlarmTime.Minutes += min; //This is buggy, in theory min can't be a value higher than 196 or else it will overflow
 80011a8:	7c7a      	ldrb	r2, [r7, #17]
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4413      	add	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	747b      	strb	r3, [r7, #17]
  if(aux.AlarmTime.Minutes > 59) 
 80011b2:	7c7b      	ldrb	r3, [r7, #17]
 80011b4:	2b3b      	cmp	r3, #59	; 0x3b
 80011b6:	d905      	bls.n	80011c4 <RTC_Sleep+0x50>
  {
    aux.AlarmTime.Minutes = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	747b      	strb	r3, [r7, #17]
    aux.AlarmTime.Hours++;
 80011bc:	7c3b      	ldrb	r3, [r7, #16]
 80011be:	3301      	adds	r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	743b      	strb	r3, [r7, #16]
  }

  aux.AlarmTime.Hours += (min / 60); //Should be an integer division, ffs
 80011c4:	7c3a      	ldrb	r2, [r7, #16]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4914      	ldr	r1, [pc, #80]	; (800121c <RTC_Sleep+0xa8>)
 80011ca:	fba1 1303 	umull	r1, r3, r1, r3
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	743b      	strb	r3, [r7, #16]
  if(aux.AlarmTime.Hours > 23) aux.AlarmTime.Hours = 0;
 80011d8:	7c3b      	ldrb	r3, [r7, #16]
 80011da:	2b17      	cmp	r3, #23
 80011dc:	d901      	bls.n	80011e2 <RTC_Sleep+0x6e>
 80011de:	2300      	movs	r3, #0
 80011e0:	743b      	strb	r3, [r7, #16]

	HAL_RTC_SetAlarm_IT(&hrtc, &aux, RTC_FORMAT_BIN);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <RTC_Sleep+0xa4>)
 80011ec:	f002 ffc0 	bl	8004170 <HAL_RTC_SetAlarm_IT>

	//Final powerdown
	HAL_SuspendTick();
 80011f0:	f001 fa1c 	bl	800262c <HAL_SuspendTick>

  //Clear leftover flags
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <RTC_Sleep+0xac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a09      	ldr	r2, [pc, #36]	; (8001220 <RTC_Sleep+0xac>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6013      	str	r3, [r2, #0]
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <RTC_Sleep+0xac>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <RTC_Sleep+0xac>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6013      	str	r3, [r2, #0]

//Goodnight my sweet prince
	HAL_PWR_EnterSTANDBYMode(); 
 800120c:	f001 ff6a 	bl	80030e4 <HAL_PWR_EnterSTANDBYMode>

}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000268 	.word	0x20000268
 800121c:	88888889 	.word	0x88888889
 8001220:	40007000 	.word	0x40007000

08001224 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) //Executed upon wakeup
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RTC_AlarmAEventCallback+0x38>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b02      	cmp	r3, #2
 8001236:	d10d      	bne.n	8001254 <HAL_RTC_AlarmAEventCallback+0x30>
	{
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_RTC_AlarmAEventCallback+0x38>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_RTC_AlarmAEventCallback+0x38>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6013      	str	r3, [r2, #0]
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_RTC_AlarmAEventCallback+0x38>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_RTC_AlarmAEventCallback+0x38>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6013      	str	r3, [r2, #0]
		HAL_ResumeTick(); //Wakey wakey
 8001250:	f001 f9fa 	bl	8002648 <HAL_ResumeTick>
	  {
		UDID = 0;
	  }
*/
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40007000 	.word	0x40007000

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <ParseGPRMC>:
#include "nmea.h"

uint8_t ParseGPRMC(uint8_t *src, GPRMC_t *GPRMC)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09c      	sub	sp, #112	; 0x70
 8001270:	af02      	add	r7, sp, #8
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t cont = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    const char s[3] = ",*";
 8001282:	4a8f      	ldr	r2, [pc, #572]	; (80014c0 <ParseGPRMC+0x254>)
 8001284:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	4611      	mov	r1, r2
 800128c:	8019      	strh	r1, [r3, #0]
 800128e:	3302      	adds	r3, #2
 8001290:	0c12      	lsrs	r2, r2, #16
 8001292:	701a      	strb	r2, [r3, #0]
    char *token;

    uint8_t aux[NMEA0183_MAX_LENGTH + 2];

    for(i = 0; i < NMEA0183_MAX_LENGTH; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800129a:	e00f      	b.n	80012bc <ParseGPRMC+0x50>
    {
        aux[i] = src[i];
 800129c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	441a      	add	r2, r3
 80012a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	3368      	adds	r3, #104	; 0x68
 80012ac:	443b      	add	r3, r7
 80012ae:	f803 2c60 	strb.w	r2, [r3, #-96]
    for(i = 0; i < NMEA0183_MAX_LENGTH; i++)
 80012b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012b6:	3301      	adds	r3, #1
 80012b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80012bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c0:	2b51      	cmp	r3, #81	; 0x51
 80012c2:	d9eb      	bls.n	800129c <ParseGPRMC+0x30>
    }
    i = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    // En este punto dest ya debería contener una línea parseable
    while (aux[i] != ',') i++; // 1st ,
 80012ca:	e004      	b.n	80012d6 <ParseGPRMC+0x6a>
 80012cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012d0:	3301      	adds	r3, #1
 80012d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80012d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012da:	3368      	adds	r3, #104	; 0x68
 80012dc:	443b      	add	r3, r7
 80012de:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80012e2:	2b2c      	cmp	r3, #44	; 0x2c
 80012e4:	d1f2      	bne.n	80012cc <ParseGPRMC+0x60>
    i++;
 80012e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ea:	3301      	adds	r3, #1
 80012ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    while (aux[i] != ',') i++; // After time ,
 80012f0:	e004      	b.n	80012fc <ParseGPRMC+0x90>
 80012f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012f6:	3301      	adds	r3, #1
 80012f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80012fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001300:	3368      	adds	r3, #104	; 0x68
 8001302:	443b      	add	r3, r7
 8001304:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001308:	2b2c      	cmp	r3, #44	; 0x2c
 800130a:	d1f2      	bne.n	80012f2 <ParseGPRMC+0x86>
    i++;
 800130c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001310:	3301      	adds	r3, #1
 8001312:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if (aux[i] == 'A') // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001316:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800131a:	3368      	adds	r3, #104	; 0x68
 800131c:	443b      	add	r3, r7
 800131e:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001322:	2b41      	cmp	r3, #65	; 0x41
 8001324:	f040 80c7 	bne.w	80014b6 <ParseGPRMC+0x24a>
    { 
        token = strtok_new(aux, s);
 8001328:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f91a 	bl	800156c <strtok_new>
 8001338:	6638      	str	r0, [r7, #96]	; 0x60
        token = strtok_new(NULL, s);
 800133a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800133e:	4619      	mov	r1, r3
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f913 	bl	800156c <strtok_new>
 8001346:	6638      	str	r0, [r7, #96]	; 0x60

        while (token != NULL)
 8001348:	e0af      	b.n	80014aa <ParseGPRMC+0x23e>
        {
            switch (cont)
 800134a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800134e:	2b0c      	cmp	r3, #12
 8001350:	f200 809f 	bhi.w	8001492 <ParseGPRMC+0x226>
 8001354:	a201      	add	r2, pc, #4	; (adr r2, 800135c <ParseGPRMC+0xf0>)
 8001356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135a:	bf00      	nop
 800135c:	08001391 	.word	0x08001391
 8001360:	080013a9 	.word	0x080013a9
 8001364:	080013b9 	.word	0x080013b9
 8001368:	080013d7 	.word	0x080013d7
 800136c:	080013e7 	.word	0x080013e7
 8001370:	08001405 	.word	0x08001405
 8001374:	08001415 	.word	0x08001415
 8001378:	08001425 	.word	0x08001425
 800137c:	08001435 	.word	0x08001435
 8001380:	08001453 	.word	0x08001453
 8001384:	08001463 	.word	0x08001463
 8001388:	08001473 	.word	0x08001473
 800138c:	08001483 	.word	0x08001483
            {
            case 0: // UTC of pos (HHMMSS.SS)
                sscanf(token, "%2d%2d%f", &GPRMC->hour, &GPRMC->minute, &GPRMC->second);
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	1d19      	adds	r1, r3, #4
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3330      	adds	r3, #48	; 0x30
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	460b      	mov	r3, r1
 800139e:	4949      	ldr	r1, [pc, #292]	; (80014c4 <ParseGPRMC+0x258>)
 80013a0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80013a2:	f005 f917 	bl	80065d4 <siscanf>
                break;
 80013a6:	e074      	b.n	8001492 <ParseGPRMC+0x226>
            case 1: // Validity (A/V)
                sscanf(token, "%c", &GPRMC->valid);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3340      	adds	r3, #64	; 0x40
 80013ac:	461a      	mov	r2, r3
 80013ae:	4946      	ldr	r1, [pc, #280]	; (80014c8 <ParseGPRMC+0x25c>)
 80013b0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80013b2:	f005 f90f 	bl	80065d4 <siscanf>
                break;
 80013b6:	e06c      	b.n	8001492 <ParseGPRMC+0x226>
            case 2: // lat (DDmm.mm)
                sscanf(token, "%2d%2d.%5d", &GPRMC->latdeg, &GPRMC->Hlatmin, &GPRMC->Llatmin);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f103 0208 	add.w	r2, r3, #8
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f103 0120 	add.w	r1, r3, #32
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3328      	adds	r3, #40	; 0x28
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	460b      	mov	r3, r1
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <ParseGPRMC+0x260>)
 80013ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80013d0:	f005 f900 	bl	80065d4 <siscanf>
                break;
 80013d4:	e05d      	b.n	8001492 <ParseGPRMC+0x226>
            case 3: // lat dir (S/N)
                sscanf(token, "%c", &GPRMC->latdir);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3341      	adds	r3, #65	; 0x41
 80013da:	461a      	mov	r2, r3
 80013dc:	493a      	ldr	r1, [pc, #232]	; (80014c8 <ParseGPRMC+0x25c>)
 80013de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80013e0:	f005 f8f8 	bl	80065d4 <siscanf>
                break;
 80013e4:	e055      	b.n	8001492 <ParseGPRMC+0x226>
            case 4: // long (DDDmm.mm)
                sscanf(token, "%3d%2d.%5d", &GPRMC->longdeg, &GPRMC->Hlongmin, &GPRMC->Llongmin);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f103 020c 	add.w	r2, r3, #12
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	332c      	adds	r3, #44	; 0x2c
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	460b      	mov	r3, r1
 80013fa:	4935      	ldr	r1, [pc, #212]	; (80014d0 <ParseGPRMC+0x264>)
 80013fc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80013fe:	f005 f8e9 	bl	80065d4 <siscanf>
                break;
 8001402:	e046      	b.n	8001492 <ParseGPRMC+0x226>
            case 5: // long dir (W/E)
                sscanf(token, "%c", &GPRMC->longdir);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3342      	adds	r3, #66	; 0x42
 8001408:	461a      	mov	r2, r3
 800140a:	492f      	ldr	r1, [pc, #188]	; (80014c8 <ParseGPRMC+0x25c>)
 800140c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800140e:	f005 f8e1 	bl	80065d4 <siscanf>
                break;
 8001412:	e03e      	b.n	8001492 <ParseGPRMC+0x226>
            case 6: // speed (knots) (x.x)
                sscanf(token, "%f", &GPRMC->speed);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	3334      	adds	r3, #52	; 0x34
 8001418:	461a      	mov	r2, r3
 800141a:	492e      	ldr	r1, [pc, #184]	; (80014d4 <ParseGPRMC+0x268>)
 800141c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800141e:	f005 f8d9 	bl	80065d4 <siscanf>
                break;
 8001422:	e036      	b.n	8001492 <ParseGPRMC+0x226>
            case 7: // track true (?) (x.x) d
                sscanf(token, "%f", &GPRMC->tracktrue);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3338      	adds	r3, #56	; 0x38
 8001428:	461a      	mov	r2, r3
 800142a:	492a      	ldr	r1, [pc, #168]	; (80014d4 <ParseGPRMC+0x268>)
 800142c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800142e:	f005 f8d1 	bl	80065d4 <siscanf>
                break;
 8001432:	e02e      	b.n	8001492 <ParseGPRMC+0x226>
            case 8: // date (DDMMYY)
                sscanf(token, "%2d%2d%2d", &GPRMC->day, &GPRMC->month, &GPRMC->year);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f103 0210 	add.w	r2, r3, #16
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f103 0114 	add.w	r1, r3, #20
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3318      	adds	r3, #24
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	460b      	mov	r3, r1
 8001448:	4923      	ldr	r1, [pc, #140]	; (80014d8 <ParseGPRMC+0x26c>)
 800144a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800144c:	f005 f8c2 	bl	80065d4 <siscanf>
                break;
 8001450:	e01f      	b.n	8001492 <ParseGPRMC+0x226>
            case 9: // mag var (deg) (x.x) d
                sscanf(token, "%f", &GPRMC->magvar);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	333c      	adds	r3, #60	; 0x3c
 8001456:	461a      	mov	r2, r3
 8001458:	491e      	ldr	r1, [pc, #120]	; (80014d4 <ParseGPRMC+0x268>)
 800145a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800145c:	f005 f8ba 	bl	80065d4 <siscanf>
                break;
 8001460:	e017      	b.n	8001492 <ParseGPRMC+0x226>
            case 10: // mag var dir (E/W) (sub/add) d
                sscanf(token, "%c", &GPRMC->magvardir);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3343      	adds	r3, #67	; 0x43
 8001466:	461a      	mov	r2, r3
 8001468:	4917      	ldr	r1, [pc, #92]	; (80014c8 <ParseGPRMC+0x25c>)
 800146a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800146c:	f005 f8b2 	bl	80065d4 <siscanf>
                break;
 8001470:	e00f      	b.n	8001492 <ParseGPRMC+0x226>
            case 11: // Mode
                sscanf(token, "%c", &GPRMC->mode);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3344      	adds	r3, #68	; 0x44
 8001476:	461a      	mov	r2, r3
 8001478:	4913      	ldr	r1, [pc, #76]	; (80014c8 <ParseGPRMC+0x25c>)
 800147a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800147c:	f005 f8aa 	bl	80065d4 <siscanf>
                break;
 8001480:	e007      	b.n	8001492 <ParseGPRMC+0x226>
            case 12: // Checksum
                sscanf(token, "%2x", &GPRMC->checksum);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	331c      	adds	r3, #28
 8001486:	461a      	mov	r2, r3
 8001488:	4914      	ldr	r1, [pc, #80]	; (80014dc <ParseGPRMC+0x270>)
 800148a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800148c:	f005 f8a2 	bl	80065d4 <siscanf>
                break;
 8001490:	bf00      	nop
            }

            token = strtok_new(NULL, s);
 8001492:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001496:	4619      	mov	r1, r3
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f867 	bl	800156c <strtok_new>
 800149e:	6638      	str	r0, [r7, #96]	; 0x60

            cont++;
 80014a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80014a4:	3301      	adds	r3, #1
 80014a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        while (token != NULL)
 80014aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f af4c 	bne.w	800134a <ParseGPRMC+0xde>
        }

        return VALID;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <ParseGPRMC+0x24c>
    }
    else
    {
        return INVALID;
 80014b6:	2301      	movs	r3, #1
    }
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3768      	adds	r7, #104	; 0x68
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	0800abb8 	.word	0x0800abb8
 80014c4:	0800ab7c 	.word	0x0800ab7c
 80014c8:	0800ab88 	.word	0x0800ab88
 80014cc:	0800ab8c 	.word	0x0800ab8c
 80014d0:	0800ab98 	.word	0x0800ab98
 80014d4:	0800aba4 	.word	0x0800aba4
 80014d8:	0800aba8 	.word	0x0800aba8
 80014dc:	0800abb4 	.word	0x0800abb4

080014e0 <CalculateChecksum>:

uint8_t CalculateChecksum(uint8_t *src)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    uint8_t i = 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
    uint8_t checksum = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73bb      	strb	r3, [r7, #14]

    while (src[i] != '*')
 80014f0:	e009      	b.n	8001506 <CalculateChecksum+0x26>
    {
        checksum ^= src[i];
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	4053      	eors	r3, r2
 80014fe:	73bb      	strb	r3, [r7, #14]
        i++;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
    while (src[i] != '*')
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b2a      	cmp	r3, #42	; 0x2a
 8001510:	d1ef      	bne.n	80014f2 <CalculateChecksum+0x12>
    }

    return checksum;
 8001512:	7bbb      	ldrb	r3, [r7, #14]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
	...

08001520 <BuildGPSCoord>:

void BuildGPSCoord(int16_t deg, uint8_t min, uint32_t min2, uint8_t dir, uint8_t *ret) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af02      	add	r7, sp, #8
 8001526:	603a      	str	r2, [r7, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
 800152e:	460b      	mov	r3, r1
 8001530:	717b      	strb	r3, [r7, #5]
 8001532:	4613      	mov	r3, r2
 8001534:	713b      	strb	r3, [r7, #4]
    if(dir == 'S' || dir == 'W') deg *= -1;
 8001536:	793b      	ldrb	r3, [r7, #4]
 8001538:	2b53      	cmp	r3, #83	; 0x53
 800153a:	d002      	beq.n	8001542 <BuildGPSCoord+0x22>
 800153c:	793b      	ldrb	r3, [r7, #4]
 800153e:	2b57      	cmp	r3, #87	; 0x57
 8001540:	d103      	bne.n	800154a <BuildGPSCoord+0x2a>
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	425b      	negs	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	80fb      	strh	r3, [r7, #6]
    sprintf(ret, "%d%02d%05d", deg, min, min2);
 800154a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800154e:	7979      	ldrb	r1, [r7, #5]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	460b      	mov	r3, r1
 8001556:	4904      	ldr	r1, [pc, #16]	; (8001568 <BuildGPSCoord+0x48>)
 8001558:	6938      	ldr	r0, [r7, #16]
 800155a:	f005 f81b 	bl	8006594 <siprintf>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	0800abbc 	.word	0x0800abbc

0800156c <strtok_new>:


//taken from https://stackoverflow.com/questions/26522583/c-strtok-skips-second-token-or-consecutive-delimiter
char *strtok_new(char *string, char const *delimiter)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    static char *source = NULL;
    char *p, *riturn = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
    if (string != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <strtok_new+0x1a>
        source = string;
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <strtok_new+0x74>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
    if (source == NULL)
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <strtok_new+0x74>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <strtok_new+0x26>
        return NULL;
 800158e:	2300      	movs	r3, #0
 8001590:	e022      	b.n	80015d8 <strtok_new+0x6c>

    if ((p = strpbrk(source, delimiter)) != NULL)
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <strtok_new+0x74>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f005 f892 	bl	80066c2 <strpbrk>
 800159e:	60b8      	str	r0, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <strtok_new+0x54>
    {
        *p = 0;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
        riturn = source;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <strtok_new+0x74>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
        source = ++p;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <strtok_new+0x74>)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00a      	b.n	80015d6 <strtok_new+0x6a>
    }
    else if (*source)
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <strtok_new+0x74>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <strtok_new+0x6a>
    {
        riturn = source;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <strtok_new+0x74>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]
        source = NULL;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <strtok_new+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    }
    return riturn;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200003fc 	.word	0x200003fc

080015e4 <SIM800L_Reset>:

//HAL_PWR_EnterSLEEPMode();

//Function implementations
void SIM800L_Reset()
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
    for(int i = 0; i < 3; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	e018      	b.n	8001622 <SIM800L_Reset+0x3e>
    {
    	HAL_UART_Transmit_DMA(&huart3, RESET_PACK[i], strlen((char*)RESET_PACK[i]));
 80015f0:	4a10      	ldr	r2, [pc, #64]	; (8001634 <SIM800L_Reset+0x50>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <SIM800L_Reset+0x50>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fda5 	bl	8000150 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	4621      	mov	r1, r4
 800160e:	480a      	ldr	r0, [pc, #40]	; (8001638 <SIM800L_Reset+0x54>)
 8001610:	f003 f982 	bl	8004918 <HAL_UART_Transmit_DMA>
    	HAL_Delay(1000);
 8001614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001618:	f000 ffe4 	bl	80025e4 <HAL_Delay>
    for(int i = 0; i < 3; i++)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	dde3      	ble.n	80015f0 <SIM800L_Reset+0xc>
    }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}
 8001632:	bf00      	nop
 8001634:	20000050 	.word	0x20000050
 8001638:	200002c4 	.word	0x200002c4

0800163c <SIM800L_BatteryCheck>:

uint8_t SIM800L_BatteryCheck(uint16_t *voltage)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    static bool startTransmission = true;
    static bool secondResponse = false;
    static bool dataRead = false;

    static uint8_t batteryVoltage[10];
    uint8_t idx = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

    uint8_t retValue;

    if(startTransmission) {
 8001648:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <SIM800L_BatteryCheck+0x1bc>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00e      	beq.n	800166e <SIM800L_BatteryCheck+0x32>
    	HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001654:	f000 ffc6 	bl	80025e4 <HAL_Delay>
    	simResponseReady = false;
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <SIM800L_BatteryCheck+0x1c0>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart3, BATTERY, strlen((char*)BATTERY));
 800165e:	2208      	movs	r2, #8
 8001660:	4967      	ldr	r1, [pc, #412]	; (8001800 <SIM800L_BatteryCheck+0x1c4>)
 8001662:	4868      	ldr	r0, [pc, #416]	; (8001804 <SIM800L_BatteryCheck+0x1c8>)
 8001664:	f003 f958 	bl	8004918 <HAL_UART_Transmit_DMA>
        startTransmission = false;
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <SIM800L_BatteryCheck+0x1bc>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
        //HAL_Delay(1000);
        //simResponseReady = false;
    }
    if(simResponseReady) {
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <SIM800L_BatteryCheck+0x1c0>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8082 	beq.w	800177c <SIM800L_BatteryCheck+0x140>
        if(!secondResponse) {
 8001678:	4b63      	ldr	r3, [pc, #396]	; (8001808 <SIM800L_BatteryCheck+0x1cc>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d014      	beq.n	80016b0 <SIM800L_BatteryCheck+0x74>
            if(SIM800L_CheckResponse(SIM800L_response, NULL, "+CBC: ", batteryVoltage) == FOUND) {
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <SIM800L_BatteryCheck+0x1d0>)
 8001688:	4a61      	ldr	r2, [pc, #388]	; (8001810 <SIM800L_BatteryCheck+0x1d4>)
 800168a:	2100      	movs	r1, #0
 800168c:	4861      	ldr	r0, [pc, #388]	; (8001814 <SIM800L_BatteryCheck+0x1d8>)
 800168e:	f000 faff 	bl	8001c90 <SIM800L_CheckResponse>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d108      	bne.n	80016aa <SIM800L_BatteryCheck+0x6e>
                *voltage = 0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	801a      	strh	r2, [r3, #0]

                secondResponse = true;
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <SIM800L_BatteryCheck+0x1cc>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
                retValue = CONTINUE;
 80016a4:	2305      	movs	r3, #5
 80016a6:	73bb      	strb	r3, [r7, #14]
 80016a8:	e061      	b.n	800176e <SIM800L_BatteryCheck+0x132>
            } else {
                retValue = RETRY; 
 80016aa:	2302      	movs	r3, #2
 80016ac:	73bb      	strb	r3, [r7, #14]
 80016ae:	e05e      	b.n	800176e <SIM800L_BatteryCheck+0x132>
            }
        } else {
            if(SIM800L_CheckResponse(SIM800L_response, "OK", NULL, NULL) == FOUND) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	2200      	movs	r2, #0
 80016b4:	4958      	ldr	r1, [pc, #352]	; (8001818 <SIM800L_BatteryCheck+0x1dc>)
 80016b6:	4857      	ldr	r0, [pc, #348]	; (8001814 <SIM800L_BatteryCheck+0x1d8>)
 80016b8:	f000 faea 	bl	8001c90 <SIM800L_CheckResponse>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d153      	bne.n	800176a <SIM800L_BatteryCheck+0x12e>
                while (batteryVoltage[idx] != ',') idx++; // 1st ,
 80016c2:	e002      	b.n	80016ca <SIM800L_BatteryCheck+0x8e>
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	3301      	adds	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <SIM800L_BatteryCheck+0x1d0>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	2b2c      	cmp	r3, #44	; 0x2c
 80016d2:	d1f7      	bne.n	80016c4 <SIM800L_BatteryCheck+0x88>
                idx++;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	3301      	adds	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
                while (batteryVoltage[idx] != ',') idx++; // After time ,
 80016da:	e002      	b.n	80016e2 <SIM800L_BatteryCheck+0xa6>
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	4a49      	ldr	r2, [pc, #292]	; (800180c <SIM800L_BatteryCheck+0x1d0>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	2b2c      	cmp	r3, #44	; 0x2c
 80016ea:	d1f7      	bne.n	80016dc <SIM800L_BatteryCheck+0xa0>
                idx++;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]

                *voltage = (batteryVoltage[idx] - '0') * 1000 + (batteryVoltage[idx + 1] - '0') * 100 + (batteryVoltage[idx + 2] - '0') * 10 + (batteryVoltage[idx + 3] - '0');
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	4a45      	ldr	r2, [pc, #276]	; (800180c <SIM800L_BatteryCheck+0x1d0>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	3b30      	subs	r3, #48	; 0x30
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	0152      	lsls	r2, r2, #5
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	b29a      	uxth	r2, r3
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	3301      	adds	r3, #1
 800170e:	493f      	ldr	r1, [pc, #252]	; (800180c <SIM800L_BatteryCheck+0x1d0>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	3b30      	subs	r3, #48	; 0x30
 8001714:	b29b      	uxth	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	0089      	lsls	r1, r1, #2
 800171a:	440b      	add	r3, r1
 800171c:	4619      	mov	r1, r3
 800171e:	0088      	lsls	r0, r1, #2
 8001720:	4619      	mov	r1, r3
 8001722:	4603      	mov	r3, r0
 8001724:	440b      	add	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	b29b      	uxth	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	b29a      	uxth	r2, r3
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3302      	adds	r3, #2
 8001732:	4936      	ldr	r1, [pc, #216]	; (800180c <SIM800L_BatteryCheck+0x1d0>)
 8001734:	5ccb      	ldrb	r3, [r1, r3]
 8001736:	3b30      	subs	r3, #48	; 0x30
 8001738:	b29b      	uxth	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	0089      	lsls	r1, r1, #2
 800173e:	440b      	add	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	b29b      	uxth	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b29a      	uxth	r2, r3
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3303      	adds	r3, #3
 800174c:	492f      	ldr	r1, [pc, #188]	; (800180c <SIM800L_BatteryCheck+0x1d0>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b30      	subs	r3, #48	; 0x30
 8001758:	b29a      	uxth	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	801a      	strh	r2, [r3, #0]

                secondResponse = false;
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <SIM800L_BatteryCheck+0x1cc>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
                retValue = SUCCESS;
 8001764:	2300      	movs	r3, #0
 8001766:	73bb      	strb	r3, [r7, #14]
 8001768:	e001      	b.n	800176e <SIM800L_BatteryCheck+0x132>
            } else {
                retValue = RETRY; 
 800176a:	2302      	movs	r3, #2
 800176c:	73bb      	strb	r3, [r7, #14]
            }
        }   

        dataRead = true;
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <SIM800L_BatteryCheck+0x1e0>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
        simResponseReady = false;
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <SIM800L_BatteryCheck+0x1c0>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e004      	b.n	8001786 <SIM800L_BatteryCheck+0x14a>
    } else {
        dataRead = false;
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <SIM800L_BatteryCheck+0x1e0>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
        retValue = NO_READ;
 8001782:	2307      	movs	r3, #7
 8001784:	73bb      	strb	r3, [r7, #14]
    }

    if(retValue == RETRY || retValue == WEB_RETRY) {
 8001786:	7bbb      	ldrb	r3, [r7, #14]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d002      	beq.n	8001792 <SIM800L_BatteryCheck+0x156>
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d10e      	bne.n	80017b0 <SIM800L_BatteryCheck+0x174>
        dataRead = false;
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <SIM800L_BatteryCheck+0x1e0>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
        secondResponse = false;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <SIM800L_BatteryCheck+0x1cc>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
        startTransmission = true;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <SIM800L_BatteryCheck+0x1bc>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
        retryCounter++;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <SIM800L_BatteryCheck+0x1e4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <SIM800L_BatteryCheck+0x1e4>)
 80017ae:	701a      	strb	r2, [r3, #0]

        //HAL_Delay(250);
    } 

      if(retValue == CONTINUE) {
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d102      	bne.n	80017bc <SIM800L_BatteryCheck+0x180>
        retryCounter = 0;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <SIM800L_BatteryCheck+0x1e4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
    }

    if(retryCounter == MAX_RETRY) {
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <SIM800L_BatteryCheck+0x1e4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d101      	bne.n	80017c8 <SIM800L_BatteryCheck+0x18c>
        retValue = FATAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73bb      	strb	r3, [r7, #14]
    }
    if(retValue == SUCCESS || retValue == FATAL_ERROR) {
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <SIM800L_BatteryCheck+0x198>
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10b      	bne.n	80017ec <SIM800L_BatteryCheck+0x1b0>
        retryCounter = 0;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <SIM800L_BatteryCheck+0x1e4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
        dataRead = false;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <SIM800L_BatteryCheck+0x1e0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
        startTransmission = true;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SIM800L_BatteryCheck+0x1bc>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
        secondResponse = false;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <SIM800L_BatteryCheck+0x1cc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
    }
    return retValue;
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000068 	.word	0x20000068
 80017fc:	200004dd 	.word	0x200004dd
 8001800:	0800ad88 	.word	0x0800ad88
 8001804:	200002c4 	.word	0x200002c4
 8001808:	20000400 	.word	0x20000400
 800180c:	20000404 	.word	0x20000404
 8001810:	0800ad64 	.word	0x0800ad64
 8001814:	20000478 	.word	0x20000478
 8001818:	0800ad6c 	.word	0x0800ad6c
 800181c:	2000040e 	.word	0x2000040e
 8001820:	2000040f 	.word	0x2000040f

08001824 <SIM800L_SendSMS>:

uint8_t SIM800L_SendSMS(uint8_t *sms)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    static uint8_t retryCounter = 0;
    static bool startTransmission = true;
    static bool secondResponse = false;
    static bool dataRead = false;

    uint8_t retValue = 255;
 800182c:	23ff      	movs	r3, #255	; 0xff
 800182e:	73fb      	strb	r3, [r7, #15]

    if(startTransmission) {
 8001830:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <SIM800L_SendSMS+0x1ac>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d029      	beq.n	800188c <SIM800L_SendSMS+0x68>
        HAL_UART_Transmit_DMA(&huart3, SMS_PACK[i], strlen((char*)SMS_PACK[i]));
 8001838:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <SIM800L_SendSMS+0x1b0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <SIM800L_SendSMS+0x1b4>)
 8001840:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001844:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <SIM800L_SendSMS+0x1b0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <SIM800L_SendSMS+0x1b4>)
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fc7d 	bl	8000150 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	4621      	mov	r1, r4
 800185e:	485f      	ldr	r0, [pc, #380]	; (80019dc <SIM800L_SendSMS+0x1b8>)
 8001860:	f003 f85a 	bl	8004918 <HAL_UART_Transmit_DMA>
        if(i == 3) {
 8001864:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <SIM800L_SendSMS+0x1b0>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d10c      	bne.n	8001886 <SIM800L_SendSMS+0x62>
            HAL_Delay(200);
 800186c:	20c8      	movs	r0, #200	; 0xc8
 800186e:	f000 feb9 	bl	80025e4 <HAL_Delay>
            HAL_UART_Transmit_DMA(&huart3, sms, strlen((char*) sms));
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fc6c 	bl	8000150 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29b      	uxth	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4856      	ldr	r0, [pc, #344]	; (80019dc <SIM800L_SendSMS+0x1b8>)
 8001882:	f003 f849 	bl	8004918 <HAL_UART_Transmit_DMA>
        }
        startTransmission = false;
 8001886:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <SIM800L_SendSMS+0x1ac>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
    }
    if(simResponseReady) {
 800188c:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <SIM800L_SendSMS+0x1bc>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03f      	beq.n	8001914 <SIM800L_SendSMS+0xf0>
       switch(i)
 8001894:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <SIM800L_SendSMS+0x1b0>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d125      	bne.n	80018e8 <SIM800L_SendSMS+0xc4>
        {                
            case 3:
                if(!secondResponse) 
 800189c:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <SIM800L_SendSMS+0x1c0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f083 0301 	eor.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00c      	beq.n	80018c4 <SIM800L_SendSMS+0xa0>
                {
                    if(SIM800L_response[0] != NULL) 
 80018aa:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <SIM800L_SendSMS+0x1c4>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <SIM800L_SendSMS+0x9a>
                    {
                        secondResponse = true;
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <SIM800L_SendSMS+0x1c0>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
                        retValue = CONTINUE;
 80018b8:	2305      	movs	r3, #5
 80018ba:	73fb      	strb	r3, [r7, #15]
                    else 
                    {
                        retValue = SMS_RETRY; 
                    }
                }
                break;
 80018bc:	e023      	b.n	8001906 <SIM800L_SendSMS+0xe2>
                        retValue = SMS_RETRY; 
 80018be:	2304      	movs	r3, #4
 80018c0:	73fb      	strb	r3, [r7, #15]
                break;
 80018c2:	e020      	b.n	8001906 <SIM800L_SendSMS+0xe2>
                    if(SIM800L_CheckResponse(SIM800L_response, "OK", NULL, NULL) == FOUND) 
 80018c4:	2300      	movs	r3, #0
 80018c6:	2200      	movs	r2, #0
 80018c8:	4948      	ldr	r1, [pc, #288]	; (80019ec <SIM800L_SendSMS+0x1c8>)
 80018ca:	4847      	ldr	r0, [pc, #284]	; (80019e8 <SIM800L_SendSMS+0x1c4>)
 80018cc:	f000 f9e0 	bl	8001c90 <SIM800L_CheckResponse>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <SIM800L_SendSMS+0xbe>
                        secondResponse = false;
 80018d6:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <SIM800L_SendSMS+0x1c0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
                        retValue = SUCCESS;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
                break;
 80018e0:	e011      	b.n	8001906 <SIM800L_SendSMS+0xe2>
                        retValue = SMS_RETRY; 
 80018e2:	2304      	movs	r3, #4
 80018e4:	73fb      	strb	r3, [r7, #15]
                break;
 80018e6:	e00e      	b.n	8001906 <SIM800L_SendSMS+0xe2>
            
            default:
                if(SIM800L_CheckResponse(SIM800L_response, "OK", NULL, NULL) == FOUND) 
 80018e8:	2300      	movs	r3, #0
 80018ea:	2200      	movs	r2, #0
 80018ec:	493f      	ldr	r1, [pc, #252]	; (80019ec <SIM800L_SendSMS+0x1c8>)
 80018ee:	483e      	ldr	r0, [pc, #248]	; (80019e8 <SIM800L_SendSMS+0x1c4>)
 80018f0:	f000 f9ce 	bl	8001c90 <SIM800L_CheckResponse>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <SIM800L_SendSMS+0xdc>
                {
                    retValue = CONTINUE;
 80018fa:	2305      	movs	r3, #5
 80018fc:	73fb      	strb	r3, [r7, #15]
                else 
                {
                    retValue = RETRY; 
                }
                
                break;
 80018fe:	e001      	b.n	8001904 <SIM800L_SendSMS+0xe0>
                    retValue = RETRY; 
 8001900:	2302      	movs	r3, #2
 8001902:	73fb      	strb	r3, [r7, #15]
                break;
 8001904:	bf00      	nop
        }

        dataRead = true;
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <SIM800L_SendSMS+0x1cc>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
        simResponseReady = false;
 800190c:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <SIM800L_SendSMS+0x1bc>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e004      	b.n	800191e <SIM800L_SendSMS+0xfa>
    } else {
        dataRead = false;
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <SIM800L_SendSMS+0x1cc>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
        retValue = NO_READ;
 800191a:	2307      	movs	r3, #7
 800191c:	73fb      	strb	r3, [r7, #15]
    }

    if(retValue == RETRY || retValue == SMS_RETRY) {
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d002      	beq.n	800192a <SIM800L_SendSMS+0x106>
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d112      	bne.n	8001950 <SIM800L_SendSMS+0x12c>
        dataRead = false;
 800192a:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <SIM800L_SendSMS+0x1cc>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
        secondResponse = false;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <SIM800L_SendSMS+0x1c0>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
        startTransmission = true;
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <SIM800L_SendSMS+0x1ac>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
        retryCounter++;
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <SIM800L_SendSMS+0x1d0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <SIM800L_SendSMS+0x1d0>)
 8001946:	701a      	strb	r2, [r3, #0]

        HAL_Delay(250);
 8001948:	20fa      	movs	r0, #250	; 0xfa
 800194a:	f000 fe4b 	bl	80025e4 <HAL_Delay>
 800194e:	e016      	b.n	800197e <SIM800L_SendSMS+0x15a>
    } else {
        if(!secondResponse && dataRead) {
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <SIM800L_SendSMS+0x1c0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f083 0301 	eor.w	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00f      	beq.n	800197e <SIM800L_SendSMS+0x15a>
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <SIM800L_SendSMS+0x1cc>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <SIM800L_SendSMS+0x15a>
            dataRead = false;
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <SIM800L_SendSMS+0x1cc>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
            startTransmission = true;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <SIM800L_SendSMS+0x1ac>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
            i++;
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <SIM800L_SendSMS+0x1b0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <SIM800L_SendSMS+0x1b0>)
 800197c:	701a      	strb	r2, [r3, #0]
        }
    }

    if(retValue == CONTINUE) {
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d102      	bne.n	800198a <SIM800L_SendSMS+0x166>
        retryCounter = 0;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <SIM800L_SendSMS+0x1d0>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    }

    if(retryCounter == MAX_RETRY) {
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <SIM800L_SendSMS+0x1d0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d101      	bne.n	8001996 <SIM800L_SendSMS+0x172>
        retValue = FATAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
    }
    if(retValue == SUCCESS || retValue == FATAL_ERROR) {
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <SIM800L_SendSMS+0x17e>
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d111      	bne.n	80019c6 <SIM800L_SendSMS+0x1a2>
        if(retValue == SUCCESS) i = 0;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <SIM800L_SendSMS+0x18a>
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <SIM800L_SendSMS+0x1b0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
        retryCounter = 0;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <SIM800L_SendSMS+0x1d0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
        dataRead = false;
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <SIM800L_SendSMS+0x1cc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
        startTransmission = true;
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SIM800L_SendSMS+0x1ac>)
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
        secondResponse = false;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <SIM800L_SendSMS+0x1c0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    }
    return retValue;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	20000069 	.word	0x20000069
 80019d4:	20000410 	.word	0x20000410
 80019d8:	20000008 	.word	0x20000008
 80019dc:	200002c4 	.word	0x200002c4
 80019e0:	200004dd 	.word	0x200004dd
 80019e4:	20000411 	.word	0x20000411
 80019e8:	20000478 	.word	0x20000478
 80019ec:	0800ad6c 	.word	0x0800ad6c
 80019f0:	20000412 	.word	0x20000412
 80019f4:	20000413 	.word	0x20000413

080019f8 <SIM800L_WEBUpdate>:

uint8_t SIM800L_WEBUpdate(uint8_t *url)  //It finally works, after countless hours of debugging
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    static bool secondResponse = false;
    static bool dataRead = false;

    uint8_t retValue;
 
    if(startTransmission) {
 8001a00:	4b74      	ldr	r3, [pc, #464]	; (8001bd4 <SIM800L_WEBUpdate+0x1dc>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d027      	beq.n	8001a58 <SIM800L_WEBUpdate+0x60>
        if(i == 10) {
 8001a08:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	d10a      	bne.n	8001a26 <SIM800L_WEBUpdate+0x2e>
            HAL_UART_Transmit_DMA(&huart3, url, strlen((char*) url));
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7fe fb9d 	bl	8000150 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	486f      	ldr	r0, [pc, #444]	; (8001bdc <SIM800L_WEBUpdate+0x1e4>)
 8001a20:	f002 ff7a 	bl	8004918 <HAL_UART_Transmit_DMA>
 8001a24:	e015      	b.n	8001a52 <SIM800L_WEBUpdate+0x5a>
            //HAL_Delay(500);
        } else {
            HAL_UART_Transmit_DMA(&huart3, HTTP_PACK[i], strlen((char*)HTTP_PACK[i]));
 8001a26:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <SIM800L_WEBUpdate+0x1e8>)
 8001a2e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001a32:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <SIM800L_WEBUpdate+0x1e8>)
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fb86 	bl	8000150 <strlen>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4863      	ldr	r0, [pc, #396]	; (8001bdc <SIM800L_WEBUpdate+0x1e4>)
 8001a4e:	f002 ff63 	bl	8004918 <HAL_UART_Transmit_DMA>
            //HAL_Delay(500);
        }
        startTransmission = false;
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <SIM800L_WEBUpdate+0x1dc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
    }
    if(simResponseReady) {
 8001a58:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <SIM800L_WEBUpdate+0x1ec>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d058      	beq.n	8001b12 <SIM800L_WEBUpdate+0x11a>
        switch(i)
 8001a60:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d002      	beq.n	8001a6e <SIM800L_WEBUpdate+0x76>
 8001a68:	2b0b      	cmp	r3, #11
 8001a6a:	d00a      	beq.n	8001a82 <SIM800L_WEBUpdate+0x8a>
 8001a6c:	e034      	b.n	8001ad8 <SIM800L_WEBUpdate+0xe0>
        {
        	case 3: //CIFSR
                if(SIM800L_response[0] != NULL) 
 8001a6e:	4b5e      	ldr	r3, [pc, #376]	; (8001be8 <SIM800L_WEBUpdate+0x1f0>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <SIM800L_WEBUpdate+0x84>
                {
                    retValue = CONTINUE;
 8001a76:	2305      	movs	r3, #5
 8001a78:	73fb      	strb	r3, [r7, #15]
                else 
                {
                    retValue = RETRY;
                }

                break;
 8001a7a:	e043      	b.n	8001b04 <SIM800L_WEBUpdate+0x10c>
                    retValue = RETRY;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	73fb      	strb	r3, [r7, #15]
                break;
 8001a80:	e040      	b.n	8001b04 <SIM800L_WEBUpdate+0x10c>

            case 11: //HTTPACTION
                if(!secondResponse) 
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <SIM800L_WEBUpdate+0x1f4>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d011      	beq.n	8001ab4 <SIM800L_WEBUpdate+0xbc>
                {
                    if(SIM800L_CheckResponse(SIM800L_response, "OK", NULL, NULL) == FOUND) 
 8001a90:	2300      	movs	r3, #0
 8001a92:	2200      	movs	r2, #0
 8001a94:	4956      	ldr	r1, [pc, #344]	; (8001bf0 <SIM800L_WEBUpdate+0x1f8>)
 8001a96:	4854      	ldr	r0, [pc, #336]	; (8001be8 <SIM800L_WEBUpdate+0x1f0>)
 8001a98:	f000 f8fa 	bl	8001c90 <SIM800L_CheckResponse>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <SIM800L_WEBUpdate+0xb6>
                    {
                        secondResponse = true;
 8001aa2:	4b52      	ldr	r3, [pc, #328]	; (8001bec <SIM800L_WEBUpdate+0x1f4>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
                        retValue = CONTINUE;
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	73fb      	strb	r3, [r7, #15]
                    else 
                    {
                        retValue = WEB_RETRY;
                    }
                }
                    break;
 8001aac:	e02a      	b.n	8001b04 <SIM800L_WEBUpdate+0x10c>
                        retValue = WEB_RETRY;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	73fb      	strb	r3, [r7, #15]
                    break;
 8001ab2:	e027      	b.n	8001b04 <SIM800L_WEBUpdate+0x10c>
                    if(SIM800L_CheckResponse(SIM800L_response, "200", NULL, NULL) == FOUND) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	494e      	ldr	r1, [pc, #312]	; (8001bf4 <SIM800L_WEBUpdate+0x1fc>)
 8001aba:	484b      	ldr	r0, [pc, #300]	; (8001be8 <SIM800L_WEBUpdate+0x1f0>)
 8001abc:	f000 f8e8 	bl	8001c90 <SIM800L_CheckResponse>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <SIM800L_WEBUpdate+0xda>
                        secondResponse = false;
 8001ac6:	4b49      	ldr	r3, [pc, #292]	; (8001bec <SIM800L_WEBUpdate+0x1f4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
                        retValue = CONTINUE;
 8001acc:	2305      	movs	r3, #5
 8001ace:	73fb      	strb	r3, [r7, #15]
                    break;
 8001ad0:	e018      	b.n	8001b04 <SIM800L_WEBUpdate+0x10c>
                        retValue = WEB_RETRY;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	73fb      	strb	r3, [r7, #15]
                    break;
 8001ad6:	e015      	b.n	8001b04 <SIM800L_WEBUpdate+0x10c>

            default:
                if(SIM800L_CheckResponse(SIM800L_response, "OK", NULL, NULL) == FOUND)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2200      	movs	r2, #0
 8001adc:	4944      	ldr	r1, [pc, #272]	; (8001bf0 <SIM800L_WEBUpdate+0x1f8>)
 8001ade:	4842      	ldr	r0, [pc, #264]	; (8001be8 <SIM800L_WEBUpdate+0x1f0>)
 8001ae0:	f000 f8d6 	bl	8001c90 <SIM800L_CheckResponse>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <SIM800L_WEBUpdate+0x106>
                {
                    if(i == 12) retValue = SUCCESS;
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d102      	bne.n	8001af8 <SIM800L_WEBUpdate+0x100>
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
                else 
                {
                    retValue = RETRY;
                }

                break;
 8001af6:	e004      	b.n	8001b02 <SIM800L_WEBUpdate+0x10a>
                    else retValue = CONTINUE;
 8001af8:	2305      	movs	r3, #5
 8001afa:	73fb      	strb	r3, [r7, #15]
                break;
 8001afc:	e001      	b.n	8001b02 <SIM800L_WEBUpdate+0x10a>
                    retValue = RETRY;
 8001afe:	2302      	movs	r3, #2
 8001b00:	73fb      	strb	r3, [r7, #15]
                break;
 8001b02:	bf00      	nop
        }

        dataRead = true;
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <SIM800L_WEBUpdate+0x200>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
        simResponseReady = false;
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <SIM800L_WEBUpdate+0x1ec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e004      	b.n	8001b1c <SIM800L_WEBUpdate+0x124>

    } else {
        dataRead = false; //herein lies part of the problem: always no read
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <SIM800L_WEBUpdate+0x200>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
        retValue = NO_READ;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	73fb      	strb	r3, [r7, #15]
    }

    if(retValue == RETRY || retValue == WEB_RETRY) 
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d002      	beq.n	8001b28 <SIM800L_WEBUpdate+0x130>
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d112      	bne.n	8001b4e <SIM800L_WEBUpdate+0x156>
    {
        dataRead = false;
 8001b28:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <SIM800L_WEBUpdate+0x200>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
        secondResponse = false;
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <SIM800L_WEBUpdate+0x1f4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
        startTransmission = true;
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <SIM800L_WEBUpdate+0x1dc>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
        retryCounter++;
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <SIM800L_WEBUpdate+0x204>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <SIM800L_WEBUpdate+0x204>)
 8001b44:	701a      	strb	r2, [r3, #0]

        HAL_Delay(250);
 8001b46:	20fa      	movs	r0, #250	; 0xfa
 8001b48:	f000 fd4c 	bl	80025e4 <HAL_Delay>
 8001b4c:	e016      	b.n	8001b7c <SIM800L_WEBUpdate+0x184>
    } else {
        if(!secondResponse && dataRead) {
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <SIM800L_WEBUpdate+0x1f4>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00f      	beq.n	8001b7c <SIM800L_WEBUpdate+0x184>
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <SIM800L_WEBUpdate+0x200>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00b      	beq.n	8001b7c <SIM800L_WEBUpdate+0x184>
            dataRead = false;
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <SIM800L_WEBUpdate+0x200>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
            startTransmission = true;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <SIM800L_WEBUpdate+0x1dc>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
            i++;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001b7a:	701a      	strb	r2, [r3, #0]
        }
    }

    if(retValue == CONTINUE) {
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d102      	bne.n	8001b88 <SIM800L_WEBUpdate+0x190>
        retryCounter = 0;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <SIM800L_WEBUpdate+0x204>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
    }

    if(retryCounter == MAX_RETRY) {
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <SIM800L_WEBUpdate+0x204>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d101      	bne.n	8001b94 <SIM800L_WEBUpdate+0x19c>
        retValue = FATAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
    }
    if(retValue == SUCCESS || retValue == FATAL_ERROR) 
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <SIM800L_WEBUpdate+0x1a8>
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d113      	bne.n	8001bc8 <SIM800L_WEBUpdate+0x1d0>
    {
        i = 0;
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <SIM800L_WEBUpdate+0x1e0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
        //if(retValue == SUCCESS) i = 0;
        if(retValue == FATAL_ERROR) SIM800L_Reset();
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <SIM800L_WEBUpdate+0x1b8>
 8001bac:	f7ff fd1a 	bl	80015e4 <SIM800L_Reset>
        retryCounter = 0;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <SIM800L_WEBUpdate+0x204>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
        dataRead = false;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <SIM800L_WEBUpdate+0x200>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
        startTransmission = true;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SIM800L_WEBUpdate+0x1dc>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
        secondResponse = false;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <SIM800L_WEBUpdate+0x1f4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
    }
    return retValue;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000006a 	.word	0x2000006a
 8001bd8:	20000414 	.word	0x20000414
 8001bdc:	200002c4 	.word	0x200002c4
 8001be0:	2000001c 	.word	0x2000001c
 8001be4:	200004dd 	.word	0x200004dd
 8001be8:	20000478 	.word	0x20000478
 8001bec:	20000415 	.word	0x20000415
 8001bf0:	0800ad6c 	.word	0x0800ad6c
 8001bf4:	0800ad70 	.word	0x0800ad70
 8001bf8:	20000416 	.word	0x20000416
 8001bfc:	20000417 	.word	0x20000417

08001c00 <SIM800L_Sleep>:

void SIM800L_Sleep()
{
 8001c00:	b598      	push	{r3, r4, r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	SIM800L_Reset();
 8001c04:	f7ff fcee 	bl	80015e4 <SIM800L_Reset>

	HAL_UART_Transmit_DMA(&huart3, POWER_PACK[0], strlen((char*)POWER_PACK[0]));
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <SIM800L_Sleep+0x30>)
 8001c0a:	681c      	ldr	r4, [r3, #0]
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <SIM800L_Sleep+0x30>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fa9d 	bl	8000150 <strlen>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <SIM800L_Sleep+0x34>)
 8001c20:	f002 fe7a 	bl	8004918 <HAL_UART_Transmit_DMA>
	HAL_Delay(5000);
 8001c24:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c28:	f000 fcdc 	bl	80025e4 <HAL_Delay>

}
 8001c2c:	bf00      	nop
 8001c2e:	bd98      	pop	{r3, r4, r7, pc}
 8001c30:	2000005c 	.word	0x2000005c
 8001c34:	200002c4 	.word	0x200002c4

08001c38 <SIM800L_Wakeup>:

void SIM800L_Wakeup() //In theory, the auto sleep function should work but I'm not taking any chances, m'kay
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	for(int i = 1; i < 3; i++)
 8001c3e:	2301      	movs	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	e018      	b.n	8001c76 <SIM800L_Wakeup+0x3e>
	{
		HAL_UART_Transmit_DMA(&huart3, POWER_PACK[i], strlen((char*)POWER_PACK[i]));
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <SIM800L_Wakeup+0x50>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001c4c:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <SIM800L_Wakeup+0x50>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fa7b 	bl	8000150 <strlen>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4621      	mov	r1, r4
 8001c62:	480a      	ldr	r0, [pc, #40]	; (8001c8c <SIM800L_Wakeup+0x54>)
 8001c64:	f002 fe58 	bl	8004918 <HAL_UART_Transmit_DMA>
		HAL_Delay(500);
 8001c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c6c:	f000 fcba 	bl	80025e4 <HAL_Delay>
	for(int i = 1; i < 3; i++)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	dde3      	ble.n	8001c44 <SIM800L_Wakeup+0xc>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000005c 	.word	0x2000005c
 8001c8c:	200002c4 	.word	0x200002c4

08001c90 <SIM800L_CheckResponse>:

//Dos modos de uso, si se busca una respuesta específica, se pasa la respuesta a esperar en expectedResponse, y se pasa NULL en responseToThis y resultResponseToThis
//Si se busca una respuesta que contenga algo a confirmar, se pasa NULL en expectedResponse, y se pasa el string que precede a lo buscado en responseToThis, y se pasa un puntero a un string vacío en resultResponseToThis
uint8_t SIM800L_CheckResponse(uint8_t *response, uint8_t *expectedResponse, uint8_t *responseToThis, uint8_t *resultResponseToThis) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
    uint8_t *token;
    
    if(expectedResponse != NULL) {
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <SIM800L_CheckResponse+0x2a>
        if(strstr(response, expectedResponse) != NULL) {
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f004 fd23 	bl	80066f2 <strstr>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SIM800L_CheckResponse+0x26>
            return FOUND;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e010      	b.n	8001cd8 <SIM800L_CheckResponse+0x48>
        } else {
            return NOT_FOUND;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <SIM800L_CheckResponse+0x48>
        }
    } else {
        token = strtok(response, responseToThis);
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f005 fb3d 	bl	800733c <strtok>
 8001cc2:	6178      	str	r0, [r7, #20]
        
        if(token != NULL) {
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <SIM800L_CheckResponse+0x46>
            strcpy(resultResponseToThis, token);
 8001cca:	6979      	ldr	r1, [r7, #20]
 8001ccc:	6838      	ldr	r0, [r7, #0]
 8001cce:	f004 fcf0 	bl	80066b2 <strcpy>

            return FOUND;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <SIM800L_CheckResponse+0x48>
        } else {
            return NOT_FOUND;
 8001cd6:	2301      	movs	r3, #1
        }
    }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_MspInit+0x5c>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_MspInit+0x5c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_MspInit+0x5c>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_MspInit+0x5c>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_MspInit+0x60>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_MspInit+0x60>)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000

08001d44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_RTC_MspInit+0x4c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d118      	bne.n	8001d88 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001d56:	f001 f9b9 	bl	80030cc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_RTC_MspInit+0x50>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_RTC_MspInit+0x50>)
 8001d60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RTC_MspInit+0x50>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RTC_MspInit+0x54>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2029      	movs	r0, #41	; 0x29
 8001d7e:	f000 fd48 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d82:	2029      	movs	r0, #41	; 0x29
 8001d84:	f000 fd61 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40002800 	.word	0x40002800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	4242043c 	.word	0x4242043c

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_UART_MspInit+0x200>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d15f      	bne.n	8001e7c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc6:	61d3      	str	r3, [r2, #28]
 8001dc8:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a71      	ldr	r2, [pc, #452]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dec:	2304      	movs	r3, #4
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4869      	ldr	r0, [pc, #420]	; (8001fa4 <HAL_UART_MspInit+0x208>)
 8001e00:	f000 ffe0 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e04:	2308      	movs	r3, #8
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4619      	mov	r1, r3
 8001e16:	4863      	ldr	r0, [pc, #396]	; (8001fa4 <HAL_UART_MspInit+0x208>)
 8001e18:	f000 ffd4 	bl	8002dc4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001e1c:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e1e:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_UART_MspInit+0x210>)
 8001e20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e28:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2e:	4b5e      	ldr	r3, [pc, #376]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e34:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3a:	4b5b      	ldr	r3, [pc, #364]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e46:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e4e:	4856      	ldr	r0, [pc, #344]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e50:	f000 fd16 	bl	8002880 <HAL_DMA_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001e5a:	f7ff fa01 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_UART_MspInit+0x20c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2026      	movs	r0, #38	; 0x26
 8001e70:	f000 fccf 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e74:	2026      	movs	r0, #38	; 0x26
 8001e76:	f000 fce8 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e7a:	e08b      	b.n	8001f94 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_UART_MspInit+0x214>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	f040 8086 	bne.w	8001f94 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e88:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e92:	61d3      	str	r3, [r2, #28]
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a3e      	ldr	r2, [pc, #248]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <HAL_UART_MspInit+0x204>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4839      	ldr	r0, [pc, #228]	; (8001fb4 <HAL_UART_MspInit+0x218>)
 8001ece:	f000 ff79 	bl	8002dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4833      	ldr	r0, [pc, #204]	; (8001fb4 <HAL_UART_MspInit+0x218>)
 8001ee8:	f000 ff6c 	bl	8002dc4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001eee:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <HAL_UART_MspInit+0x220>)
 8001ef0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f16:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f1c:	4826      	ldr	r0, [pc, #152]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f1e:	f000 fcaf 	bl	8002880 <HAL_DMA_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_UART_MspInit+0x190>
      Error_Handler();
 8001f28:	f7ff f99a 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_UART_MspInit+0x21c>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_UART_MspInit+0x228>)
 8001f3c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f68:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f6a:	f000 fc89 	bl	8002880 <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001f74:	f7ff f974 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_UART_MspInit+0x224>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2027      	movs	r0, #39	; 0x27
 8001f8a:	f000 fc42 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f8e:	2027      	movs	r0, #39	; 0x27
 8001f90:	f000 fc5b 	bl	800284a <HAL_NVIC_EnableIRQ>
}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	2000030c 	.word	0x2000030c
 8001fac:	4002006c 	.word	0x4002006c
 8001fb0:	40004800 	.word	0x40004800
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	20000350 	.word	0x20000350
 8001fbc:	4002001c 	.word	0x4002001c
 8001fc0:	20000394 	.word	0x20000394
 8001fc4:	40020030 	.word	0x40020030

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <NMI_Handler+0x4>

08001fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200e:	f000 facd 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <DMA1_Channel2_IRQHandler+0x10>)
 800201e:	f000 fd9d 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000350 	.word	0x20000350

0800202c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <DMA1_Channel3_IRQHandler+0x10>)
 8002032:	f000 fd93 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000394 	.word	0x20000394

08002040 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA1_Channel6_IRQHandler+0x10>)
 8002046:	f000 fd89 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000030c 	.word	0x2000030c

08002054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <USART2_IRQHandler+0x10>)
 800205a:	f002 fcf3 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000027c 	.word	0x2000027c

08002068 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <USART3_IRQHandler+0x10>)
 800206e:	f002 fce9 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002c4 	.word	0x200002c4

0800207c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <RTC_Alarm_IRQHandler+0x10>)
 8002082:	f002 f92d 	bl	80042e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000268 	.word	0x20000268

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <_kill>:

int _kill(int pid, int sig)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a8:	f003 fbd0 	bl	800584c <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2216      	movs	r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
  return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_exit>:

void _exit (int status)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffe7 	bl	800209e <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d0:	e7fe      	b.n	80020d0 <_exit+0x12>

080020d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e00a      	b.n	80020fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e4:	f3af 8000 	nop.w
 80020e8:	4601      	mov	r1, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	60ba      	str	r2, [r7, #8]
 80020f0:	b2ca      	uxtb	r2, r1
 80020f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dbf0      	blt.n	80020e4 <_read+0x12>
  }

  return len;
 8002102:	687b      	ldr	r3, [r7, #4]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e009      	b.n	8002132 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	dbf1      	blt.n	800211e <_write+0x12>
  }
  return len;
 800213a:	687b      	ldr	r3, [r7, #4]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_close>:

int _close(int file)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
  return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <_isatty>:

int _isatty(int file)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f003 fb3a 	bl	800584c <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20005000 	.word	0x20005000
 8002204:	00000400 	.word	0x00000400
 8002208:	20000418 	.word	0x20000418
 800220c:	200005b0 	.word	0x200005b0

08002210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_UART_RxCpltCallback>:

bool gpsSentenceReady = false;
bool simResponseReady = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
    /* start the DMA again */
    if (huart->Instance == USART2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_UART_RxCpltCallback+0x5c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10e      	bne.n	800224c <HAL_UART_RxCpltCallback+0x30>
	{   
        if(GPS_RX("GPRMC") == SUCCESS) gpsSentenceReady = true;
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <HAL_UART_RxCpltCallback+0x60>)
 8002230:	f000 f834 	bl	800229c <GPS_RX>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_UART_RxCpltCallback+0x26>
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_UART_RxCpltCallback+0x64>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e004      	b.n	800224c <HAL_UART_RxCpltCallback+0x30>
        else HAL_UART_Receive_DMA(&huart2, usart2_buffer, 1);
 8002242:	2201      	movs	r2, #1
 8002244:	490f      	ldr	r1, [pc, #60]	; (8002284 <HAL_UART_RxCpltCallback+0x68>)
 8002246:	4810      	ldr	r0, [pc, #64]	; (8002288 <HAL_UART_RxCpltCallback+0x6c>)
 8002248:	f002 fbd6 	bl	80049f8 <HAL_UART_Receive_DMA>
	}

	/* start the DMA again */
	if (huart->Instance == USART3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_UART_RxCpltCallback+0x70>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10c      	bne.n	8002270 <HAL_UART_RxCpltCallback+0x54>
	{
        if(SIM_RX() == SUCCESS) simResponseReady = true;
 8002256:	f000 f8c5 	bl	80023e4 <SIM_RX>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <HAL_UART_RxCpltCallback+0x4a>
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_UART_RxCpltCallback+0x74>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
        
        HAL_UART_Receive_DMA(&huart3, usart3_buffer, 1);
 8002266:	2201      	movs	r2, #1
 8002268:	490a      	ldr	r1, [pc, #40]	; (8002294 <HAL_UART_RxCpltCallback+0x78>)
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <HAL_UART_RxCpltCallback+0x7c>)
 800226c:	f002 fbc4 	bl	80049f8 <HAL_UART_Receive_DMA>
	}
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40004400 	.word	0x40004400
 800227c:	0800ad74 	.word	0x0800ad74
 8002280:	200004dc 	.word	0x200004dc
 8002284:	2000041c 	.word	0x2000041c
 8002288:	2000027c 	.word	0x2000027c
 800228c:	40004800 	.word	0x40004800
 8002290:	200004dd 	.word	0x200004dd
 8002294:	20000420 	.word	0x20000420
 8002298:	200002c4 	.word	0x200002c4

0800229c <GPS_RX>:

uint8_t GPS_RX(uint8_t *header) {
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    static uint8_t idx, cont;
    static uint8_t gps_buffer[NMEA0183_MAX_LENGTH + 1];
		
    if(usart2_buffer[0] == '$' || idx > 0) {
 80022a4:	4b4a      	ldr	r3, [pc, #296]	; (80023d0 <GPS_RX+0x134>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b24      	cmp	r3, #36	; 0x24
 80022aa:	d004      	beq.n	80022b6 <GPS_RX+0x1a>
 80022ac:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <GPS_RX+0x138>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8086 	beq.w	80023c2 <GPS_RX+0x126>
        if(usart2_buffer[0] == 0x0D) {
 80022b6:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <GPS_RX+0x134>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b0d      	cmp	r3, #13
 80022bc:	d122      	bne.n	8002304 <GPS_RX+0x68>
            gps_buffer[idx] = '\0';
 80022be:	4b45      	ldr	r3, [pc, #276]	; (80023d4 <GPS_RX+0x138>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <GPS_RX+0x13c>)
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]

            for (uint8_t i = 0; i <= idx; i++) {
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e00c      	b.n	80022ea <GPS_RX+0x4e>
                sentence[i] = gps_buffer[i];
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4940      	ldr	r1, [pc, #256]	; (80023d8 <GPS_RX+0x13c>)
 80022d6:	5c89      	ldrb	r1, [r1, r2]
 80022d8:	4a40      	ldr	r2, [pc, #256]	; (80023dc <GPS_RX+0x140>)
 80022da:	54d1      	strb	r1, [r2, r3]
                gps_buffer[i] = 0;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	4a3e      	ldr	r2, [pc, #248]	; (80023d8 <GPS_RX+0x13c>)
 80022e0:	2100      	movs	r1, #0
 80022e2:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i <= idx; i++) {
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <GPS_RX+0x138>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d9ed      	bls.n	80022d0 <GPS_RX+0x34>
            }

            idx = 0;
 80022f4:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <GPS_RX+0x138>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
            cont = 0;
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <GPS_RX+0x144>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]

            return SUCCESS;
 8002300:	2300      	movs	r3, #0
 8002302:	e05f      	b.n	80023c4 <GPS_RX+0x128>
        } else {
            gps_buffer[idx] = usart2_buffer[0];
 8002304:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <GPS_RX+0x138>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <GPS_RX+0x134>)
 800230c:	7819      	ldrb	r1, [r3, #0]
 800230e:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <GPS_RX+0x13c>)
 8002310:	5499      	strb	r1, [r3, r2]
            idx++;
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <GPS_RX+0x138>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <GPS_RX+0x138>)
 800231c:	701a      	strb	r2, [r3, #0]

            if((gps_buffer[0] == '$' && (idx - 1) == 0) || (gps_buffer[1] == header[0] && (idx - 1) == 1) || (gps_buffer[2] == header[1] && (idx - 1) == 2) || (gps_buffer[3] == header[2] && (idx - 1) == 3) || (gps_buffer[4] == header[3] && (idx - 1) == 4) || (gps_buffer[5] == header[4] && (idx - 1) == 5)) {
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <GPS_RX+0x13c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b24      	cmp	r3, #36	; 0x24
 8002324:	d103      	bne.n	800232e <GPS_RX+0x92>
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <GPS_RX+0x138>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d035      	beq.n	800239a <GPS_RX+0xfe>
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <GPS_RX+0x13c>)
 8002330:	785a      	ldrb	r2, [r3, #1]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d103      	bne.n	8002342 <GPS_RX+0xa6>
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <GPS_RX+0x138>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d02b      	beq.n	800239a <GPS_RX+0xfe>
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <GPS_RX+0x13c>)
 8002344:	789a      	ldrb	r2, [r3, #2]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3301      	adds	r3, #1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d103      	bne.n	8002358 <GPS_RX+0xbc>
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <GPS_RX+0x138>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d020      	beq.n	800239a <GPS_RX+0xfe>
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <GPS_RX+0x13c>)
 800235a:	78da      	ldrb	r2, [r3, #3]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d103      	bne.n	800236e <GPS_RX+0xd2>
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <GPS_RX+0x138>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d015      	beq.n	800239a <GPS_RX+0xfe>
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <GPS_RX+0x13c>)
 8002370:	791a      	ldrb	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3303      	adds	r3, #3
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d103      	bne.n	8002384 <GPS_RX+0xe8>
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <GPS_RX+0x138>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d00a      	beq.n	800239a <GPS_RX+0xfe>
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <GPS_RX+0x13c>)
 8002386:	795a      	ldrb	r2, [r3, #5]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d109      	bne.n	80023a6 <GPS_RX+0x10a>
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <GPS_RX+0x138>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d105      	bne.n	80023a6 <GPS_RX+0x10a>
                cont++;
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <GPS_RX+0x144>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <GPS_RX+0x144>)
 80023a4:	701a      	strb	r2, [r3, #0]
            }
            if(idx == 6 && cont < 6) {
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <GPS_RX+0x138>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d109      	bne.n	80023c2 <GPS_RX+0x126>
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <GPS_RX+0x144>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d805      	bhi.n	80023c2 <GPS_RX+0x126>
                idx = 0;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <GPS_RX+0x138>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
                cont = 0;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <GPS_RX+0x144>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return ERROR; //Realmente no deberia ser un error pero por si las dudas, el define queda asi.
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	2000041c 	.word	0x2000041c
 80023d4:	200004de 	.word	0x200004de
 80023d8:	200004e0 	.word	0x200004e0
 80023dc:	20000424 	.word	0x20000424
 80023e0:	20000533 	.word	0x20000533

080023e4 <SIM_RX>:

uint8_t SIM_RX() {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
    static uint8_t idx;
    static uint8_t SIM800L_buffer[BUF_SIZE];
    static bool RialShitMoment = false;

    if((SIM800L_buffer[0] == 'A' && SIM800L_buffer[1] == 'T') || (SIM800L_buffer[0] == 'A' && SIM800L_buffer[1] == 'A' && SIM800L_buffer[2] == 'T')) {
 80023ea:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <SIM_RX+0xdc>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b41      	cmp	r3, #65	; 0x41
 80023f0:	d103      	bne.n	80023fa <SIM_RX+0x16>
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <SIM_RX+0xdc>)
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	2b54      	cmp	r3, #84	; 0x54
 80023f8:	d00b      	beq.n	8002412 <SIM_RX+0x2e>
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <SIM_RX+0xdc>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b41      	cmp	r3, #65	; 0x41
 8002400:	d10a      	bne.n	8002418 <SIM_RX+0x34>
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <SIM_RX+0xdc>)
 8002404:	785b      	ldrb	r3, [r3, #1]
 8002406:	2b41      	cmp	r3, #65	; 0x41
 8002408:	d106      	bne.n	8002418 <SIM_RX+0x34>
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <SIM_RX+0xdc>)
 800240c:	789b      	ldrb	r3, [r3, #2]
 800240e:	2b54      	cmp	r3, #84	; 0x54
 8002410:	d102      	bne.n	8002418 <SIM_RX+0x34>
        RialShitMoment = true;
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <SIM_RX+0xe0>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
    } 
    if(!(idx == 0 && (usart3_buffer[0] == 0x0A || usart3_buffer[0] == 0x0D))) {
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <SIM_RX+0xe4>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <SIM_RX+0x4c>
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <SIM_RX+0xe8>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b0a      	cmp	r3, #10
 8002426:	d046      	beq.n	80024b6 <SIM_RX+0xd2>
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <SIM_RX+0xe8>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b0d      	cmp	r3, #13
 800242e:	d042      	beq.n	80024b6 <SIM_RX+0xd2>
        if(usart3_buffer[0] == 0x0D) {
 8002430:	4b26      	ldr	r3, [pc, #152]	; (80024cc <SIM_RX+0xe8>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b0d      	cmp	r3, #13
 8002436:	d12f      	bne.n	8002498 <SIM_RX+0xb4>
            SIM800L_buffer[idx] = '\0';
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <SIM_RX+0xe4>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <SIM_RX+0xdc>)
 8002440:	2100      	movs	r1, #0
 8002442:	5499      	strb	r1, [r3, r2]

            for(uint8_t i = 0; i <= idx; i++) {
 8002444:	2300      	movs	r3, #0
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	e013      	b.n	8002472 <SIM_RX+0x8e>
                if(!RialShitMoment) SIM800L_response[i] = SIM800L_buffer[i];
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <SIM_RX+0xe0>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <SIM_RX+0x80>
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4918      	ldr	r1, [pc, #96]	; (80024c0 <SIM_RX+0xdc>)
 800245e:	5c89      	ldrb	r1, [r1, r2]
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <SIM_RX+0xec>)
 8002462:	54d1      	strb	r1, [r2, r3]
                SIM800L_buffer[i] = 0;
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <SIM_RX+0xdc>)
 8002468:	2100      	movs	r1, #0
 800246a:	54d1      	strb	r1, [r2, r3]
            for(uint8_t i = 0; i <= idx; i++) {
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	3301      	adds	r3, #1
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <SIM_RX+0xe4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	79fa      	ldrb	r2, [r7, #7]
 8002478:	429a      	cmp	r2, r3
 800247a:	d9e6      	bls.n	800244a <SIM_RX+0x66>
            }

            idx = 0;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <SIM_RX+0xe4>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]

            if(RialShitMoment) {
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <SIM_RX+0xe0>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <SIM_RX+0xb0>
                RialShitMoment = false;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <SIM_RX+0xe0>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
                return ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e010      	b.n	80024b6 <SIM_RX+0xd2>
            } else {
                return SUCCESS;
 8002494:	2300      	movs	r3, #0
 8002496:	e00e      	b.n	80024b6 <SIM_RX+0xd2>
            }
        } else {
            SIM800L_buffer[idx] = usart3_buffer[0];
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <SIM_RX+0xe4>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <SIM_RX+0xe8>)
 80024a0:	7819      	ldrb	r1, [r3, #0]
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <SIM_RX+0xdc>)
 80024a4:	5499      	strb	r1, [r3, r2]
            idx++;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <SIM_RX+0xe4>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <SIM_RX+0xe4>)
 80024b0:	701a      	strb	r2, [r3, #0]

            return ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e7ff      	b.n	80024b6 <SIM_RX+0xd2>
        }
    }
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	20000534 	.word	0x20000534
 80024c4:	20000598 	.word	0x20000598
 80024c8:	20000599 	.word	0x20000599
 80024cc:	20000420 	.word	0x20000420
 80024d0:	20000478 	.word	0x20000478

080024d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d4:	f7ff fe9c 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024da:	490c      	ldr	r1, [pc, #48]	; (800250c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024f0:	4c09      	ldr	r4, [pc, #36]	; (8002518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fe:	f003 f9ab 	bl	8005858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002502:	f7fe fb69 	bl	8000bd8 <main>
  bx lr
 8002506:	4770      	bx	lr
  ldr r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800250c:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002510:	0800b2f0 	.word	0x0800b2f0
  ldr r2, =_sbss
 8002514:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002518:	200005b0 	.word	0x200005b0

0800251c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC1_2_IRQHandler>
	...

08002520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_Init+0x28>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_Init+0x28>)
 800252a:	f043 0310 	orr.w	r3, r3, #16
 800252e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 f963 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002536:	2007      	movs	r0, #7
 8002538:	f000 f808 	bl	800254c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800253c:	f7ff fbd0 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x54>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x58>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002562:	fbb3 f3f1 	udiv	r3, r3, r1
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f97b 	bl	8002866 <HAL_SYSTICK_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00e      	b.n	8002598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d80a      	bhi.n	8002596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002580:	2200      	movs	r2, #0
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f000 f943 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <HAL_InitTick+0x5c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000006c 	.word	0x2000006c
 80025a4:	20000074 	.word	0x20000074
 80025a8:	20000070 	.word	0x20000070

080025ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <HAL_IncTick+0x20>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000074 	.word	0x20000074
 80025cc:	2000059c 	.word	0x2000059c

080025d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	2000059c 	.word	0x2000059c

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffe0 	bl	80025d0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000074 	.word	0x20000074

0800262c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_SuspendTick+0x18>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a03      	ldr	r2, [pc, #12]	; (8002644 <HAL_SuspendTick+0x18>)
 8002636:	f023 0302 	bic.w	r3, r3, #2
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_ResumeTick+0x18>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_ResumeTick+0x18>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	e000e010 	.word	0xe000e010

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4906      	ldr	r1, [pc, #24]	; (80026fc <__NVIC_EnableIRQ+0x34>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff90 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff2d 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff42 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff90 	bl	8002754 <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5f 	bl	8002700 <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff35 	bl	80026c8 <__NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffa2 	bl	80027b8 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e043      	b.n	800291e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_DMA_Init+0xa8>)
 800289e:	4413      	add	r3, r2
 80028a0:	4a22      	ldr	r2, [pc, #136]	; (800292c <HAL_DMA_Init+0xac>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_DMA_Init+0xb0>)
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	bffdfff8 	.word	0xbffdfff8
 800292c:	cccccccd 	.word	0xcccccccd
 8002930:	40020000 	.word	0x40020000

08002934 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_DMA_Start_IT+0x20>
 8002950:	2302      	movs	r3, #2
 8002952:	e04b      	b.n	80029ec <HAL_DMA_Start_IT+0xb8>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d13a      	bne.n	80029de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f9eb 	bl	8002d68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 020e 	orr.w	r2, r2, #14
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e00f      	b.n	80029cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0204 	bic.w	r2, r2, #4
 80029ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 020a 	orr.w	r2, r2, #10
 80029ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e005      	b.n	80029ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d008      	beq.n	8002a1e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e020      	b.n	8002a60 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 020e 	bic.w	r2, r2, #14
 8002a2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d005      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2204      	movs	r2, #4
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e051      	b.n	8002b34 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 020e 	bic.w	r2, r2, #14
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <HAL_DMA_Abort_IT+0xd4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d029      	beq.n	8002b0e <HAL_DMA_Abort_IT+0xa2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a21      	ldr	r2, [pc, #132]	; (8002b44 <HAL_DMA_Abort_IT+0xd8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_Abort_IT+0x9e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <HAL_DMA_Abort_IT+0xdc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01a      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x98>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <HAL_DMA_Abort_IT+0xe0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d012      	beq.n	8002afe <HAL_DMA_Abort_IT+0x92>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_DMA_Abort_IT+0xe4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00a      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x8c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_DMA_Abort_IT+0xe8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d102      	bne.n	8002af2 <HAL_DMA_Abort_IT+0x86>
 8002aec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002af0:	e00e      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af6:	e00b      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002afc:	e008      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b02:	e005      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b08:	e002      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	e000      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_DMA_Abort_IT+0xec>)
 8002b12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
    } 
  }
  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40020008 	.word	0x40020008
 8002b44:	4002001c 	.word	0x4002001c
 8002b48:	40020030 	.word	0x40020030
 8002b4c:	40020044 	.word	0x40020044
 8002b50:	40020058 	.word	0x40020058
 8002b54:	4002006c 	.word	0x4002006c
 8002b58:	40020000 	.word	0x40020000

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2204      	movs	r2, #4
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04f      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a66      	ldr	r2, [pc, #408]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d029      	beq.n	8002c0a <HAL_DMA_IRQHandler+0xae>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xaa>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xa4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a62      	ldr	r2, [pc, #392]	; (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x9e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x98>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5f      	ldr	r2, [pc, #380]	; (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <HAL_DMA_IRQHandler+0x92>
 8002be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bec:	e00e      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bf2:	e00b      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf8:	e008      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bfe:	e005      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c04:	e002      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c06:	2340      	movs	r3, #64	; 0x40
 8002c08:	e000      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	4a55      	ldr	r2, [pc, #340]	; (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002c0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8094 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c22:	e08e      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2202      	movs	r2, #2
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d056      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d051      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 020a 	bic.w	r2, r2, #10
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d029      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x166>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x162>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x15c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x156>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a32      	ldr	r2, [pc, #200]	; (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x150>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x14a>
 8002ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ca4:	e00e      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002caa:	e00b      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb0:	e008      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb6:	e005      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cbc:	e002      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002cc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d034      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ce0:	e02f      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
    }
  }
  return;
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
}
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40020008 	.word	0x40020008
 8002d50:	4002001c 	.word	0x4002001c
 8002d54:	40020030 	.word	0x40020030
 8002d58:	40020044 	.word	0x40020044
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	4002006c 	.word	0x4002006c
 8002d64:	40020000 	.word	0x40020000

08002d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d108      	bne.n	8002da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002da6:	e007      	b.n	8002db8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	; 0x2c
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e169      	b.n	80030ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8158 	bne.w	80030a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a9a      	ldr	r2, [pc, #616]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d05e      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e00:	4a98      	ldr	r2, [pc, #608]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d875      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e06:	4a98      	ldr	r2, [pc, #608]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d058      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e0c:	4a96      	ldr	r2, [pc, #600]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d86f      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e12:	4a96      	ldr	r2, [pc, #600]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d052      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e18:	4a94      	ldr	r2, [pc, #592]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d869      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e1e:	4a94      	ldr	r2, [pc, #592]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04c      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e24:	4a92      	ldr	r2, [pc, #584]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d863      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a92      	ldr	r2, [pc, #584]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d046      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e30:	4a90      	ldr	r2, [pc, #576]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d85d      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d82a      	bhi.n	8002e90 <HAL_GPIO_Init+0xcc>
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d859      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_GPIO_Init+0x80>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002eab 	.word	0x08002eab
 8002e50:	08002eed 	.word	0x08002eed
 8002e54:	08002ef3 	.word	0x08002ef3
 8002e58:	08002ef3 	.word	0x08002ef3
 8002e5c:	08002ef3 	.word	0x08002ef3
 8002e60:	08002ef3 	.word	0x08002ef3
 8002e64:	08002ef3 	.word	0x08002ef3
 8002e68:	08002ef3 	.word	0x08002ef3
 8002e6c:	08002ef3 	.word	0x08002ef3
 8002e70:	08002ef3 	.word	0x08002ef3
 8002e74:	08002ef3 	.word	0x08002ef3
 8002e78:	08002ef3 	.word	0x08002ef3
 8002e7c:	08002ef3 	.word	0x08002ef3
 8002e80:	08002ef3 	.word	0x08002ef3
 8002e84:	08002ef3 	.word	0x08002ef3
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	4a79      	ldr	r2, [pc, #484]	; (8003078 <HAL_GPIO_Init+0x2b4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e96:	e02c      	b.n	8002ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e029      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e024      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	623b      	str	r3, [r7, #32]
          break;
 8002eb2:	e01f      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e01a      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	623b      	str	r3, [r7, #32]
          break;
 8002eca:	e013      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	611a      	str	r2, [r3, #16]
          break;
 8002ede:	e009      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	615a      	str	r2, [r3, #20]
          break;
 8002eea:	e003      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          break;
 8002ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2bff      	cmp	r3, #255	; 0xff
 8002ef8:	d801      	bhi.n	8002efe <HAL_GPIO_Init+0x13a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_Init+0x13e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	d802      	bhi.n	8002f10 <HAL_GPIO_Init+0x14c>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x152>
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	3b08      	subs	r3, #8
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80b1 	beq.w	80030a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f44:	4b4d      	ldr	r3, [pc, #308]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a4c      	ldr	r2, [pc, #304]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6193      	str	r3, [r2, #24]
 8002f50:	4b4a      	ldr	r3, [pc, #296]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f5c:	4a48      	ldr	r2, [pc, #288]	; (8003080 <HAL_GPIO_Init+0x2bc>)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_GPIO_Init+0x2c0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x1ec>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <HAL_GPIO_Init+0x2c4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1e8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3e      	ldr	r2, [pc, #248]	; (800308c <HAL_GPIO_Init+0x2c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_GPIO_Init+0x2cc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1e0>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e004      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e002      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	f002 0203 	and.w	r2, r2, #3
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4093      	lsls	r3, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fc2:	492f      	ldr	r1, [pc, #188]	; (8003080 <HAL_GPIO_Init+0x2bc>)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	492c      	ldr	r1, [pc, #176]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4928      	ldr	r1, [pc, #160]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4922      	ldr	r1, [pc, #136]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	60cb      	str	r3, [r1, #12]
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	43db      	mvns	r3, r3
 800301a:	491e      	ldr	r1, [pc, #120]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800301c:	4013      	ands	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4918      	ldr	r1, [pc, #96]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	43db      	mvns	r3, r3
 8003042:	4914      	ldr	r1, [pc, #80]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003044:	4013      	ands	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e021      	b.n	80030a6 <HAL_GPIO_Init+0x2e2>
 8003062:	bf00      	nop
 8003064:	10320000 	.word	0x10320000
 8003068:	10310000 	.word	0x10310000
 800306c:	10220000 	.word	0x10220000
 8003070:	10210000 	.word	0x10210000
 8003074:	10120000 	.word	0x10120000
 8003078:	10110000 	.word	0x10110000
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	40010800 	.word	0x40010800
 8003088:	40010c00 	.word	0x40010c00
 800308c:	40011000 	.word	0x40011000
 8003090:	40011400 	.word	0x40011400
 8003094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_GPIO_Init+0x304>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	43db      	mvns	r3, r3
 80030a0:	4909      	ldr	r1, [pc, #36]	; (80030c8 <HAL_GPIO_Init+0x304>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	3301      	adds	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f ae8e 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	372c      	adds	r7, #44	; 0x2c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	420e0020 	.word	0x420e0020

080030e4 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_PWR_EnterSTANDBYMode+0x28>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_PWR_EnterSTANDBYMode+0x28>)
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80030fa:	f043 0304 	orr.w	r3, r3, #4
 80030fe:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003100:	bf30      	wfi
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e272      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8087 	beq.w	8003242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003134:	4b92      	ldr	r3, [pc, #584]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b04      	cmp	r3, #4
 800313e:	d00c      	beq.n	800315a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003140:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d112      	bne.n	8003172 <HAL_RCC_OscConfig+0x5e>
 800314c:	4b8c      	ldr	r3, [pc, #560]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d10b      	bne.n	8003172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315a:	4b89      	ldr	r3, [pc, #548]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d06c      	beq.n	8003240 <HAL_RCC_OscConfig+0x12c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d168      	bne.n	8003240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e24c      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x76>
 800317c:	4b80      	ldr	r3, [pc, #512]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a7f      	ldr	r2, [pc, #508]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e02e      	b.n	80031e8 <HAL_RCC_OscConfig+0xd4>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x98>
 8003192:	4b7b      	ldr	r3, [pc, #492]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7a      	ldr	r2, [pc, #488]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b78      	ldr	r3, [pc, #480]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a77      	ldr	r2, [pc, #476]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e01d      	b.n	80031e8 <HAL_RCC_OscConfig+0xd4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0xbc>
 80031b6:	4b72      	ldr	r3, [pc, #456]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a71      	ldr	r2, [pc, #452]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0xd4>
 80031d0:	4b6b      	ldr	r3, [pc, #428]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6a      	ldr	r2, [pc, #424]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b68      	ldr	r3, [pc, #416]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a67      	ldr	r2, [pc, #412]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7ff f9ee 	bl	80025d0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7ff f9ea 	bl	80025d0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e200      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0xe4>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7ff f9da 	bl	80025d0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7ff f9d6 	bl	80025d0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1ec      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x10c>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800324e:	4b4c      	ldr	r3, [pc, #304]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800325a:	4b49      	ldr	r3, [pc, #292]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b08      	cmp	r3, #8
 8003264:	d11c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x18c>
 8003266:	4b46      	ldr	r3, [pc, #280]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x176>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1c0      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4939      	ldr	r1, [pc, #228]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	e03a      	b.n	8003316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7ff f98f 	bl	80025d0 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b6:	f7ff f98b 	bl	80025d0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1a1      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4927      	ldr	r1, [pc, #156]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7ff f96e 	bl	80025d0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f8:	f7ff f96a 	bl	80025d0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e180      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d03a      	beq.n	8003398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d019      	beq.n	800335e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_RCC_OscConfig+0x274>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003330:	f7ff f94e 	bl	80025d0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003338:	f7ff f94a 	bl	80025d0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e160      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCC_OscConfig+0x26c>)
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003356:	2001      	movs	r0, #1
 8003358:	f000 face 	bl	80038f8 <RCC_Delay>
 800335c:	e01c      	b.n	8003398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_RCC_OscConfig+0x274>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7ff f934 	bl	80025d0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336a:	e00f      	b.n	800338c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336c:	f7ff f930 	bl	80025d0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d908      	bls.n	800338c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e146      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	42420000 	.word	0x42420000
 8003388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e9      	bne.n	800336c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a6 	beq.w	80034f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033aa:	4b8b      	ldr	r3, [pc, #556]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10d      	bne.n	80033d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4a87      	ldr	r2, [pc, #540]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c0:	61d3      	str	r3, [r2, #28]
 80033c2:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b82      	ldr	r3, [pc, #520]	; (80035dc <HAL_RCC_OscConfig+0x4c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b7f      	ldr	r3, [pc, #508]	; (80035dc <HAL_RCC_OscConfig+0x4c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7e      	ldr	r2, [pc, #504]	; (80035dc <HAL_RCC_OscConfig+0x4c8>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7ff f8f1 	bl	80025d0 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7ff f8ed 	bl	80025d0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b64      	cmp	r3, #100	; 0x64
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e103      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b75      	ldr	r3, [pc, #468]	; (80035dc <HAL_RCC_OscConfig+0x4c8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x312>
 8003418:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a6e      	ldr	r2, [pc, #440]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6213      	str	r3, [r2, #32]
 8003424:	e02d      	b.n	8003482 <HAL_RCC_OscConfig+0x36e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x334>
 800342e:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a69      	ldr	r2, [pc, #420]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6213      	str	r3, [r2, #32]
 8003446:	e01c      	b.n	8003482 <HAL_RCC_OscConfig+0x36e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b05      	cmp	r3, #5
 800344e:	d10c      	bne.n	800346a <HAL_RCC_OscConfig+0x356>
 8003450:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a60      	ldr	r2, [pc, #384]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6213      	str	r3, [r2, #32]
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0x36e>
 800346a:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a5a      	ldr	r2, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6213      	str	r3, [r2, #32]
 8003476:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4a57      	ldr	r2, [pc, #348]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d015      	beq.n	80034b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7ff f8a1 	bl	80025d0 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7ff f89d 	bl	80025d0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0b1      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RCC_OscConfig+0x37e>
 80034b4:	e014      	b.n	80034e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b6:	f7ff f88b 	bl	80025d0 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7ff f887 	bl	80025d0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e09b      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ee      	bne.n	80034be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d105      	bne.n	80034f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e6:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4a3b      	ldr	r2, [pc, #236]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8087 	beq.w	800360a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d061      	beq.n	80035cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d146      	bne.n	800359e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_RCC_OscConfig+0x4cc>)
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7ff f85b 	bl	80025d0 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351e:	f7ff f857 	bl	80025d0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e06d      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d108      	bne.n	8003558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4921      	ldr	r1, [pc, #132]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003558:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a19      	ldr	r1, [r3, #32]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	430b      	orrs	r3, r1
 800356a:	491b      	ldr	r1, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x4cc>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7ff f82b 	bl	80025d0 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357e:	f7ff f827 	bl	80025d0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e03d      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x46a>
 800359c:	e035      	b.n	800360a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7ff f814 	bl	80025d0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7ff f810 	bl	80025d0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e026      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x498>
 80035ca:	e01e      	b.n	800360a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e019      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
 80035e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_OscConfig+0x500>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000

08003618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0d0      	b.n	80037ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d910      	bls.n	800365c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b67      	ldr	r3, [pc, #412]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 0207 	bic.w	r2, r3, #7
 8003642:	4965      	ldr	r1, [pc, #404]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0b8      	b.n	80037ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003674:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800367e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800368c:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003698:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	494d      	ldr	r1, [pc, #308]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d040      	beq.n	8003738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d115      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e073      	b.n	80037ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e6:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06b      	b.n	80037ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b39      	ldr	r3, [pc, #228]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4936      	ldr	r1, [pc, #216]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003708:	f7fe ff62 	bl	80025d0 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e00a      	b.n	8003726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fe ff5e 	bl	80025d0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e053      	b.n	80037ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 020c 	and.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	429a      	cmp	r2, r3
 8003736:	d1eb      	bne.n	8003710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d210      	bcs.n	8003768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	4922      	ldr	r1, [pc, #136]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e032      	b.n	80037ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4916      	ldr	r1, [pc, #88]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	490e      	ldr	r1, [pc, #56]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037a6:	f000 f821 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	490a      	ldr	r1, [pc, #40]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80037b8:	5ccb      	ldrb	r3, [r1, r3]
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x1cc>)
 80037c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1d0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fec0 	bl	800254c <HAL_InitTick>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40022000 	.word	0x40022000
 80037dc:	40021000 	.word	0x40021000
 80037e0:	0800ad94 	.word	0x0800ad94
 80037e4:	2000006c 	.word	0x2000006c
 80037e8:	20000070 	.word	0x20000070

080037ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_RCC_GetSysClockFreq+0x94>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b04      	cmp	r3, #4
 8003814:	d002      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x30>
 8003816:	2b08      	cmp	r3, #8
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x36>
 800381a:	e027      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_GetSysClockFreq+0x98>)
 800381e:	613b      	str	r3, [r7, #16]
      break;
 8003820:	e027      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0c9b      	lsrs	r3, r3, #18
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800382c:	5cd3      	ldrb	r3, [r2, r3]
 800382e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_RCC_GetSysClockFreq+0x94>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0c5b      	lsrs	r3, r3, #17
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	4a11      	ldr	r2, [pc, #68]	; (800388c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <HAL_RCC_GetSysClockFreq+0x98>)
 800384e:	fb03 f202 	mul.w	r2, r3, r2
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e004      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	613b      	str	r3, [r7, #16]
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetSysClockFreq+0x98>)
 800386e:	613b      	str	r3, [r7, #16]
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	693b      	ldr	r3, [r7, #16]
}
 8003874:	4618      	mov	r0, r3
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	007a1200 	.word	0x007a1200
 8003888:	0800adac 	.word	0x0800adac
 800388c:	0800adbc 	.word	0x0800adbc
 8003890:	003d0900 	.word	0x003d0900

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b02      	ldr	r3, [pc, #8]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	2000006c 	.word	0x2000006c

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038ac:	f7ff fff2 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	0800ada4 	.word	0x0800ada4

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d4:	f7ff ffde 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	0adb      	lsrs	r3, r3, #11
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	0800ada4 	.word	0x0800ada4

080038f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <RCC_Delay+0x34>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <RCC_Delay+0x38>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0a5b      	lsrs	r3, r3, #9
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003914:	bf00      	nop
  }
  while (Delay --);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e5a      	subs	r2, r3, #1
 800391a:	60fa      	str	r2, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f9      	bne.n	8003914 <RCC_Delay+0x1c>
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	2000006c 	.word	0x2000006c
 8003930:	10624dd3 	.word	0x10624dd3

08003934 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d07d      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003954:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003960:	4b4c      	ldr	r3, [pc, #304]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4a4b      	ldr	r2, [pc, #300]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	61d3      	str	r3, [r2, #28]
 800396c:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d118      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003988:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a42      	ldr	r2, [pc, #264]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800398e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003992:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003994:	f7fe fe1c 	bl	80025d0 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	e008      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399c:	f7fe fe18 	bl	80025d0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e06d      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ba:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02e      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d027      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039d8:	4b2e      	ldr	r3, [pc, #184]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039e2:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e8:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039ee:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d014      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe fde7 	bl	80025d0 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fe fde3 	bl	80025d0 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e036      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ee      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4917      	ldr	r1, [pc, #92]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	490b      	ldr	r1, [pc, #44]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	4904      	ldr	r1, [pc, #16]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	42420440 	.word	0x42420440

08003aa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	f200 808a 	bhi.w	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d045      	beq.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d075      	beq.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ad6:	e082      	b.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ad8:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ade:	4b45      	ldr	r3, [pc, #276]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d07b      	beq.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	0c9b      	lsrs	r3, r3, #18
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	4a41      	ldr	r2, [pc, #260]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d015      	beq.n	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b02:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	0c5b      	lsrs	r3, r3, #17
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b1c:	4a38      	ldr	r2, [pc, #224]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e004      	b.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003b38:	4b2e      	ldr	r3, [pc, #184]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b44:	d102      	bne.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	61bb      	str	r3, [r7, #24]
      break;
 8003b4a:	e04a      	b.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	61bb      	str	r3, [r7, #24]
      break;
 8003b5a:	e042      	b.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003b5c:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6c:	d108      	bne.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e01f      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003b98:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e00f      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003baa:	d11c      	bne.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d016      	beq.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003bb8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003bbc:	61bb      	str	r3, [r7, #24]
      break;
 8003bbe:	e012      	b.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003bc0:	e011      	b.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003bc2:	f7ff fe85 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0b9b      	lsrs	r3, r3, #14
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	61bb      	str	r3, [r7, #24]
      break;
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003be6:	bf00      	nop
    }
  }
  return (frequency);
 8003be8:	69bb      	ldr	r3, [r7, #24]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	0800adc0 	.word	0x0800adc0
 8003bfc:	0800add0 	.word	0x0800add0
 8003c00:	007a1200 	.word	0x007a1200
 8003c04:	003d0900 	.word	0x003d0900
 8003c08:	aaaaaaab 	.word	0xaaaaaaab

08003c0c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07a      	b.n	8003d18 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7c5b      	ldrb	r3, [r3, #17]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe f886 	bl	8001d44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fb78 	bl	8004334 <HAL_RTC_WaitForSynchro>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e061      	b.n	8003d18 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fc31 	bl	80044bc <RTC_EnterInitMode>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2204      	movs	r2, #4
 8003c64:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e056      	b.n	8003d18 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0207 	bic.w	r2, r2, #7
 8003c78:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003c82:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <HAL_RTC_Init+0x114>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_RTC_Init+0x114>)
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RTC_Init+0x114>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	4921      	ldr	r1, [pc, #132]	; (8003d20 <HAL_RTC_Init+0x114>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e00e      	b.n	8003cd0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f7ff fef4 	bl	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cb8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e026      	b.n	8003d18 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	0c1a      	lsrs	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f002 020f 	and.w	r2, r2, #15
 8003cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fc0f 	bl	800450c <RTC_ExitInitMode>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00c      	b.n	8003d18 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40006c00 	.word	0x40006c00

08003d24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RTC_SetTime+0x20>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e080      	b.n	8003e4a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	7c1b      	ldrb	r3, [r3, #16]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_RTC_SetTime+0x30>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e07a      	b.n	8003e4a <HAL_RTC_SetTime+0x126>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003d70:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a5b      	subs	r3, r3, r1
 8003d80:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d82:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d88:	4413      	add	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e01e      	b.n	8003dcc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fbff 	bl	8004596 <RTC_Bcd2ToByte>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003da0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fbf4 	bl	8004596 <RTC_Bcd2ToByte>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003dba:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	789b      	ldrb	r3, [r3, #2]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fbe8 	bl	8004596 <RTC_Bcd2ToByte>
 8003dc6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003dc8:	4423      	add	r3, r4
 8003dca:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fb0d 	bl	80043ee <RTC_WriteTimeCounter>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e02f      	b.n	8003e4a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0205 	bic.w	r2, r2, #5
 8003df8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fb1e 	bl	800443c <RTC_ReadAlarmCounter>
 8003e00:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d018      	beq.n	8003e3c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d214      	bcs.n	8003e3c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003e18:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e1c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e1e:	6939      	ldr	r1, [r7, #16]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fb24 	bl	800446e <RTC_WriteAlarmCounter>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e006      	b.n	8003e4a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd90      	pop	{r4, r7, pc}
	...

08003e54 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RTC_GetTime+0x28>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b5      	b.n	8003fec <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0ac      	b.n	8003fec <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa7b 	bl	800438e <RTC_ReadTimeCounter>
 8003e98:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	4a55      	ldr	r2, [pc, #340]	; (8003ff4 <HAL_RTC_GetTime+0x1a0>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0adb      	lsrs	r3, r3, #11
 8003ea4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4b52      	ldr	r3, [pc, #328]	; (8003ff4 <HAL_RTC_GetTime+0x1a0>)
 8003eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8003eae:	0adb      	lsrs	r3, r3, #11
 8003eb0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	4a4f      	ldr	r2, [pc, #316]	; (8003ff8 <HAL_RTC_GetTime+0x1a4>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4a4a      	ldr	r2, [pc, #296]	; (8003ff4 <HAL_RTC_GetTime+0x1a0>)
 8003ecc:	fba2 1203 	umull	r1, r2, r2, r3
 8003ed0:	0ad2      	lsrs	r2, r2, #11
 8003ed2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003ed6:	fb01 f202 	mul.w	r2, r1, r2
 8003eda:	1a9a      	subs	r2, r3, r2
 8003edc:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <HAL_RTC_GetTime+0x1a4>)
 8003ede:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee2:	0959      	lsrs	r1, r3, #5
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a5b      	subs	r3, r3, r1
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	1ad1      	subs	r1, r2, r3
 8003eee:	b2ca      	uxtb	r2, r1
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b17      	cmp	r3, #23
 8003ef8:	d955      	bls.n	8003fa6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4a3f      	ldr	r2, [pc, #252]	; (8003ffc <HAL_RTC_GetTime+0x1a8>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003f06:	6939      	ldr	r1, [r7, #16]
 8003f08:	4b3c      	ldr	r3, [pc, #240]	; (8003ffc <HAL_RTC_GetTime+0x1a8>)
 8003f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0e:	091a      	lsrs	r2, r3, #4
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	1aca      	subs	r2, r1, r3
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fa8b 	bl	800443c <RTC_ReadAlarmCounter>
 8003f26:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d008      	beq.n	8003f42 <HAL_RTC_GetTime+0xee>
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d904      	bls.n	8003f42 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e002      	b.n	8003f48 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003f42:	f04f 33ff 	mov.w	r3, #4294967295
 8003f46:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4a2d      	ldr	r2, [pc, #180]	; (8004000 <HAL_RTC_GetTime+0x1ac>)
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003f56:	69b9      	ldr	r1, [r7, #24]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fa48 	bl	80043ee <RTC_WriteTimeCounter>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e041      	b.n	8003fec <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d00c      	beq.n	8003f8a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	4413      	add	r3, r2
 8003f76:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f78:	69f9      	ldr	r1, [r7, #28]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa77 	bl	800446e <RTC_WriteAlarmCounter>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e030      	b.n	8003fec <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f8a:	69f9      	ldr	r1, [r7, #28]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa6e 	bl	800446e <RTC_WriteAlarmCounter>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e027      	b.n	8003fec <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003f9c:	6979      	ldr	r1, [r7, #20]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fb16 	bl	80045d0 <RTC_DateUpdate>
 8003fa4:	e003      	b.n	8003fae <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 facf 	bl	800455c <RTC_ByteToBcd2>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fac6 	bl	800455c <RTC_ByteToBcd2>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	789b      	ldrb	r3, [r3, #2]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fabd 	bl	800455c <RTC_ByteToBcd2>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	91a2b3c5 	.word	0x91a2b3c5
 8003ff8:	88888889 	.word	0x88888889
 8003ffc:	aaaaaaab 	.word	0xaaaaaaab
 8004000:	00015180 	.word	0x00015180

08004004 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_RTC_SetDate+0x24>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e097      	b.n	800415c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	7c1b      	ldrb	r3, [r3, #16]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_RTC_SetDate+0x34>
 8004034:	2302      	movs	r3, #2
 8004036:	e091      	b.n	800415c <HAL_RTC_SetDate+0x158>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2202      	movs	r2, #2
 8004042:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	78da      	ldrb	r2, [r3, #3]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	785a      	ldrb	r2, [r3, #1]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	789a      	ldrb	r2, [r3, #2]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	739a      	strb	r2, [r3, #14]
 8004062:	e01a      	b.n	800409a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	78db      	ldrb	r3, [r3, #3]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fa94 	bl	8004596 <RTC_Bcd2ToByte>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fa8b 	bl	8004596 <RTC_Bcd2ToByte>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	789b      	ldrb	r3, [r3, #2]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fa82 	bl	8004596 <RTC_Bcd2ToByte>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	7bdb      	ldrb	r3, [r3, #15]
 800409e:	4618      	mov	r0, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	7b59      	ldrb	r1, [r3, #13]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	7b9b      	ldrb	r3, [r3, #14]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f000 fb6d 	bl	8004788 <RTC_WeekDayNum>
 80040ae:	4603      	mov	r3, r0
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	7b1a      	ldrb	r2, [r3, #12]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f965 	bl	800438e <RTC_ReadTimeCounter>
 80040c4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4a26      	ldr	r2, [pc, #152]	; (8004164 <HAL_RTC_SetDate+0x160>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0adb      	lsrs	r3, r3, #11
 80040d0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b18      	cmp	r3, #24
 80040d6:	d93a      	bls.n	800414e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4a23      	ldr	r2, [pc, #140]	; (8004168 <HAL_RTC_SetDate+0x164>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_RTC_SetDate+0x168>)
 80040e4:	fb02 f303 	mul.w	r3, r2, r3
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80040ee:	69f9      	ldr	r1, [r7, #28]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f97c 	bl	80043ee <RTC_WriteTimeCounter>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2204      	movs	r2, #4
 8004100:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e027      	b.n	800415c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f995 	bl	800443c <RTC_ReadAlarmCounter>
 8004112:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d018      	beq.n	800414e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	429a      	cmp	r2, r3
 8004122:	d214      	bcs.n	800414e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800412a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800412e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f99b 	bl	800446e <RTC_WriteAlarmCounter>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2204      	movs	r2, #4
 8004142:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e006      	b.n	800415c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	91a2b3c5 	.word	0x91a2b3c5
 8004168:	aaaaaaab 	.word	0xaaaaaaab
 800416c:	00015180 	.word	0x00015180

08004170 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b089      	sub	sp, #36	; 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	2100      	movs	r1, #0
 8004186:	460a      	mov	r2, r1
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	460a      	mov	r2, r1
 800418c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_RTC_SetAlarm_IT+0x2a>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e099      	b.n	80042d2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	7c1b      	ldrb	r3, [r3, #16]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_RTC_SetAlarm_IT+0x3a>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e093      	b.n	80042d2 <HAL_RTC_SetAlarm_IT+0x162>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2202      	movs	r2, #2
 80041b4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	2200      	movs	r2, #0
 80041bc:	4619      	mov	r1, r3
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff fe48 	bl	8003e54 <HAL_RTC_GetTime>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e081      	b.n	80042d2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80041ce:	7d3b      	ldrb	r3, [r7, #20]
 80041d0:	461a      	mov	r2, r3
 80041d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80041d6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80041da:	7d7b      	ldrb	r3, [r7, #21]
 80041dc:	4619      	mov	r1, r3
 80041de:	460b      	mov	r3, r1
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a5b      	subs	r3, r3, r1
 80041e4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80041e6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80041e8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80041ea:	4413      	add	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80041fe:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	4619      	mov	r1, r3
 8004208:	460b      	mov	r3, r1
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a5b      	subs	r3, r3, r1
 800420e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004210:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004216:	4413      	add	r3, r2
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	e01e      	b.n	800425a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f9b8 	bl	8004596 <RTC_Bcd2ToByte>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800422e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f9ad 	bl	8004596 <RTC_Bcd2ToByte>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004248:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	789b      	ldrb	r3, [r3, #2]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f9a1 	bl	8004596 <RTC_Bcd2ToByte>
 8004254:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004256:	4423      	add	r3, r4
 8004258:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	429a      	cmp	r2, r3
 8004260:	d205      	bcs.n	800426e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004268:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800426c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800426e:	69f9      	ldr	r1, [r7, #28]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f8fc 	bl	800446e <RTC_WriteAlarmCounter>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2204      	movs	r2, #4
 8004280:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e022      	b.n	80042d2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0202 	bic.w	r2, r2, #2
 800429a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0202 	orr.w	r2, r2, #2
 80042aa:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RTC_SetAlarm_IT+0x16c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <HAL_RTC_SetAlarm_IT+0x16c>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b6:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_RTC_SetAlarm_IT+0x16c>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <HAL_RTC_SetAlarm_IT+0x16c>)
 80042be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c2:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	; 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd90      	pop	{r4, r7, pc}
 80042da:	bf00      	nop
 80042dc:	40010400 	.word	0x40010400

080042e0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fc ff8d 	bl	8001224 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0202 	bic.w	r2, r2, #2
 8004318:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RTC_AlarmIRQHandler+0x50>)
 800431c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004320:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	745a      	strb	r2, [r3, #17]
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40010400 	.word	0x40010400

08004334 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e01d      	b.n	8004386 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800435a:	f7fe f939 	bl	80025d0 <HAL_GetTick>
 800435e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004360:	e009      	b.n	8004376 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004362:	f7fe f935 	bl	80025d0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004370:	d901      	bls.n	8004376 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e007      	b.n	8004386 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ee      	beq.n	8004362 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	827b      	strh	r3, [r7, #18]
 800439a:	2300      	movs	r3, #0
 800439c:	823b      	strh	r3, [r7, #16]
 800439e:	2300      	movs	r3, #0
 80043a0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80043be:	8a7a      	ldrh	r2, [r7, #18]
 80043c0:	8a3b      	ldrh	r3, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d008      	beq.n	80043d8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80043c6:	8a3b      	ldrh	r3, [r7, #16]
 80043c8:	041a      	lsls	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e004      	b.n	80043e2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80043d8:	8a7b      	ldrh	r3, [r7, #18]
 80043da:	041a      	lsls	r2, r3, #16
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80043e2:	697b      	ldr	r3, [r7, #20]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f85d 	bl	80044bc <RTC_EnterInitMode>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e011      	b.n	8004432 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	0c12      	lsrs	r2, r2, #16
 8004416:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b292      	uxth	r2, r2
 8004420:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f872 	bl	800450c <RTC_ExitInitMode>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	81fb      	strh	r3, [r7, #14]
 8004448:	2300      	movs	r3, #0
 800444a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	041a      	lsls	r2, r3, #16
 8004460:	89bb      	ldrh	r3, [r7, #12]
 8004462:	4313      	orrs	r3, r2
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f81d 	bl	80044bc <RTC_EnterInitMode>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e011      	b.n	80044b2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	0c12      	lsrs	r2, r2, #16
 8004496:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	b292      	uxth	r2, r2
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f832 	bl	800450c <RTC_ExitInitMode>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80044c8:	f7fe f882 	bl	80025d0 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80044ce:	e009      	b.n	80044e4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80044d0:	f7fe f87e 	bl	80025d0 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044de:	d901      	bls.n	80044e4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e00f      	b.n	8004504 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ee      	beq.n	80044d0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0210 	orr.w	r2, r2, #16
 8004500:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0210 	bic.w	r2, r2, #16
 8004526:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004528:	f7fe f852 	bl	80025d0 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800452e:	e009      	b.n	8004544 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004530:	f7fe f84e 	bl	80025d0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453e:	d901      	bls.n	8004544 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e007      	b.n	8004554 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ee      	beq.n	8004530 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800456a:	e005      	b.n	8004578 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	3b0a      	subs	r3, #10
 8004576:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	2b09      	cmp	r3, #9
 800457c:	d8f6      	bhi.n	800456c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	b2da      	uxtb	r2, r3
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	4313      	orrs	r3, r2
 800458a:	b2db      	uxtb	r3, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004596:	b480      	push	{r7}
 8004598:	b085      	sub	sp, #20
 800459a:	af00      	add	r7, sp, #0
 800459c:	4603      	mov	r3, r0
 800459e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	b2db      	uxtb	r3, r3
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7bdb      	ldrb	r3, [r3, #15]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7b5b      	ldrb	r3, [r3, #13]
 80045f4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7b9b      	ldrb	r3, [r3, #14]
 80045fa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	e06f      	b.n	80046e2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d011      	beq.n	800462c <RTC_DateUpdate+0x5c>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d00e      	beq.n	800462c <RTC_DateUpdate+0x5c>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b05      	cmp	r3, #5
 8004612:	d00b      	beq.n	800462c <RTC_DateUpdate+0x5c>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b07      	cmp	r3, #7
 8004618:	d008      	beq.n	800462c <RTC_DateUpdate+0x5c>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d005      	beq.n	800462c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b0a      	cmp	r3, #10
 8004624:	d002      	beq.n	800462c <RTC_DateUpdate+0x5c>
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d117      	bne.n	800465c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b1e      	cmp	r3, #30
 8004630:	d803      	bhi.n	800463a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3301      	adds	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004638:	e050      	b.n	80046dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d005      	beq.n	800464c <RTC_DateUpdate+0x7c>
        {
          month++;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	3301      	adds	r3, #1
 8004644:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004646:	2301      	movs	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800464a:	e047      	b.n	80046dc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800464c:	2301      	movs	r3, #1
 800464e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004650:	2301      	movs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
          year++;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3301      	adds	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800465a:	e03f      	b.n	80046dc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b04      	cmp	r3, #4
 8004660:	d008      	beq.n	8004674 <RTC_DateUpdate+0xa4>
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b06      	cmp	r3, #6
 8004666:	d005      	beq.n	8004674 <RTC_DateUpdate+0xa4>
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b09      	cmp	r3, #9
 800466c:	d002      	beq.n	8004674 <RTC_DateUpdate+0xa4>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b0b      	cmp	r3, #11
 8004672:	d10c      	bne.n	800468e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b1d      	cmp	r3, #29
 8004678:	d803      	bhi.n	8004682 <RTC_DateUpdate+0xb2>
      {
        day++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004680:	e02c      	b.n	80046dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004688:	2301      	movs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800468c:	e026      	b.n	80046dc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d123      	bne.n	80046dc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b1b      	cmp	r3, #27
 8004698:	d803      	bhi.n	80046a2 <RTC_DateUpdate+0xd2>
      {
        day++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e01c      	b.n	80046dc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b1c      	cmp	r3, #28
 80046a6:	d111      	bne.n	80046cc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f839 	bl	8004724 <RTC_IsLeapYear>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e00d      	b.n	80046dc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3301      	adds	r3, #1
 80046c4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80046c6:	2301      	movs	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e007      	b.n	80046dc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b1d      	cmp	r3, #29
 80046d0:	d104      	bne.n	80046dc <RTC_DateUpdate+0x10c>
      {
        month++;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3301      	adds	r3, #1
 80046d6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80046d8:	2301      	movs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3301      	adds	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d38b      	bcc.n	8004602 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	4619      	mov	r1, r3
 800470c:	6978      	ldr	r0, [r7, #20]
 800470e:	f000 f83b 	bl	8004788 <RTC_WeekDayNum>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	731a      	strb	r2, [r3, #12]
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	e01d      	b.n	800477a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	4a10      	ldr	r2, [pc, #64]	; (8004784 <RTC_IsLeapYear+0x60>)
 8004742:	fba2 1203 	umull	r1, r2, r2, r3
 8004746:	0952      	lsrs	r2, r2, #5
 8004748:	2164      	movs	r1, #100	; 0x64
 800474a:	fb01 f202 	mul.w	r2, r1, r2
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004756:	2301      	movs	r3, #1
 8004758:	e00f      	b.n	800477a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	4a09      	ldr	r2, [pc, #36]	; (8004784 <RTC_IsLeapYear+0x60>)
 800475e:	fba2 1203 	umull	r1, r2, r2, r3
 8004762:	09d2      	lsrs	r2, r2, #7
 8004764:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004768:	fb01 f202 	mul.w	r2, r1, r2
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004778:	2300      	movs	r3, #0
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr
 8004784:	51eb851f 	.word	0x51eb851f

08004788 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
 8004794:	4613      	mov	r3, r2
 8004796:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80047a6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d82d      	bhi.n	800480a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	4613      	mov	r3, r2
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	4a2c      	ldr	r2, [pc, #176]	; (800486c <RTC_WeekDayNum+0xe4>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	085a      	lsrs	r2, r3, #1
 80047c2:	78bb      	ldrb	r3, [r7, #2]
 80047c4:	441a      	add	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	441a      	add	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	4926      	ldr	r1, [pc, #152]	; (8004870 <RTC_WeekDayNum+0xe8>)
 80047d8:	fba1 1303 	umull	r1, r3, r1, r3
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	1ad2      	subs	r2, r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	4922      	ldr	r1, [pc, #136]	; (8004870 <RTC_WeekDayNum+0xe8>)
 80047e6:	fba1 1303 	umull	r1, r3, r1, r3
 80047ea:	09db      	lsrs	r3, r3, #7
 80047ec:	4413      	add	r3, r2
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	4b20      	ldr	r3, [pc, #128]	; (8004874 <RTC_WeekDayNum+0xec>)
 80047f2:	fba3 1302 	umull	r1, r3, r3, r2
 80047f6:	1ad1      	subs	r1, r2, r3
 80047f8:	0849      	lsrs	r1, r1, #1
 80047fa:	440b      	add	r3, r1
 80047fc:	0899      	lsrs	r1, r3, #2
 80047fe:	460b      	mov	r3, r1
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a5b      	subs	r3, r3, r1
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e029      	b.n	800485e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	4a15      	ldr	r2, [pc, #84]	; (800486c <RTC_WeekDayNum+0xe4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	085a      	lsrs	r2, r3, #1
 800481e:	78bb      	ldrb	r3, [r7, #2]
 8004820:	441a      	add	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	441a      	add	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	089b      	lsrs	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4910      	ldr	r1, [pc, #64]	; (8004870 <RTC_WeekDayNum+0xe8>)
 8004830:	fba1 1303 	umull	r1, r3, r1, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	490d      	ldr	r1, [pc, #52]	; (8004870 <RTC_WeekDayNum+0xe8>)
 800483c:	fba1 1303 	umull	r1, r3, r1, r3
 8004840:	09db      	lsrs	r3, r3, #7
 8004842:	4413      	add	r3, r2
 8004844:	1c9a      	adds	r2, r3, #2
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <RTC_WeekDayNum+0xec>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	1ad1      	subs	r1, r2, r3
 800484e:	0849      	lsrs	r1, r1, #1
 8004850:	440b      	add	r3, r1
 8004852:	0899      	lsrs	r1, r3, #2
 8004854:	460b      	mov	r3, r1
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	1a5b      	subs	r3, r3, r1
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	b2db      	uxtb	r3, r3
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	38e38e39 	.word	0x38e38e39
 8004870:	51eb851f 	.word	0x51eb851f
 8004874:	24924925 	.word	0x24924925

08004878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e042      	b.n	8004910 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fa7c 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 ff37 	bl	8005730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	; 0x30
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	d156      	bne.n	80049e0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_UART_Transmit_DMA+0x26>
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e04f      	b.n	80049e2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2221      	movs	r2, #33	; 0x21
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <HAL_UART_Transmit_DMA+0xd4>)
 8004968:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <HAL_UART_Transmit_DMA+0xd8>)
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <HAL_UART_Transmit_DMA+0xdc>)
 8004978:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	2200      	movs	r2, #0
 8004980:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3304      	adds	r3, #4
 8004996:	461a      	mov	r2, r3
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	f7fd ffcb 	bl	8002934 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	617b      	str	r3, [r7, #20]
   return(result);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049c8:	627a      	str	r2, [r7, #36]	; 0x24
 80049ca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6a39      	ldr	r1, [r7, #32]
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3730      	adds	r7, #48	; 0x30
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	08004fc7 	.word	0x08004fc7
 80049f0:	08005061 	.word	0x08005061
 80049f4:	080051e5 	.word	0x080051e5

080049f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d112      	bne.n	8004a38 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_UART_Receive_DMA+0x26>
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e00b      	b.n	8004a3a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fc22 	bl	8005278 <UART_Start_Receive_DMA>
 8004a34:	4603      	mov	r3, r0
 8004a36:	e000      	b.n	8004a3a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b0ba      	sub	sp, #232	; 0xe8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fd86 	bl	80055b4 <UART_Receive_IT>
      return;
 8004aa8:	e25b      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80de 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
 8004ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80d1 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
 8004afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d011      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f043 0208 	orr.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 81f2 	beq.w	8004f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fd11 	bl	80055b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_UART_IRQHandler+0x17a>
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d04f      	beq.n	8004c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fc1b 	bl	80053fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d041      	beq.n	8004c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1d9      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d013      	beq.n	8004c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	; (8004e24 <HAL_UART_IRQHandler+0x3e0>)
 8004c2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd ff1a 	bl	8002a6c <HAL_DMA_Abort_IT>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	e00e      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9a5 	bl	8004f9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e00a      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9a1 	bl	8004f9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	e006      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f99d 	bl	8004f9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004c6a:	e175      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	bf00      	nop
    return;
 8004c6e:	e173      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	f040 814f 	bne.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8148 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8141 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80b6 	beq.w	8004e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8145 	beq.w	8004f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	f080 813e 	bcs.w	8004f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ce6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	f000 8088 	beq.w	8004e04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d20:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1d9      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3314      	adds	r3, #20
 8004d46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e1      	bne.n	8004d40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004da0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004da2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004da6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e3      	bne.n	8004d7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004de6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004de8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e3      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fd fdf8 	bl	80029f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8c8 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e20:	e09c      	b.n	8004f5c <HAL_UART_IRQHandler+0x518>
 8004e22:	bf00      	nop
 8004e24:	080054bf 	.word	0x080054bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 808e 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8089 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e72:	647a      	str	r2, [r7, #68]	; 0x44
 8004e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	623b      	str	r3, [r7, #32]
   return(result);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e3      	bne.n	8004e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ef0:	61fa      	str	r2, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	617b      	str	r3, [r7, #20]
   return(result);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e3      	bne.n	8004ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f84d 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f16:	e023      	b.n	8004f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
 8004f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fad8 	bl	80054e6 <UART_Transmit_IT>
    return;
 8004f36:	e014      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fb17 	bl	8005584 <UART_EndTransmit_IT>
    return;
 8004f56:	e004      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f58:	bf00      	nop
 8004f5a:	e002      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f60:	bf00      	nop
  }
}
 8004f62:	37e8      	adds	r7, #232	; 0xe8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b090      	sub	sp, #64	; 0x40
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d137      	bne.n	8005052 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3314      	adds	r3, #20
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3314      	adds	r3, #20
 8005006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005008:	633a      	str	r2, [r7, #48]	; 0x30
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	60fb      	str	r3, [r7, #12]
   return(result);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800503c:	61fa      	str	r2, [r7, #28]
 800503e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	617b      	str	r3, [r7, #20]
   return(result);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005050:	e002      	b.n	8005058 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005052:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005054:	f7ff ff88 	bl	8004f68 <HAL_UART_TxCpltCallback>
}
 8005058:	bf00      	nop
 800505a:	3740      	adds	r7, #64	; 0x40
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff ff83 	bl	8004f7a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b09c      	sub	sp, #112	; 0x70
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d172      	bne.n	800517e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	2200      	movs	r2, #0
 800509c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800509e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050be:	65ba      	str	r2, [r7, #88]	; 0x58
 80050c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3314      	adds	r3, #20
 80050f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050f2:	647a      	str	r2, [r7, #68]	; 0x44
 80050f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3314      	adds	r3, #20
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	623b      	str	r3, [r7, #32]
   return(result);
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511c:	663b      	str	r3, [r7, #96]	; 0x60
 800511e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005126:	633a      	str	r2, [r7, #48]	; 0x30
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e5      	bne.n	8005106 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800513a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	2b01      	cmp	r3, #1
 8005148:	d119      	bne.n	800517e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	60fb      	str	r3, [r7, #12]
   return(result);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 0310 	bic.w	r3, r3, #16
 8005160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800516a:	61fa      	str	r2, [r7, #28]
 800516c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	69b9      	ldr	r1, [r7, #24]
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	617b      	str	r3, [r7, #20]
   return(result);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800517e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005180:	2200      	movs	r2, #0
 8005182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	2b01      	cmp	r3, #1
 800518a:	d106      	bne.n	800519a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800518c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005190:	4619      	mov	r1, r3
 8005192:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005194:	f7ff ff0c 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005198:	e002      	b.n	80051a0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800519a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800519c:	f7fd f83e 	bl	800221c <HAL_UART_RxCpltCallback>
}
 80051a0:	bf00      	nop
 80051a2:	3770      	adds	r7, #112	; 0x70
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d108      	bne.n	80051d6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4619      	mov	r1, r3
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff feee 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051d4:	e002      	b.n	80051dc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff fed8 	bl	8004f8c <HAL_UART_RxHalfCpltCallback>
}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b21      	cmp	r3, #33	; 0x21
 8005216:	d108      	bne.n	800522a <UART_DMAError+0x46>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2200      	movs	r2, #0
 8005222:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	f000 f8c1 	bl	80053ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b22      	cmp	r3, #34	; 0x22
 800524a:	d108      	bne.n	800525e <UART_DMAError+0x7a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005258:	68b8      	ldr	r0, [r7, #8]
 800525a:	f000 f8ce 	bl	80053fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f043 0210 	orr.w	r2, r3, #16
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	f7ff fe97 	bl	8004f9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b098      	sub	sp, #96	; 0x60
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2222      	movs	r2, #34	; 0x22
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	4a3e      	ldr	r2, [pc, #248]	; (80053a0 <UART_Start_Receive_DMA+0x128>)
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	4a3d      	ldr	r2, [pc, #244]	; (80053a4 <UART_Start_Receive_DMA+0x12c>)
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <UART_Start_Receive_DMA+0x130>)
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	2200      	movs	r2, #0
 80052be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80052c0:	f107 0308 	add.w	r3, r7, #8
 80052c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	f7fd fb2c 	bl	8002934 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d019      	beq.n	800532e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800530a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005310:	65bb      	str	r3, [r7, #88]	; 0x58
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	330c      	adds	r3, #12
 8005318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800531a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	657b      	str	r3, [r7, #84]	; 0x54
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800534e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e5      	bne.n	800532e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	617b      	str	r3, [r7, #20]
   return(result);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3314      	adds	r3, #20
 8005380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005382:	627a      	str	r2, [r7, #36]	; 0x24
 8005384:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6a39      	ldr	r1, [r7, #32]
 8005388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3760      	adds	r7, #96	; 0x60
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	0800507d 	.word	0x0800507d
 80053a4:	080051a9 	.word	0x080051a9
 80053a8:	080051e5 	.word	0x080051e5

080053ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b089      	sub	sp, #36	; 0x24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	61ba      	str	r2, [r7, #24]
 80053d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6979      	ldr	r1, [r7, #20]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	613b      	str	r3, [r7, #16]
   return(result);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e5      	bne.n	80053b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80053f0:	bf00      	nop
 80053f2:	3724      	adds	r7, #36	; 0x24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b095      	sub	sp, #84	; 0x54
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005422:	643a      	str	r2, [r7, #64]	; 0x40
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e5      	bne.n	8005402 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	61fb      	str	r3, [r7, #28]
   return(result);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	64bb      	str	r3, [r7, #72]	; 0x48
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3314      	adds	r3, #20
 8005454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e5      	bne.n	8005436 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	2b01      	cmp	r3, #1
 8005470:	d119      	bne.n	80054a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	60bb      	str	r3, [r7, #8]
   return(result);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f023 0310 	bic.w	r3, r3, #16
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005492:	61ba      	str	r2, [r7, #24]
 8005494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6979      	ldr	r1, [r7, #20]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	613b      	str	r3, [r7, #16]
   return(result);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054b4:	bf00      	nop
 80054b6:	3754      	adds	r7, #84	; 0x54
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fd60 	bl	8004f9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b21      	cmp	r3, #33	; 0x21
 80054f8:	d13e      	bne.n	8005578 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005502:	d114      	bne.n	800552e <UART_Transmit_IT+0x48>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d110      	bne.n	800552e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005520:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	1c9a      	adds	r2, r3, #2
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]
 800552c:	e008      	b.n	8005540 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6211      	str	r1, [r2, #32]
 8005538:	781a      	ldrb	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29b      	uxth	r3, r3
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4619      	mov	r1, r3
 800554e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10f      	bne.n	8005574 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005562:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005572:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fcdf 	bl	8004f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	; 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b22      	cmp	r3, #34	; 0x22
 80055c6:	f040 80ae 	bne.w	8005726 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d117      	bne.n	8005604 <UART_Receive_IT+0x50>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d113      	bne.n	8005604 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	1c9a      	adds	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	629a      	str	r2, [r3, #40]	; 0x28
 8005602:	e026      	b.n	8005652 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800560a:	2300      	movs	r3, #0
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005616:	d007      	beq.n	8005628 <UART_Receive_IT+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <UART_Receive_IT+0x82>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e008      	b.n	8005648 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005642:	b2da      	uxtb	r2, r3
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29b      	uxth	r3, r3
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4619      	mov	r1, r3
 8005660:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005662:	2b00      	cmp	r3, #0
 8005664:	d15d      	bne.n	8005722 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0220 	bic.w	r2, r2, #32
 8005674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695a      	ldr	r2, [r3, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d135      	bne.n	8005718 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	613b      	str	r3, [r7, #16]
   return(result);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f023 0310 	bic.w	r3, r3, #16
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d2:	623a      	str	r2, [r7, #32]
 80056d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	69f9      	ldr	r1, [r7, #28]
 80056d8:	6a3a      	ldr	r2, [r7, #32]
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e5      	bne.n	80056b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d10a      	bne.n	800570a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff fc4d 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
 8005716:	e002      	b.n	800571e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fc fd7f 	bl	800221c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e002      	b.n	8005728 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3730      	adds	r7, #48	; 0x30
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800576a:	f023 030c 	bic.w	r3, r3, #12
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	430b      	orrs	r3, r1
 8005776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <UART_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d103      	bne.n	80057a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005798:	f7fe f89a 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	e002      	b.n	80057a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7fe f882 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 80057a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009a      	lsls	r2, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	4a22      	ldr	r2, [pc, #136]	; (8005848 <UART_SetConfig+0x118>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	0119      	lsls	r1, r3, #4
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009a      	lsls	r2, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057dc:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <UART_SetConfig+0x118>)
 80057de:	fba3 0302 	umull	r0, r3, r3, r2
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	2064      	movs	r0, #100	; 0x64
 80057e6:	fb00 f303 	mul.w	r3, r0, r3
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	3332      	adds	r3, #50	; 0x32
 80057f0:	4a15      	ldr	r2, [pc, #84]	; (8005848 <UART_SetConfig+0x118>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057fc:	4419      	add	r1, r3
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009a      	lsls	r2, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	fbb2 f2f3 	udiv	r2, r2, r3
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <UART_SetConfig+0x118>)
 8005816:	fba3 0302 	umull	r0, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2064      	movs	r0, #100	; 0x64
 800581e:	fb00 f303 	mul.w	r3, r0, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a07      	ldr	r2, [pc, #28]	; (8005848 <UART_SetConfig+0x118>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	440a      	add	r2, r1
 800583a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40013800 	.word	0x40013800
 8005848:	51eb851f 	.word	0x51eb851f

0800584c <__errno>:
 800584c:	4b01      	ldr	r3, [pc, #4]	; (8005854 <__errno+0x8>)
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000078 	.word	0x20000078

08005858 <__libc_init_array>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	2600      	movs	r6, #0
 800585c:	4d0c      	ldr	r5, [pc, #48]	; (8005890 <__libc_init_array+0x38>)
 800585e:	4c0d      	ldr	r4, [pc, #52]	; (8005894 <__libc_init_array+0x3c>)
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	42a6      	cmp	r6, r4
 8005866:	d109      	bne.n	800587c <__libc_init_array+0x24>
 8005868:	f005 f918 	bl	800aa9c <_init>
 800586c:	2600      	movs	r6, #0
 800586e:	4d0a      	ldr	r5, [pc, #40]	; (8005898 <__libc_init_array+0x40>)
 8005870:	4c0a      	ldr	r4, [pc, #40]	; (800589c <__libc_init_array+0x44>)
 8005872:	1b64      	subs	r4, r4, r5
 8005874:	10a4      	asrs	r4, r4, #2
 8005876:	42a6      	cmp	r6, r4
 8005878:	d105      	bne.n	8005886 <__libc_init_array+0x2e>
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005880:	4798      	blx	r3
 8005882:	3601      	adds	r6, #1
 8005884:	e7ee      	b.n	8005864 <__libc_init_array+0xc>
 8005886:	f855 3b04 	ldr.w	r3, [r5], #4
 800588a:	4798      	blx	r3
 800588c:	3601      	adds	r6, #1
 800588e:	e7f2      	b.n	8005876 <__libc_init_array+0x1e>
 8005890:	0800b2e8 	.word	0x0800b2e8
 8005894:	0800b2e8 	.word	0x0800b2e8
 8005898:	0800b2e8 	.word	0x0800b2e8
 800589c:	0800b2ec 	.word	0x0800b2ec

080058a0 <memset>:
 80058a0:	4603      	mov	r3, r0
 80058a2:	4402      	add	r2, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <__cvt>:
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b6:	461f      	mov	r7, r3
 80058b8:	bfbb      	ittet	lt
 80058ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80058be:	461f      	movlt	r7, r3
 80058c0:	2300      	movge	r3, #0
 80058c2:	232d      	movlt	r3, #45	; 0x2d
 80058c4:	b088      	sub	sp, #32
 80058c6:	4614      	mov	r4, r2
 80058c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80058cc:	7013      	strb	r3, [r2, #0]
 80058ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80058d4:	f023 0820 	bic.w	r8, r3, #32
 80058d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058dc:	d005      	beq.n	80058ea <__cvt+0x3a>
 80058de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058e2:	d100      	bne.n	80058e6 <__cvt+0x36>
 80058e4:	3501      	adds	r5, #1
 80058e6:	2302      	movs	r3, #2
 80058e8:	e000      	b.n	80058ec <__cvt+0x3c>
 80058ea:	2303      	movs	r3, #3
 80058ec:	aa07      	add	r2, sp, #28
 80058ee:	9204      	str	r2, [sp, #16]
 80058f0:	aa06      	add	r2, sp, #24
 80058f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80058f6:	e9cd 3500 	strd	r3, r5, [sp]
 80058fa:	4622      	mov	r2, r4
 80058fc:	463b      	mov	r3, r7
 80058fe:	f001 fec3 	bl	8007688 <_dtoa_r>
 8005902:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005906:	4606      	mov	r6, r0
 8005908:	d102      	bne.n	8005910 <__cvt+0x60>
 800590a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800590c:	07db      	lsls	r3, r3, #31
 800590e:	d522      	bpl.n	8005956 <__cvt+0xa6>
 8005910:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005914:	eb06 0905 	add.w	r9, r6, r5
 8005918:	d110      	bne.n	800593c <__cvt+0x8c>
 800591a:	7833      	ldrb	r3, [r6, #0]
 800591c:	2b30      	cmp	r3, #48	; 0x30
 800591e:	d10a      	bne.n	8005936 <__cvt+0x86>
 8005920:	2200      	movs	r2, #0
 8005922:	2300      	movs	r3, #0
 8005924:	4620      	mov	r0, r4
 8005926:	4639      	mov	r1, r7
 8005928:	f7fb f83e 	bl	80009a8 <__aeabi_dcmpeq>
 800592c:	b918      	cbnz	r0, 8005936 <__cvt+0x86>
 800592e:	f1c5 0501 	rsb	r5, r5, #1
 8005932:	f8ca 5000 	str.w	r5, [sl]
 8005936:	f8da 3000 	ldr.w	r3, [sl]
 800593a:	4499      	add	r9, r3
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	4620      	mov	r0, r4
 8005942:	4639      	mov	r1, r7
 8005944:	f7fb f830 	bl	80009a8 <__aeabi_dcmpeq>
 8005948:	b108      	cbz	r0, 800594e <__cvt+0x9e>
 800594a:	f8cd 901c 	str.w	r9, [sp, #28]
 800594e:	2230      	movs	r2, #48	; 0x30
 8005950:	9b07      	ldr	r3, [sp, #28]
 8005952:	454b      	cmp	r3, r9
 8005954:	d307      	bcc.n	8005966 <__cvt+0xb6>
 8005956:	4630      	mov	r0, r6
 8005958:	9b07      	ldr	r3, [sp, #28]
 800595a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800595c:	1b9b      	subs	r3, r3, r6
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	b008      	add	sp, #32
 8005962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005966:	1c59      	adds	r1, r3, #1
 8005968:	9107      	str	r1, [sp, #28]
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e7f0      	b.n	8005950 <__cvt+0xa0>

0800596e <__exponent>:
 800596e:	4603      	mov	r3, r0
 8005970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005972:	2900      	cmp	r1, #0
 8005974:	f803 2b02 	strb.w	r2, [r3], #2
 8005978:	bfb6      	itet	lt
 800597a:	222d      	movlt	r2, #45	; 0x2d
 800597c:	222b      	movge	r2, #43	; 0x2b
 800597e:	4249      	neglt	r1, r1
 8005980:	2909      	cmp	r1, #9
 8005982:	7042      	strb	r2, [r0, #1]
 8005984:	dd2b      	ble.n	80059de <__exponent+0x70>
 8005986:	f10d 0407 	add.w	r4, sp, #7
 800598a:	46a4      	mov	ip, r4
 800598c:	270a      	movs	r7, #10
 800598e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005992:	460a      	mov	r2, r1
 8005994:	46a6      	mov	lr, r4
 8005996:	fb07 1516 	mls	r5, r7, r6, r1
 800599a:	2a63      	cmp	r2, #99	; 0x63
 800599c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80059a0:	4631      	mov	r1, r6
 80059a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80059a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059aa:	dcf0      	bgt.n	800598e <__exponent+0x20>
 80059ac:	3130      	adds	r1, #48	; 0x30
 80059ae:	f1ae 0502 	sub.w	r5, lr, #2
 80059b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059b6:	4629      	mov	r1, r5
 80059b8:	1c44      	adds	r4, r0, #1
 80059ba:	4561      	cmp	r1, ip
 80059bc:	d30a      	bcc.n	80059d4 <__exponent+0x66>
 80059be:	f10d 0209 	add.w	r2, sp, #9
 80059c2:	eba2 020e 	sub.w	r2, r2, lr
 80059c6:	4565      	cmp	r5, ip
 80059c8:	bf88      	it	hi
 80059ca:	2200      	movhi	r2, #0
 80059cc:	4413      	add	r3, r2
 80059ce:	1a18      	subs	r0, r3, r0
 80059d0:	b003      	add	sp, #12
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059dc:	e7ed      	b.n	80059ba <__exponent+0x4c>
 80059de:	2330      	movs	r3, #48	; 0x30
 80059e0:	3130      	adds	r1, #48	; 0x30
 80059e2:	7083      	strb	r3, [r0, #2]
 80059e4:	70c1      	strb	r1, [r0, #3]
 80059e6:	1d03      	adds	r3, r0, #4
 80059e8:	e7f1      	b.n	80059ce <__exponent+0x60>
	...

080059ec <_printf_float>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	b091      	sub	sp, #68	; 0x44
 80059f2:	460c      	mov	r4, r1
 80059f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80059f8:	4616      	mov	r6, r2
 80059fa:	461f      	mov	r7, r3
 80059fc:	4605      	mov	r5, r0
 80059fe:	f002 ffa9 	bl	8008954 <_localeconv_r>
 8005a02:	6803      	ldr	r3, [r0, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	9309      	str	r3, [sp, #36]	; 0x24
 8005a08:	f7fa fba2 	bl	8000150 <strlen>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930e      	str	r3, [sp, #56]	; 0x38
 8005a10:	f8d8 3000 	ldr.w	r3, [r8]
 8005a14:	900a      	str	r0, [sp, #40]	; 0x28
 8005a16:	3307      	adds	r3, #7
 8005a18:	f023 0307 	bic.w	r3, r3, #7
 8005a1c:	f103 0208 	add.w	r2, r3, #8
 8005a20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a24:	f8d4 b000 	ldr.w	fp, [r4]
 8005a28:	f8c8 2000 	str.w	r2, [r8]
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a34:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a38:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a42:	4640      	mov	r0, r8
 8005a44:	4b9c      	ldr	r3, [pc, #624]	; (8005cb8 <_printf_float+0x2cc>)
 8005a46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a48:	f7fa ffe0 	bl	8000a0c <__aeabi_dcmpun>
 8005a4c:	bb70      	cbnz	r0, 8005aac <_printf_float+0xc0>
 8005a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a52:	4640      	mov	r0, r8
 8005a54:	4b98      	ldr	r3, [pc, #608]	; (8005cb8 <_printf_float+0x2cc>)
 8005a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a58:	f7fa ffba 	bl	80009d0 <__aeabi_dcmple>
 8005a5c:	bb30      	cbnz	r0, 8005aac <_printf_float+0xc0>
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2300      	movs	r3, #0
 8005a62:	4640      	mov	r0, r8
 8005a64:	4651      	mov	r1, sl
 8005a66:	f7fa ffa9 	bl	80009bc <__aeabi_dcmplt>
 8005a6a:	b110      	cbz	r0, 8005a72 <_printf_float+0x86>
 8005a6c:	232d      	movs	r3, #45	; 0x2d
 8005a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a72:	4b92      	ldr	r3, [pc, #584]	; (8005cbc <_printf_float+0x2d0>)
 8005a74:	4892      	ldr	r0, [pc, #584]	; (8005cc0 <_printf_float+0x2d4>)
 8005a76:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a7a:	bf94      	ite	ls
 8005a7c:	4698      	movls	r8, r3
 8005a7e:	4680      	movhi	r8, r0
 8005a80:	2303      	movs	r3, #3
 8005a82:	f04f 0a00 	mov.w	sl, #0
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	f02b 0304 	bic.w	r3, fp, #4
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	4633      	mov	r3, r6
 8005a90:	4621      	mov	r1, r4
 8005a92:	4628      	mov	r0, r5
 8005a94:	9700      	str	r7, [sp, #0]
 8005a96:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a98:	f000 f9d4 	bl	8005e44 <_printf_common>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f040 8090 	bne.w	8005bc2 <_printf_float+0x1d6>
 8005aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa6:	b011      	add	sp, #68	; 0x44
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	4642      	mov	r2, r8
 8005aae:	4653      	mov	r3, sl
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	4651      	mov	r1, sl
 8005ab4:	f7fa ffaa 	bl	8000a0c <__aeabi_dcmpun>
 8005ab8:	b148      	cbz	r0, 8005ace <_printf_float+0xe2>
 8005aba:	f1ba 0f00 	cmp.w	sl, #0
 8005abe:	bfb8      	it	lt
 8005ac0:	232d      	movlt	r3, #45	; 0x2d
 8005ac2:	4880      	ldr	r0, [pc, #512]	; (8005cc4 <_printf_float+0x2d8>)
 8005ac4:	bfb8      	it	lt
 8005ac6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005aca:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <_printf_float+0x2dc>)
 8005acc:	e7d3      	b.n	8005a76 <_printf_float+0x8a>
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	d142      	bne.n	8005b5e <_printf_float+0x172>
 8005ad8:	2306      	movs	r3, #6
 8005ada:	6063      	str	r3, [r4, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	9206      	str	r2, [sp, #24]
 8005ae0:	aa0e      	add	r2, sp, #56	; 0x38
 8005ae2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005ae6:	aa0d      	add	r2, sp, #52	; 0x34
 8005ae8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005aec:	9203      	str	r2, [sp, #12]
 8005aee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005af2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	4642      	mov	r2, r8
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	4628      	mov	r0, r5
 8005b00:	4653      	mov	r3, sl
 8005b02:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b04:	f7ff fed4 	bl	80058b0 <__cvt>
 8005b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	2947      	cmp	r1, #71	; 0x47
 8005b0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b10:	d108      	bne.n	8005b24 <_printf_float+0x138>
 8005b12:	1cc8      	adds	r0, r1, #3
 8005b14:	db02      	blt.n	8005b1c <_printf_float+0x130>
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	dd40      	ble.n	8005b9e <_printf_float+0x1b2>
 8005b1c:	f1a9 0902 	sub.w	r9, r9, #2
 8005b20:	fa5f f989 	uxtb.w	r9, r9
 8005b24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b28:	d81f      	bhi.n	8005b6a <_printf_float+0x17e>
 8005b2a:	464a      	mov	r2, r9
 8005b2c:	3901      	subs	r1, #1
 8005b2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b32:	910d      	str	r1, [sp, #52]	; 0x34
 8005b34:	f7ff ff1b 	bl	800596e <__exponent>
 8005b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b3a:	4682      	mov	sl, r0
 8005b3c:	1813      	adds	r3, r2, r0
 8005b3e:	2a01      	cmp	r2, #1
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	dc02      	bgt.n	8005b4a <_printf_float+0x15e>
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	07d2      	lsls	r2, r2, #31
 8005b48:	d501      	bpl.n	8005b4e <_printf_float+0x162>
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d09b      	beq.n	8005a8e <_printf_float+0xa2>
 8005b56:	232d      	movs	r3, #45	; 0x2d
 8005b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b5c:	e797      	b.n	8005a8e <_printf_float+0xa2>
 8005b5e:	2947      	cmp	r1, #71	; 0x47
 8005b60:	d1bc      	bne.n	8005adc <_printf_float+0xf0>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1ba      	bne.n	8005adc <_printf_float+0xf0>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e7b7      	b.n	8005ada <_printf_float+0xee>
 8005b6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b6e:	d118      	bne.n	8005ba2 <_printf_float+0x1b6>
 8005b70:	2900      	cmp	r1, #0
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	dd0b      	ble.n	8005b8e <_printf_float+0x1a2>
 8005b76:	6121      	str	r1, [r4, #16]
 8005b78:	b913      	cbnz	r3, 8005b80 <_printf_float+0x194>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	07d0      	lsls	r0, r2, #31
 8005b7e:	d502      	bpl.n	8005b86 <_printf_float+0x19a>
 8005b80:	3301      	adds	r3, #1
 8005b82:	440b      	add	r3, r1
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	f04f 0a00 	mov.w	sl, #0
 8005b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b8c:	e7df      	b.n	8005b4e <_printf_float+0x162>
 8005b8e:	b913      	cbnz	r3, 8005b96 <_printf_float+0x1aa>
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	07d2      	lsls	r2, r2, #31
 8005b94:	d501      	bpl.n	8005b9a <_printf_float+0x1ae>
 8005b96:	3302      	adds	r3, #2
 8005b98:	e7f4      	b.n	8005b84 <_printf_float+0x198>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e7f2      	b.n	8005b84 <_printf_float+0x198>
 8005b9e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba4:	4299      	cmp	r1, r3
 8005ba6:	db05      	blt.n	8005bb4 <_printf_float+0x1c8>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	6121      	str	r1, [r4, #16]
 8005bac:	07d8      	lsls	r0, r3, #31
 8005bae:	d5ea      	bpl.n	8005b86 <_printf_float+0x19a>
 8005bb0:	1c4b      	adds	r3, r1, #1
 8005bb2:	e7e7      	b.n	8005b84 <_printf_float+0x198>
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	bfcc      	ite	gt
 8005bb8:	2201      	movgt	r2, #1
 8005bba:	f1c1 0202 	rsble	r2, r1, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	e7e0      	b.n	8005b84 <_printf_float+0x198>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	055a      	lsls	r2, r3, #21
 8005bc6:	d407      	bmi.n	8005bd8 <_printf_float+0x1ec>
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	4642      	mov	r2, r8
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d12b      	bne.n	8005c2e <_printf_float+0x242>
 8005bd6:	e764      	b.n	8005aa2 <_printf_float+0xb6>
 8005bd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005bdc:	f240 80dd 	bls.w	8005d9a <_printf_float+0x3ae>
 8005be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005be4:	2200      	movs	r2, #0
 8005be6:	2300      	movs	r3, #0
 8005be8:	f7fa fede 	bl	80009a8 <__aeabi_dcmpeq>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d033      	beq.n	8005c58 <_printf_float+0x26c>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	4a35      	ldr	r2, [pc, #212]	; (8005ccc <_printf_float+0x2e0>)
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f af51 	beq.w	8005aa2 <_printf_float+0xb6>
 8005c00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c04:	429a      	cmp	r2, r3
 8005c06:	db02      	blt.n	8005c0e <_printf_float+0x222>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	07d8      	lsls	r0, r3, #31
 8005c0c:	d50f      	bpl.n	8005c2e <_printf_float+0x242>
 8005c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f43f af42 	beq.w	8005aa2 <_printf_float+0xb6>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	f104 091a 	add.w	r9, r4, #26
 8005c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	4543      	cmp	r3, r8
 8005c2c:	dc09      	bgt.n	8005c42 <_printf_float+0x256>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	079b      	lsls	r3, r3, #30
 8005c32:	f100 8102 	bmi.w	8005e3a <_printf_float+0x44e>
 8005c36:	68e0      	ldr	r0, [r4, #12]
 8005c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c3a:	4298      	cmp	r0, r3
 8005c3c:	bfb8      	it	lt
 8005c3e:	4618      	movlt	r0, r3
 8005c40:	e731      	b.n	8005aa6 <_printf_float+0xba>
 8005c42:	2301      	movs	r3, #1
 8005c44:	464a      	mov	r2, r9
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f43f af28 	beq.w	8005aa2 <_printf_float+0xb6>
 8005c52:	f108 0801 	add.w	r8, r8, #1
 8005c56:	e7e6      	b.n	8005c26 <_printf_float+0x23a>
 8005c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	dc38      	bgt.n	8005cd0 <_printf_float+0x2e4>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <_printf_float+0x2e0>)
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f af1a 	beq.w	8005aa2 <_printf_float+0xb6>
 8005c6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c72:	4313      	orrs	r3, r2
 8005c74:	d102      	bne.n	8005c7c <_printf_float+0x290>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	07d9      	lsls	r1, r3, #31
 8005c7a:	d5d8      	bpl.n	8005c2e <_printf_float+0x242>
 8005c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	f43f af0b 	beq.w	8005aa2 <_printf_float+0xb6>
 8005c8c:	f04f 0900 	mov.w	r9, #0
 8005c90:	f104 0a1a 	add.w	sl, r4, #26
 8005c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c96:	425b      	negs	r3, r3
 8005c98:	454b      	cmp	r3, r9
 8005c9a:	dc01      	bgt.n	8005ca0 <_printf_float+0x2b4>
 8005c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c9e:	e794      	b.n	8005bca <_printf_float+0x1de>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f aef9 	beq.w	8005aa2 <_printf_float+0xb6>
 8005cb0:	f109 0901 	add.w	r9, r9, #1
 8005cb4:	e7ee      	b.n	8005c94 <_printf_float+0x2a8>
 8005cb6:	bf00      	nop
 8005cb8:	7fefffff 	.word	0x7fefffff
 8005cbc:	0800add8 	.word	0x0800add8
 8005cc0:	0800addc 	.word	0x0800addc
 8005cc4:	0800ade4 	.word	0x0800ade4
 8005cc8:	0800ade0 	.word	0x0800ade0
 8005ccc:	0800b271 	.word	0x0800b271
 8005cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	bfa8      	it	ge
 8005cd8:	461a      	movge	r2, r3
 8005cda:	2a00      	cmp	r2, #0
 8005cdc:	4691      	mov	r9, r2
 8005cde:	dc37      	bgt.n	8005d50 <_printf_float+0x364>
 8005ce0:	f04f 0b00 	mov.w	fp, #0
 8005ce4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ce8:	f104 021a 	add.w	r2, r4, #26
 8005cec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005cf0:	ebaa 0309 	sub.w	r3, sl, r9
 8005cf4:	455b      	cmp	r3, fp
 8005cf6:	dc33      	bgt.n	8005d60 <_printf_float+0x374>
 8005cf8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	db3b      	blt.n	8005d78 <_printf_float+0x38c>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	07da      	lsls	r2, r3, #31
 8005d04:	d438      	bmi.n	8005d78 <_printf_float+0x38c>
 8005d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d0a:	eba3 020a 	sub.w	r2, r3, sl
 8005d0e:	eba3 0901 	sub.w	r9, r3, r1
 8005d12:	4591      	cmp	r9, r2
 8005d14:	bfa8      	it	ge
 8005d16:	4691      	movge	r9, r2
 8005d18:	f1b9 0f00 	cmp.w	r9, #0
 8005d1c:	dc34      	bgt.n	8005d88 <_printf_float+0x39c>
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d26:	f104 0a1a 	add.w	sl, r4, #26
 8005d2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	eba3 0309 	sub.w	r3, r3, r9
 8005d34:	4543      	cmp	r3, r8
 8005d36:	f77f af7a 	ble.w	8005c2e <_printf_float+0x242>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f aeac 	beq.w	8005aa2 <_printf_float+0xb6>
 8005d4a:	f108 0801 	add.w	r8, r8, #1
 8005d4e:	e7ec      	b.n	8005d2a <_printf_float+0x33e>
 8005d50:	4613      	mov	r3, r2
 8005d52:	4631      	mov	r1, r6
 8005d54:	4642      	mov	r2, r8
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d1c0      	bne.n	8005ce0 <_printf_float+0x2f4>
 8005d5e:	e6a0      	b.n	8005aa2 <_printf_float+0xb6>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f43f ae99 	beq.w	8005aa2 <_printf_float+0xb6>
 8005d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d72:	f10b 0b01 	add.w	fp, fp, #1
 8005d76:	e7b9      	b.n	8005cec <_printf_float+0x300>
 8005d78:	4631      	mov	r1, r6
 8005d7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	d1bf      	bne.n	8005d06 <_printf_float+0x31a>
 8005d86:	e68c      	b.n	8005aa2 <_printf_float+0xb6>
 8005d88:	464b      	mov	r3, r9
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	eb08 020a 	add.w	r2, r8, sl
 8005d92:	47b8      	blx	r7
 8005d94:	3001      	adds	r0, #1
 8005d96:	d1c2      	bne.n	8005d1e <_printf_float+0x332>
 8005d98:	e683      	b.n	8005aa2 <_printf_float+0xb6>
 8005d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d9c:	2a01      	cmp	r2, #1
 8005d9e:	dc01      	bgt.n	8005da4 <_printf_float+0x3b8>
 8005da0:	07db      	lsls	r3, r3, #31
 8005da2:	d537      	bpl.n	8005e14 <_printf_float+0x428>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4642      	mov	r2, r8
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f ae77 	beq.w	8005aa2 <_printf_float+0xb6>
 8005db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f43f ae6f 	beq.w	8005aa2 <_printf_float+0xb6>
 8005dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f7fa fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8005dd0:	b9d8      	cbnz	r0, 8005e0a <_printf_float+0x41e>
 8005dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dd4:	f108 0201 	add.w	r2, r8, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	d10e      	bne.n	8005e02 <_printf_float+0x416>
 8005de4:	e65d      	b.n	8005aa2 <_printf_float+0xb6>
 8005de6:	2301      	movs	r3, #1
 8005de8:	464a      	mov	r2, r9
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f ae56 	beq.w	8005aa2 <_printf_float+0xb6>
 8005df6:	f108 0801 	add.w	r8, r8, #1
 8005dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4543      	cmp	r3, r8
 8005e00:	dcf1      	bgt.n	8005de6 <_printf_float+0x3fa>
 8005e02:	4653      	mov	r3, sl
 8005e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e08:	e6e0      	b.n	8005bcc <_printf_float+0x1e0>
 8005e0a:	f04f 0800 	mov.w	r8, #0
 8005e0e:	f104 091a 	add.w	r9, r4, #26
 8005e12:	e7f2      	b.n	8005dfa <_printf_float+0x40e>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4642      	mov	r2, r8
 8005e18:	e7df      	b.n	8005dda <_printf_float+0x3ee>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f ae3c 	beq.w	8005aa2 <_printf_float+0xb6>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e32:	1a5b      	subs	r3, r3, r1
 8005e34:	4543      	cmp	r3, r8
 8005e36:	dcf0      	bgt.n	8005e1a <_printf_float+0x42e>
 8005e38:	e6fd      	b.n	8005c36 <_printf_float+0x24a>
 8005e3a:	f04f 0800 	mov.w	r8, #0
 8005e3e:	f104 0919 	add.w	r9, r4, #25
 8005e42:	e7f4      	b.n	8005e2e <_printf_float+0x442>

08005e44 <_printf_common>:
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	4616      	mov	r6, r2
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	688a      	ldr	r2, [r1, #8]
 8005e4e:	690b      	ldr	r3, [r1, #16]
 8005e50:	4607      	mov	r7, r0
 8005e52:	4293      	cmp	r3, r2
 8005e54:	bfb8      	it	lt
 8005e56:	4613      	movlt	r3, r2
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e5e:	460c      	mov	r4, r1
 8005e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e64:	b10a      	cbz	r2, 8005e6a <_printf_common+0x26>
 8005e66:	3301      	adds	r3, #1
 8005e68:	6033      	str	r3, [r6, #0]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	0699      	lsls	r1, r3, #26
 8005e6e:	bf42      	ittt	mi
 8005e70:	6833      	ldrmi	r3, [r6, #0]
 8005e72:	3302      	addmi	r3, #2
 8005e74:	6033      	strmi	r3, [r6, #0]
 8005e76:	6825      	ldr	r5, [r4, #0]
 8005e78:	f015 0506 	ands.w	r5, r5, #6
 8005e7c:	d106      	bne.n	8005e8c <_printf_common+0x48>
 8005e7e:	f104 0a19 	add.w	sl, r4, #25
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	6832      	ldr	r2, [r6, #0]
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dc28      	bgt.n	8005ede <_printf_common+0x9a>
 8005e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e90:	1e13      	subs	r3, r2, #0
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	bf18      	it	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	0692      	lsls	r2, r2, #26
 8005e9a:	d42d      	bmi.n	8005ef8 <_printf_common+0xb4>
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea4:	47c0      	blx	r8
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d020      	beq.n	8005eec <_printf_common+0xa8>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	68e5      	ldr	r5, [r4, #12]
 8005eae:	f003 0306 	and.w	r3, r3, #6
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	bf18      	it	ne
 8005eb6:	2500      	movne	r5, #0
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	f04f 0600 	mov.w	r6, #0
 8005ebe:	68a3      	ldr	r3, [r4, #8]
 8005ec0:	bf08      	it	eq
 8005ec2:	1aad      	subeq	r5, r5, r2
 8005ec4:	6922      	ldr	r2, [r4, #16]
 8005ec6:	bf08      	it	eq
 8005ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	bfc4      	itt	gt
 8005ed0:	1a9b      	subgt	r3, r3, r2
 8005ed2:	18ed      	addgt	r5, r5, r3
 8005ed4:	341a      	adds	r4, #26
 8005ed6:	42b5      	cmp	r5, r6
 8005ed8:	d11a      	bne.n	8005f10 <_printf_common+0xcc>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e008      	b.n	8005ef0 <_printf_common+0xac>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	47c0      	blx	r8
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d103      	bne.n	8005ef4 <_printf_common+0xb0>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	e7c4      	b.n	8005e82 <_printf_common+0x3e>
 8005ef8:	2030      	movs	r0, #48	; 0x30
 8005efa:	18e1      	adds	r1, r4, r3
 8005efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f06:	4422      	add	r2, r4
 8005f08:	3302      	adds	r3, #2
 8005f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f0e:	e7c5      	b.n	8005e9c <_printf_common+0x58>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4622      	mov	r2, r4
 8005f14:	4649      	mov	r1, r9
 8005f16:	4638      	mov	r0, r7
 8005f18:	47c0      	blx	r8
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d0e6      	beq.n	8005eec <_printf_common+0xa8>
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7d9      	b.n	8005ed6 <_printf_common+0x92>
	...

08005f24 <_printf_i>:
 8005f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	7e0f      	ldrb	r7, [r1, #24]
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	2f78      	cmp	r7, #120	; 0x78
 8005f2e:	4680      	mov	r8, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	469a      	mov	sl, r3
 8005f34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f3a:	d807      	bhi.n	8005f4c <_printf_i+0x28>
 8005f3c:	2f62      	cmp	r7, #98	; 0x62
 8005f3e:	d80a      	bhi.n	8005f56 <_printf_i+0x32>
 8005f40:	2f00      	cmp	r7, #0
 8005f42:	f000 80d9 	beq.w	80060f8 <_printf_i+0x1d4>
 8005f46:	2f58      	cmp	r7, #88	; 0x58
 8005f48:	f000 80a4 	beq.w	8006094 <_printf_i+0x170>
 8005f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f54:	e03a      	b.n	8005fcc <_printf_i+0xa8>
 8005f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f5a:	2b15      	cmp	r3, #21
 8005f5c:	d8f6      	bhi.n	8005f4c <_printf_i+0x28>
 8005f5e:	a101      	add	r1, pc, #4	; (adr r1, 8005f64 <_printf_i+0x40>)
 8005f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005f4d 	.word	0x08005f4d
 8005f70:	08005f4d 	.word	0x08005f4d
 8005f74:	08005f4d 	.word	0x08005f4d
 8005f78:	08005f4d 	.word	0x08005f4d
 8005f7c:	08005fd1 	.word	0x08005fd1
 8005f80:	08005f4d 	.word	0x08005f4d
 8005f84:	08005f4d 	.word	0x08005f4d
 8005f88:	08005f4d 	.word	0x08005f4d
 8005f8c:	08005f4d 	.word	0x08005f4d
 8005f90:	080060df 	.word	0x080060df
 8005f94:	08006001 	.word	0x08006001
 8005f98:	080060c1 	.word	0x080060c1
 8005f9c:	08005f4d 	.word	0x08005f4d
 8005fa0:	08005f4d 	.word	0x08005f4d
 8005fa4:	08006101 	.word	0x08006101
 8005fa8:	08005f4d 	.word	0x08005f4d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f4d 	.word	0x08005f4d
 8005fb4:	08005f4d 	.word	0x08005f4d
 8005fb8:	080060c9 	.word	0x080060c9
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	602a      	str	r2, [r5, #0]
 8005fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0a4      	b.n	800611a <_printf_i+0x1f6>
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	6829      	ldr	r1, [r5, #0]
 8005fd4:	0606      	lsls	r6, r0, #24
 8005fd6:	f101 0304 	add.w	r3, r1, #4
 8005fda:	d50a      	bpl.n	8005ff2 <_printf_i+0xce>
 8005fdc:	680e      	ldr	r6, [r1, #0]
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	da03      	bge.n	8005fec <_printf_i+0xc8>
 8005fe4:	232d      	movs	r3, #45	; 0x2d
 8005fe6:	4276      	negs	r6, r6
 8005fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fec:	230a      	movs	r3, #10
 8005fee:	485e      	ldr	r0, [pc, #376]	; (8006168 <_printf_i+0x244>)
 8005ff0:	e019      	b.n	8006026 <_printf_i+0x102>
 8005ff2:	680e      	ldr	r6, [r1, #0]
 8005ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	bf18      	it	ne
 8005ffc:	b236      	sxthne	r6, r6
 8005ffe:	e7ef      	b.n	8005fe0 <_printf_i+0xbc>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	1d19      	adds	r1, r3, #4
 8006006:	6029      	str	r1, [r5, #0]
 8006008:	0601      	lsls	r1, r0, #24
 800600a:	d501      	bpl.n	8006010 <_printf_i+0xec>
 800600c:	681e      	ldr	r6, [r3, #0]
 800600e:	e002      	b.n	8006016 <_printf_i+0xf2>
 8006010:	0646      	lsls	r6, r0, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0xe8>
 8006014:	881e      	ldrh	r6, [r3, #0]
 8006016:	2f6f      	cmp	r7, #111	; 0x6f
 8006018:	bf0c      	ite	eq
 800601a:	2308      	moveq	r3, #8
 800601c:	230a      	movne	r3, #10
 800601e:	4852      	ldr	r0, [pc, #328]	; (8006168 <_printf_i+0x244>)
 8006020:	2100      	movs	r1, #0
 8006022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006026:	6865      	ldr	r5, [r4, #4]
 8006028:	2d00      	cmp	r5, #0
 800602a:	bfa8      	it	ge
 800602c:	6821      	ldrge	r1, [r4, #0]
 800602e:	60a5      	str	r5, [r4, #8]
 8006030:	bfa4      	itt	ge
 8006032:	f021 0104 	bicge.w	r1, r1, #4
 8006036:	6021      	strge	r1, [r4, #0]
 8006038:	b90e      	cbnz	r6, 800603e <_printf_i+0x11a>
 800603a:	2d00      	cmp	r5, #0
 800603c:	d04d      	beq.n	80060da <_printf_i+0x1b6>
 800603e:	4615      	mov	r5, r2
 8006040:	fbb6 f1f3 	udiv	r1, r6, r3
 8006044:	fb03 6711 	mls	r7, r3, r1, r6
 8006048:	5dc7      	ldrb	r7, [r0, r7]
 800604a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800604e:	4637      	mov	r7, r6
 8006050:	42bb      	cmp	r3, r7
 8006052:	460e      	mov	r6, r1
 8006054:	d9f4      	bls.n	8006040 <_printf_i+0x11c>
 8006056:	2b08      	cmp	r3, #8
 8006058:	d10b      	bne.n	8006072 <_printf_i+0x14e>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	07de      	lsls	r6, r3, #31
 800605e:	d508      	bpl.n	8006072 <_printf_i+0x14e>
 8006060:	6923      	ldr	r3, [r4, #16]
 8006062:	6861      	ldr	r1, [r4, #4]
 8006064:	4299      	cmp	r1, r3
 8006066:	bfde      	ittt	le
 8006068:	2330      	movle	r3, #48	; 0x30
 800606a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800606e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006072:	1b52      	subs	r2, r2, r5
 8006074:	6122      	str	r2, [r4, #16]
 8006076:	464b      	mov	r3, r9
 8006078:	4621      	mov	r1, r4
 800607a:	4640      	mov	r0, r8
 800607c:	f8cd a000 	str.w	sl, [sp]
 8006080:	aa03      	add	r2, sp, #12
 8006082:	f7ff fedf 	bl	8005e44 <_printf_common>
 8006086:	3001      	adds	r0, #1
 8006088:	d14c      	bne.n	8006124 <_printf_i+0x200>
 800608a:	f04f 30ff 	mov.w	r0, #4294967295
 800608e:	b004      	add	sp, #16
 8006090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006094:	4834      	ldr	r0, [pc, #208]	; (8006168 <_printf_i+0x244>)
 8006096:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800609a:	6829      	ldr	r1, [r5, #0]
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	f851 6b04 	ldr.w	r6, [r1], #4
 80060a2:	6029      	str	r1, [r5, #0]
 80060a4:	061d      	lsls	r5, r3, #24
 80060a6:	d514      	bpl.n	80060d2 <_printf_i+0x1ae>
 80060a8:	07df      	lsls	r7, r3, #31
 80060aa:	bf44      	itt	mi
 80060ac:	f043 0320 	orrmi.w	r3, r3, #32
 80060b0:	6023      	strmi	r3, [r4, #0]
 80060b2:	b91e      	cbnz	r6, 80060bc <_printf_i+0x198>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	f023 0320 	bic.w	r3, r3, #32
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	2310      	movs	r3, #16
 80060be:	e7af      	b.n	8006020 <_printf_i+0xfc>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	f043 0320 	orr.w	r3, r3, #32
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	2378      	movs	r3, #120	; 0x78
 80060ca:	4828      	ldr	r0, [pc, #160]	; (800616c <_printf_i+0x248>)
 80060cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060d0:	e7e3      	b.n	800609a <_printf_i+0x176>
 80060d2:	0659      	lsls	r1, r3, #25
 80060d4:	bf48      	it	mi
 80060d6:	b2b6      	uxthmi	r6, r6
 80060d8:	e7e6      	b.n	80060a8 <_printf_i+0x184>
 80060da:	4615      	mov	r5, r2
 80060dc:	e7bb      	b.n	8006056 <_printf_i+0x132>
 80060de:	682b      	ldr	r3, [r5, #0]
 80060e0:	6826      	ldr	r6, [r4, #0]
 80060e2:	1d18      	adds	r0, r3, #4
 80060e4:	6961      	ldr	r1, [r4, #20]
 80060e6:	6028      	str	r0, [r5, #0]
 80060e8:	0635      	lsls	r5, r6, #24
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	d501      	bpl.n	80060f2 <_printf_i+0x1ce>
 80060ee:	6019      	str	r1, [r3, #0]
 80060f0:	e002      	b.n	80060f8 <_printf_i+0x1d4>
 80060f2:	0670      	lsls	r0, r6, #25
 80060f4:	d5fb      	bpl.n	80060ee <_printf_i+0x1ca>
 80060f6:	8019      	strh	r1, [r3, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	4615      	mov	r5, r2
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	e7ba      	b.n	8006076 <_printf_i+0x152>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	2100      	movs	r1, #0
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	4628      	mov	r0, r5
 800610e:	f002 fc51 	bl	80089b4 <memchr>
 8006112:	b108      	cbz	r0, 8006118 <_printf_i+0x1f4>
 8006114:	1b40      	subs	r0, r0, r5
 8006116:	6060      	str	r0, [r4, #4]
 8006118:	6863      	ldr	r3, [r4, #4]
 800611a:	6123      	str	r3, [r4, #16]
 800611c:	2300      	movs	r3, #0
 800611e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006122:	e7a8      	b.n	8006076 <_printf_i+0x152>
 8006124:	462a      	mov	r2, r5
 8006126:	4649      	mov	r1, r9
 8006128:	4640      	mov	r0, r8
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	47d0      	blx	sl
 800612e:	3001      	adds	r0, #1
 8006130:	d0ab      	beq.n	800608a <_printf_i+0x166>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	079b      	lsls	r3, r3, #30
 8006136:	d413      	bmi.n	8006160 <_printf_i+0x23c>
 8006138:	68e0      	ldr	r0, [r4, #12]
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	4298      	cmp	r0, r3
 800613e:	bfb8      	it	lt
 8006140:	4618      	movlt	r0, r3
 8006142:	e7a4      	b.n	800608e <_printf_i+0x16a>
 8006144:	2301      	movs	r3, #1
 8006146:	4632      	mov	r2, r6
 8006148:	4649      	mov	r1, r9
 800614a:	4640      	mov	r0, r8
 800614c:	47d0      	blx	sl
 800614e:	3001      	adds	r0, #1
 8006150:	d09b      	beq.n	800608a <_printf_i+0x166>
 8006152:	3501      	adds	r5, #1
 8006154:	68e3      	ldr	r3, [r4, #12]
 8006156:	9903      	ldr	r1, [sp, #12]
 8006158:	1a5b      	subs	r3, r3, r1
 800615a:	42ab      	cmp	r3, r5
 800615c:	dcf2      	bgt.n	8006144 <_printf_i+0x220>
 800615e:	e7eb      	b.n	8006138 <_printf_i+0x214>
 8006160:	2500      	movs	r5, #0
 8006162:	f104 0619 	add.w	r6, r4, #25
 8006166:	e7f5      	b.n	8006154 <_printf_i+0x230>
 8006168:	0800ade8 	.word	0x0800ade8
 800616c:	0800adf9 	.word	0x0800adf9

08006170 <_scanf_float>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	b087      	sub	sp, #28
 8006176:	9303      	str	r3, [sp, #12]
 8006178:	688b      	ldr	r3, [r1, #8]
 800617a:	4617      	mov	r7, r2
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006182:	bf85      	ittet	hi
 8006184:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006188:	195b      	addhi	r3, r3, r5
 800618a:	2300      	movls	r3, #0
 800618c:	9302      	strhi	r3, [sp, #8]
 800618e:	bf88      	it	hi
 8006190:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006194:	468b      	mov	fp, r1
 8006196:	f04f 0500 	mov.w	r5, #0
 800619a:	bf8c      	ite	hi
 800619c:	608b      	strhi	r3, [r1, #8]
 800619e:	9302      	strls	r3, [sp, #8]
 80061a0:	680b      	ldr	r3, [r1, #0]
 80061a2:	4680      	mov	r8, r0
 80061a4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80061a8:	f84b 3b1c 	str.w	r3, [fp], #28
 80061ac:	460c      	mov	r4, r1
 80061ae:	465e      	mov	r6, fp
 80061b0:	46aa      	mov	sl, r5
 80061b2:	46a9      	mov	r9, r5
 80061b4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061b8:	9501      	str	r5, [sp, #4]
 80061ba:	68a2      	ldr	r2, [r4, #8]
 80061bc:	b152      	cbz	r2, 80061d4 <_scanf_float+0x64>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b4e      	cmp	r3, #78	; 0x4e
 80061c4:	d864      	bhi.n	8006290 <_scanf_float+0x120>
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d83c      	bhi.n	8006244 <_scanf_float+0xd4>
 80061ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80061ce:	b2c8      	uxtb	r0, r1
 80061d0:	280e      	cmp	r0, #14
 80061d2:	d93a      	bls.n	800624a <_scanf_float+0xda>
 80061d4:	f1b9 0f00 	cmp.w	r9, #0
 80061d8:	d003      	beq.n	80061e2 <_scanf_float+0x72>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061e6:	f1ba 0f01 	cmp.w	sl, #1
 80061ea:	f200 8113 	bhi.w	8006414 <_scanf_float+0x2a4>
 80061ee:	455e      	cmp	r6, fp
 80061f0:	f200 8105 	bhi.w	80063fe <_scanf_float+0x28e>
 80061f4:	2501      	movs	r5, #1
 80061f6:	4628      	mov	r0, r5
 80061f8:	b007      	add	sp, #28
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006202:	2a0d      	cmp	r2, #13
 8006204:	d8e6      	bhi.n	80061d4 <_scanf_float+0x64>
 8006206:	a101      	add	r1, pc, #4	; (adr r1, 800620c <_scanf_float+0x9c>)
 8006208:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800620c:	0800634b 	.word	0x0800634b
 8006210:	080061d5 	.word	0x080061d5
 8006214:	080061d5 	.word	0x080061d5
 8006218:	080061d5 	.word	0x080061d5
 800621c:	080063ab 	.word	0x080063ab
 8006220:	08006383 	.word	0x08006383
 8006224:	080061d5 	.word	0x080061d5
 8006228:	080061d5 	.word	0x080061d5
 800622c:	08006359 	.word	0x08006359
 8006230:	080061d5 	.word	0x080061d5
 8006234:	080061d5 	.word	0x080061d5
 8006238:	080061d5 	.word	0x080061d5
 800623c:	080061d5 	.word	0x080061d5
 8006240:	08006311 	.word	0x08006311
 8006244:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006248:	e7db      	b.n	8006202 <_scanf_float+0x92>
 800624a:	290e      	cmp	r1, #14
 800624c:	d8c2      	bhi.n	80061d4 <_scanf_float+0x64>
 800624e:	a001      	add	r0, pc, #4	; (adr r0, 8006254 <_scanf_float+0xe4>)
 8006250:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006254:	08006303 	.word	0x08006303
 8006258:	080061d5 	.word	0x080061d5
 800625c:	08006303 	.word	0x08006303
 8006260:	08006397 	.word	0x08006397
 8006264:	080061d5 	.word	0x080061d5
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062ed 	.word	0x080062ed
 8006270:	080062ed 	.word	0x080062ed
 8006274:	080062ed 	.word	0x080062ed
 8006278:	080062ed 	.word	0x080062ed
 800627c:	080062ed 	.word	0x080062ed
 8006280:	080062ed 	.word	0x080062ed
 8006284:	080062ed 	.word	0x080062ed
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080062ed 	.word	0x080062ed
 8006290:	2b6e      	cmp	r3, #110	; 0x6e
 8006292:	d809      	bhi.n	80062a8 <_scanf_float+0x138>
 8006294:	2b60      	cmp	r3, #96	; 0x60
 8006296:	d8b2      	bhi.n	80061fe <_scanf_float+0x8e>
 8006298:	2b54      	cmp	r3, #84	; 0x54
 800629a:	d077      	beq.n	800638c <_scanf_float+0x21c>
 800629c:	2b59      	cmp	r3, #89	; 0x59
 800629e:	d199      	bne.n	80061d4 <_scanf_float+0x64>
 80062a0:	2d07      	cmp	r5, #7
 80062a2:	d197      	bne.n	80061d4 <_scanf_float+0x64>
 80062a4:	2508      	movs	r5, #8
 80062a6:	e029      	b.n	80062fc <_scanf_float+0x18c>
 80062a8:	2b74      	cmp	r3, #116	; 0x74
 80062aa:	d06f      	beq.n	800638c <_scanf_float+0x21c>
 80062ac:	2b79      	cmp	r3, #121	; 0x79
 80062ae:	e7f6      	b.n	800629e <_scanf_float+0x12e>
 80062b0:	6821      	ldr	r1, [r4, #0]
 80062b2:	05c8      	lsls	r0, r1, #23
 80062b4:	d51a      	bpl.n	80062ec <_scanf_float+0x17c>
 80062b6:	9b02      	ldr	r3, [sp, #8]
 80062b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80062bc:	6021      	str	r1, [r4, #0]
 80062be:	f109 0901 	add.w	r9, r9, #1
 80062c2:	b11b      	cbz	r3, 80062cc <_scanf_float+0x15c>
 80062c4:	3b01      	subs	r3, #1
 80062c6:	3201      	adds	r2, #1
 80062c8:	9302      	str	r3, [sp, #8]
 80062ca:	60a2      	str	r2, [r4, #8]
 80062cc:	68a3      	ldr	r3, [r4, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	60a3      	str	r3, [r4, #8]
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	3301      	adds	r3, #1
 80062d6:	6123      	str	r3, [r4, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3b01      	subs	r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	607b      	str	r3, [r7, #4]
 80062e0:	f340 8084 	ble.w	80063ec <_scanf_float+0x27c>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	e766      	b.n	80061ba <_scanf_float+0x4a>
 80062ec:	eb1a 0f05 	cmn.w	sl, r5
 80062f0:	f47f af70 	bne.w	80061d4 <_scanf_float+0x64>
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	f806 3b01 	strb.w	r3, [r6], #1
 8006300:	e7e4      	b.n	80062cc <_scanf_float+0x15c>
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	0610      	lsls	r0, r2, #24
 8006306:	f57f af65 	bpl.w	80061d4 <_scanf_float+0x64>
 800630a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800630e:	e7f4      	b.n	80062fa <_scanf_float+0x18a>
 8006310:	f1ba 0f00 	cmp.w	sl, #0
 8006314:	d10e      	bne.n	8006334 <_scanf_float+0x1c4>
 8006316:	f1b9 0f00 	cmp.w	r9, #0
 800631a:	d10e      	bne.n	800633a <_scanf_float+0x1ca>
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006322:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006326:	d108      	bne.n	800633a <_scanf_float+0x1ca>
 8006328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800632c:	f04f 0a01 	mov.w	sl, #1
 8006330:	6022      	str	r2, [r4, #0]
 8006332:	e7e3      	b.n	80062fc <_scanf_float+0x18c>
 8006334:	f1ba 0f02 	cmp.w	sl, #2
 8006338:	d055      	beq.n	80063e6 <_scanf_float+0x276>
 800633a:	2d01      	cmp	r5, #1
 800633c:	d002      	beq.n	8006344 <_scanf_float+0x1d4>
 800633e:	2d04      	cmp	r5, #4
 8006340:	f47f af48 	bne.w	80061d4 <_scanf_float+0x64>
 8006344:	3501      	adds	r5, #1
 8006346:	b2ed      	uxtb	r5, r5
 8006348:	e7d8      	b.n	80062fc <_scanf_float+0x18c>
 800634a:	f1ba 0f01 	cmp.w	sl, #1
 800634e:	f47f af41 	bne.w	80061d4 <_scanf_float+0x64>
 8006352:	f04f 0a02 	mov.w	sl, #2
 8006356:	e7d1      	b.n	80062fc <_scanf_float+0x18c>
 8006358:	b97d      	cbnz	r5, 800637a <_scanf_float+0x20a>
 800635a:	f1b9 0f00 	cmp.w	r9, #0
 800635e:	f47f af3c 	bne.w	80061da <_scanf_float+0x6a>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006368:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800636c:	f47f af39 	bne.w	80061e2 <_scanf_float+0x72>
 8006370:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006374:	2501      	movs	r5, #1
 8006376:	6022      	str	r2, [r4, #0]
 8006378:	e7c0      	b.n	80062fc <_scanf_float+0x18c>
 800637a:	2d03      	cmp	r5, #3
 800637c:	d0e2      	beq.n	8006344 <_scanf_float+0x1d4>
 800637e:	2d05      	cmp	r5, #5
 8006380:	e7de      	b.n	8006340 <_scanf_float+0x1d0>
 8006382:	2d02      	cmp	r5, #2
 8006384:	f47f af26 	bne.w	80061d4 <_scanf_float+0x64>
 8006388:	2503      	movs	r5, #3
 800638a:	e7b7      	b.n	80062fc <_scanf_float+0x18c>
 800638c:	2d06      	cmp	r5, #6
 800638e:	f47f af21 	bne.w	80061d4 <_scanf_float+0x64>
 8006392:	2507      	movs	r5, #7
 8006394:	e7b2      	b.n	80062fc <_scanf_float+0x18c>
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	0591      	lsls	r1, r2, #22
 800639a:	f57f af1b 	bpl.w	80061d4 <_scanf_float+0x64>
 800639e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80063a2:	6022      	str	r2, [r4, #0]
 80063a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80063a8:	e7a8      	b.n	80062fc <_scanf_float+0x18c>
 80063aa:	6822      	ldr	r2, [r4, #0]
 80063ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80063b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80063b4:	d006      	beq.n	80063c4 <_scanf_float+0x254>
 80063b6:	0550      	lsls	r0, r2, #21
 80063b8:	f57f af0c 	bpl.w	80061d4 <_scanf_float+0x64>
 80063bc:	f1b9 0f00 	cmp.w	r9, #0
 80063c0:	f43f af0f 	beq.w	80061e2 <_scanf_float+0x72>
 80063c4:	0591      	lsls	r1, r2, #22
 80063c6:	bf58      	it	pl
 80063c8:	9901      	ldrpl	r1, [sp, #4]
 80063ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063ce:	bf58      	it	pl
 80063d0:	eba9 0101 	subpl.w	r1, r9, r1
 80063d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063d8:	f04f 0900 	mov.w	r9, #0
 80063dc:	bf58      	it	pl
 80063de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	e78a      	b.n	80062fc <_scanf_float+0x18c>
 80063e6:	f04f 0a03 	mov.w	sl, #3
 80063ea:	e787      	b.n	80062fc <_scanf_float+0x18c>
 80063ec:	4639      	mov	r1, r7
 80063ee:	4640      	mov	r0, r8
 80063f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063f4:	4798      	blx	r3
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f43f aedf 	beq.w	80061ba <_scanf_float+0x4a>
 80063fc:	e6ea      	b.n	80061d4 <_scanf_float+0x64>
 80063fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006402:	463a      	mov	r2, r7
 8006404:	4640      	mov	r0, r8
 8006406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800640a:	4798      	blx	r3
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	3b01      	subs	r3, #1
 8006410:	6123      	str	r3, [r4, #16]
 8006412:	e6ec      	b.n	80061ee <_scanf_float+0x7e>
 8006414:	1e6b      	subs	r3, r5, #1
 8006416:	2b06      	cmp	r3, #6
 8006418:	d825      	bhi.n	8006466 <_scanf_float+0x2f6>
 800641a:	2d02      	cmp	r5, #2
 800641c:	d836      	bhi.n	800648c <_scanf_float+0x31c>
 800641e:	455e      	cmp	r6, fp
 8006420:	f67f aee8 	bls.w	80061f4 <_scanf_float+0x84>
 8006424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006428:	463a      	mov	r2, r7
 800642a:	4640      	mov	r0, r8
 800642c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006430:	4798      	blx	r3
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	3b01      	subs	r3, #1
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	e7f1      	b.n	800641e <_scanf_float+0x2ae>
 800643a:	9802      	ldr	r0, [sp, #8]
 800643c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006440:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006444:	463a      	mov	r2, r7
 8006446:	9002      	str	r0, [sp, #8]
 8006448:	4640      	mov	r0, r8
 800644a:	4798      	blx	r3
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	3b01      	subs	r3, #1
 8006450:	6123      	str	r3, [r4, #16]
 8006452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006456:	fa5f fa8a 	uxtb.w	sl, sl
 800645a:	f1ba 0f02 	cmp.w	sl, #2
 800645e:	d1ec      	bne.n	800643a <_scanf_float+0x2ca>
 8006460:	3d03      	subs	r5, #3
 8006462:	b2ed      	uxtb	r5, r5
 8006464:	1b76      	subs	r6, r6, r5
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	05da      	lsls	r2, r3, #23
 800646a:	d52f      	bpl.n	80064cc <_scanf_float+0x35c>
 800646c:	055b      	lsls	r3, r3, #21
 800646e:	d510      	bpl.n	8006492 <_scanf_float+0x322>
 8006470:	455e      	cmp	r6, fp
 8006472:	f67f aebf 	bls.w	80061f4 <_scanf_float+0x84>
 8006476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800647a:	463a      	mov	r2, r7
 800647c:	4640      	mov	r0, r8
 800647e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006482:	4798      	blx	r3
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	3b01      	subs	r3, #1
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	e7f1      	b.n	8006470 <_scanf_float+0x300>
 800648c:	46aa      	mov	sl, r5
 800648e:	9602      	str	r6, [sp, #8]
 8006490:	e7df      	b.n	8006452 <_scanf_float+0x2e2>
 8006492:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	2965      	cmp	r1, #101	; 0x65
 800649a:	f103 33ff 	add.w	r3, r3, #4294967295
 800649e:	f106 35ff 	add.w	r5, r6, #4294967295
 80064a2:	6123      	str	r3, [r4, #16]
 80064a4:	d00c      	beq.n	80064c0 <_scanf_float+0x350>
 80064a6:	2945      	cmp	r1, #69	; 0x45
 80064a8:	d00a      	beq.n	80064c0 <_scanf_float+0x350>
 80064aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064ae:	463a      	mov	r2, r7
 80064b0:	4640      	mov	r0, r8
 80064b2:	4798      	blx	r3
 80064b4:	6923      	ldr	r3, [r4, #16]
 80064b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	1eb5      	subs	r5, r6, #2
 80064be:	6123      	str	r3, [r4, #16]
 80064c0:	463a      	mov	r2, r7
 80064c2:	4640      	mov	r0, r8
 80064c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064c8:	4798      	blx	r3
 80064ca:	462e      	mov	r6, r5
 80064cc:	6825      	ldr	r5, [r4, #0]
 80064ce:	f015 0510 	ands.w	r5, r5, #16
 80064d2:	d155      	bne.n	8006580 <_scanf_float+0x410>
 80064d4:	7035      	strb	r5, [r6, #0]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e0:	d11b      	bne.n	800651a <_scanf_float+0x3aa>
 80064e2:	9b01      	ldr	r3, [sp, #4]
 80064e4:	454b      	cmp	r3, r9
 80064e6:	eba3 0209 	sub.w	r2, r3, r9
 80064ea:	d123      	bne.n	8006534 <_scanf_float+0x3c4>
 80064ec:	2200      	movs	r2, #0
 80064ee:	4659      	mov	r1, fp
 80064f0:	4640      	mov	r0, r8
 80064f2:	f000 ff1d 	bl	8007330 <_strtod_r>
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	f012 0f02 	tst.w	r2, #2
 80064fe:	4606      	mov	r6, r0
 8006500:	460f      	mov	r7, r1
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	d021      	beq.n	800654a <_scanf_float+0x3da>
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	9903      	ldr	r1, [sp, #12]
 800650a:	600a      	str	r2, [r1, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	e9c3 6700 	strd	r6, r7, [r3]
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60e3      	str	r3, [r4, #12]
 8006518:	e66d      	b.n	80061f6 <_scanf_float+0x86>
 800651a:	9b04      	ldr	r3, [sp, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0e5      	beq.n	80064ec <_scanf_float+0x37c>
 8006520:	9905      	ldr	r1, [sp, #20]
 8006522:	230a      	movs	r3, #10
 8006524:	462a      	mov	r2, r5
 8006526:	4640      	mov	r0, r8
 8006528:	3101      	adds	r1, #1
 800652a:	f000 ffdf 	bl	80074ec <_strtol_r>
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	9e05      	ldr	r6, [sp, #20]
 8006532:	1ac2      	subs	r2, r0, r3
 8006534:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006538:	429e      	cmp	r6, r3
 800653a:	bf28      	it	cs
 800653c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006540:	4630      	mov	r0, r6
 8006542:	4910      	ldr	r1, [pc, #64]	; (8006584 <_scanf_float+0x414>)
 8006544:	f000 f826 	bl	8006594 <siprintf>
 8006548:	e7d0      	b.n	80064ec <_scanf_float+0x37c>
 800654a:	f012 0f04 	tst.w	r2, #4
 800654e:	f103 0204 	add.w	r2, r3, #4
 8006552:	d1d9      	bne.n	8006508 <_scanf_float+0x398>
 8006554:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006558:	f8cc 2000 	str.w	r2, [ip]
 800655c:	f8d3 8000 	ldr.w	r8, [r3]
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	f7fa fa52 	bl	8000a0c <__aeabi_dcmpun>
 8006568:	b128      	cbz	r0, 8006576 <_scanf_float+0x406>
 800656a:	4807      	ldr	r0, [pc, #28]	; (8006588 <_scanf_float+0x418>)
 800656c:	f000 f80e 	bl	800658c <nanf>
 8006570:	f8c8 0000 	str.w	r0, [r8]
 8006574:	e7cd      	b.n	8006512 <_scanf_float+0x3a2>
 8006576:	4630      	mov	r0, r6
 8006578:	4639      	mov	r1, r7
 800657a:	f7fa faa5 	bl	8000ac8 <__aeabi_d2f>
 800657e:	e7f7      	b.n	8006570 <_scanf_float+0x400>
 8006580:	2500      	movs	r5, #0
 8006582:	e638      	b.n	80061f6 <_scanf_float+0x86>
 8006584:	0800ae0a 	.word	0x0800ae0a
 8006588:	0800af0f 	.word	0x0800af0f

0800658c <nanf>:
 800658c:	4800      	ldr	r0, [pc, #0]	; (8006590 <nanf+0x4>)
 800658e:	4770      	bx	lr
 8006590:	7fc00000 	.word	0x7fc00000

08006594 <siprintf>:
 8006594:	b40e      	push	{r1, r2, r3}
 8006596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800659a:	b500      	push	{lr}
 800659c:	b09c      	sub	sp, #112	; 0x70
 800659e:	ab1d      	add	r3, sp, #116	; 0x74
 80065a0:	9002      	str	r0, [sp, #8]
 80065a2:	9006      	str	r0, [sp, #24]
 80065a4:	9107      	str	r1, [sp, #28]
 80065a6:	9104      	str	r1, [sp, #16]
 80065a8:	4808      	ldr	r0, [pc, #32]	; (80065cc <siprintf+0x38>)
 80065aa:	4909      	ldr	r1, [pc, #36]	; (80065d0 <siprintf+0x3c>)
 80065ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b0:	9105      	str	r1, [sp, #20]
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	a902      	add	r1, sp, #8
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	f003 f81c 	bl	80095f4 <_svfiprintf_r>
 80065bc:	2200      	movs	r2, #0
 80065be:	9b02      	ldr	r3, [sp, #8]
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	b01c      	add	sp, #112	; 0x70
 80065c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c8:	b003      	add	sp, #12
 80065ca:	4770      	bx	lr
 80065cc:	20000078 	.word	0x20000078
 80065d0:	ffff0208 	.word	0xffff0208

080065d4 <siscanf>:
 80065d4:	b40e      	push	{r1, r2, r3}
 80065d6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80065da:	b530      	push	{r4, r5, lr}
 80065dc:	b09c      	sub	sp, #112	; 0x70
 80065de:	ac1f      	add	r4, sp, #124	; 0x7c
 80065e0:	f854 5b04 	ldr.w	r5, [r4], #4
 80065e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80065e8:	9002      	str	r0, [sp, #8]
 80065ea:	9006      	str	r0, [sp, #24]
 80065ec:	f7f9 fdb0 	bl	8000150 <strlen>
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <siscanf+0x4c>)
 80065f2:	9003      	str	r0, [sp, #12]
 80065f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065f6:	2300      	movs	r3, #0
 80065f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065fa:	9314      	str	r3, [sp, #80]	; 0x50
 80065fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006600:	9007      	str	r0, [sp, #28]
 8006602:	4808      	ldr	r0, [pc, #32]	; (8006624 <siscanf+0x50>)
 8006604:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006608:	462a      	mov	r2, r5
 800660a:	4623      	mov	r3, r4
 800660c:	a902      	add	r1, sp, #8
 800660e:	6800      	ldr	r0, [r0, #0]
 8006610:	9401      	str	r4, [sp, #4]
 8006612:	f003 f949 	bl	80098a8 <__ssvfiscanf_r>
 8006616:	b01c      	add	sp, #112	; 0x70
 8006618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800661c:	b003      	add	sp, #12
 800661e:	4770      	bx	lr
 8006620:	0800664b 	.word	0x0800664b
 8006624:	20000078 	.word	0x20000078

08006628 <__sread>:
 8006628:	b510      	push	{r4, lr}
 800662a:	460c      	mov	r4, r1
 800662c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006630:	f003 fd5e 	bl	800a0f0 <_read_r>
 8006634:	2800      	cmp	r0, #0
 8006636:	bfab      	itete	ge
 8006638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800663a:	89a3      	ldrhlt	r3, [r4, #12]
 800663c:	181b      	addge	r3, r3, r0
 800663e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006642:	bfac      	ite	ge
 8006644:	6563      	strge	r3, [r4, #84]	; 0x54
 8006646:	81a3      	strhlt	r3, [r4, #12]
 8006648:	bd10      	pop	{r4, pc}

0800664a <__seofread>:
 800664a:	2000      	movs	r0, #0
 800664c:	4770      	bx	lr

0800664e <__swrite>:
 800664e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006652:	461f      	mov	r7, r3
 8006654:	898b      	ldrh	r3, [r1, #12]
 8006656:	4605      	mov	r5, r0
 8006658:	05db      	lsls	r3, r3, #23
 800665a:	460c      	mov	r4, r1
 800665c:	4616      	mov	r6, r2
 800665e:	d505      	bpl.n	800666c <__swrite+0x1e>
 8006660:	2302      	movs	r3, #2
 8006662:	2200      	movs	r2, #0
 8006664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006668:	f002 f978 	bl	800895c <_lseek_r>
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	4632      	mov	r2, r6
 8006670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006674:	81a3      	strh	r3, [r4, #12]
 8006676:	4628      	mov	r0, r5
 8006678:	463b      	mov	r3, r7
 800667a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800667e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006682:	f000 bf35 	b.w	80074f0 <_write_r>

08006686 <__sseek>:
 8006686:	b510      	push	{r4, lr}
 8006688:	460c      	mov	r4, r1
 800668a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668e:	f002 f965 	bl	800895c <_lseek_r>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	bf15      	itete	ne
 8006698:	6560      	strne	r0, [r4, #84]	; 0x54
 800669a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800669e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066a2:	81a3      	strheq	r3, [r4, #12]
 80066a4:	bf18      	it	ne
 80066a6:	81a3      	strhne	r3, [r4, #12]
 80066a8:	bd10      	pop	{r4, pc}

080066aa <__sclose>:
 80066aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ae:	f000 bf4f 	b.w	8007550 <_close_r>

080066b2 <strcpy>:
 80066b2:	4603      	mov	r3, r0
 80066b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b8:	f803 2b01 	strb.w	r2, [r3], #1
 80066bc:	2a00      	cmp	r2, #0
 80066be:	d1f9      	bne.n	80066b4 <strcpy+0x2>
 80066c0:	4770      	bx	lr

080066c2 <strpbrk>:
 80066c2:	b570      	push	{r4, r5, r6, lr}
 80066c4:	4603      	mov	r3, r0
 80066c6:	7800      	ldrb	r0, [r0, #0]
 80066c8:	b190      	cbz	r0, 80066f0 <strpbrk+0x2e>
 80066ca:	460c      	mov	r4, r1
 80066cc:	4618      	mov	r0, r3
 80066ce:	f813 5b01 	ldrb.w	r5, [r3], #1
 80066d2:	b14d      	cbz	r5, 80066e8 <strpbrk+0x26>
 80066d4:	460a      	mov	r2, r1
 80066d6:	e001      	b.n	80066dc <strpbrk+0x1a>
 80066d8:	42ae      	cmp	r6, r5
 80066da:	d009      	beq.n	80066f0 <strpbrk+0x2e>
 80066dc:	4614      	mov	r4, r2
 80066de:	f812 6b01 	ldrb.w	r6, [r2], #1
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	d1f8      	bne.n	80066d8 <strpbrk+0x16>
 80066e6:	e7f1      	b.n	80066cc <strpbrk+0xa>
 80066e8:	7823      	ldrb	r3, [r4, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf08      	it	eq
 80066ee:	2000      	moveq	r0, #0
 80066f0:	bd70      	pop	{r4, r5, r6, pc}

080066f2 <strstr>:
 80066f2:	780a      	ldrb	r2, [r1, #0]
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	b96a      	cbnz	r2, 8006714 <strstr+0x22>
 80066f8:	bd70      	pop	{r4, r5, r6, pc}
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d109      	bne.n	8006712 <strstr+0x20>
 80066fe:	460c      	mov	r4, r1
 8006700:	4605      	mov	r5, r0
 8006702:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f6      	beq.n	80066f8 <strstr+0x6>
 800670a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800670e:	429e      	cmp	r6, r3
 8006710:	d0f7      	beq.n	8006702 <strstr+0x10>
 8006712:	3001      	adds	r0, #1
 8006714:	7803      	ldrb	r3, [r0, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1ef      	bne.n	80066fa <strstr+0x8>
 800671a:	4618      	mov	r0, r3
 800671c:	e7ec      	b.n	80066f8 <strstr+0x6>

0800671e <sulp>:
 800671e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006722:	460f      	mov	r7, r1
 8006724:	4690      	mov	r8, r2
 8006726:	f002 fcd1 	bl	80090cc <__ulp>
 800672a:	4604      	mov	r4, r0
 800672c:	460d      	mov	r5, r1
 800672e:	f1b8 0f00 	cmp.w	r8, #0
 8006732:	d011      	beq.n	8006758 <sulp+0x3a>
 8006734:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006738:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800673c:	2b00      	cmp	r3, #0
 800673e:	dd0b      	ble.n	8006758 <sulp+0x3a>
 8006740:	2400      	movs	r4, #0
 8006742:	051b      	lsls	r3, r3, #20
 8006744:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006748:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800674c:	4622      	mov	r2, r4
 800674e:	462b      	mov	r3, r5
 8006750:	f7f9 fec2 	bl	80004d8 <__aeabi_dmul>
 8006754:	4604      	mov	r4, r0
 8006756:	460d      	mov	r5, r1
 8006758:	4620      	mov	r0, r4
 800675a:	4629      	mov	r1, r5
 800675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006760 <_strtod_l>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	469b      	mov	fp, r3
 8006766:	2300      	movs	r3, #0
 8006768:	b09f      	sub	sp, #124	; 0x7c
 800676a:	931a      	str	r3, [sp, #104]	; 0x68
 800676c:	4b9e      	ldr	r3, [pc, #632]	; (80069e8 <_strtod_l+0x288>)
 800676e:	4682      	mov	sl, r0
 8006770:	681f      	ldr	r7, [r3, #0]
 8006772:	460e      	mov	r6, r1
 8006774:	4638      	mov	r0, r7
 8006776:	9215      	str	r2, [sp, #84]	; 0x54
 8006778:	f7f9 fcea 	bl	8000150 <strlen>
 800677c:	f04f 0800 	mov.w	r8, #0
 8006780:	4604      	mov	r4, r0
 8006782:	f04f 0900 	mov.w	r9, #0
 8006786:	9619      	str	r6, [sp, #100]	; 0x64
 8006788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	2a2b      	cmp	r2, #43	; 0x2b
 800678e:	d04c      	beq.n	800682a <_strtod_l+0xca>
 8006790:	d83a      	bhi.n	8006808 <_strtod_l+0xa8>
 8006792:	2a0d      	cmp	r2, #13
 8006794:	d833      	bhi.n	80067fe <_strtod_l+0x9e>
 8006796:	2a08      	cmp	r2, #8
 8006798:	d833      	bhi.n	8006802 <_strtod_l+0xa2>
 800679a:	2a00      	cmp	r2, #0
 800679c:	d03d      	beq.n	800681a <_strtod_l+0xba>
 800679e:	2300      	movs	r3, #0
 80067a0:	930a      	str	r3, [sp, #40]	; 0x28
 80067a2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80067a4:	782b      	ldrb	r3, [r5, #0]
 80067a6:	2b30      	cmp	r3, #48	; 0x30
 80067a8:	f040 80aa 	bne.w	8006900 <_strtod_l+0x1a0>
 80067ac:	786b      	ldrb	r3, [r5, #1]
 80067ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067b2:	2b58      	cmp	r3, #88	; 0x58
 80067b4:	d166      	bne.n	8006884 <_strtod_l+0x124>
 80067b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b8:	4650      	mov	r0, sl
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	ab1a      	add	r3, sp, #104	; 0x68
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4a8a      	ldr	r2, [pc, #552]	; (80069ec <_strtod_l+0x28c>)
 80067c2:	f8cd b008 	str.w	fp, [sp, #8]
 80067c6:	ab1b      	add	r3, sp, #108	; 0x6c
 80067c8:	a919      	add	r1, sp, #100	; 0x64
 80067ca:	f001 fdc5 	bl	8008358 <__gethex>
 80067ce:	f010 0607 	ands.w	r6, r0, #7
 80067d2:	4604      	mov	r4, r0
 80067d4:	d005      	beq.n	80067e2 <_strtod_l+0x82>
 80067d6:	2e06      	cmp	r6, #6
 80067d8:	d129      	bne.n	800682e <_strtod_l+0xce>
 80067da:	2300      	movs	r3, #0
 80067dc:	3501      	adds	r5, #1
 80067de:	9519      	str	r5, [sp, #100]	; 0x64
 80067e0:	930a      	str	r3, [sp, #40]	; 0x28
 80067e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 858a 	bne.w	80072fe <_strtod_l+0xb9e>
 80067ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ec:	b1d3      	cbz	r3, 8006824 <_strtod_l+0xc4>
 80067ee:	4642      	mov	r2, r8
 80067f0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067f4:	4610      	mov	r0, r2
 80067f6:	4619      	mov	r1, r3
 80067f8:	b01f      	add	sp, #124	; 0x7c
 80067fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fe:	2a20      	cmp	r2, #32
 8006800:	d1cd      	bne.n	800679e <_strtod_l+0x3e>
 8006802:	3301      	adds	r3, #1
 8006804:	9319      	str	r3, [sp, #100]	; 0x64
 8006806:	e7bf      	b.n	8006788 <_strtod_l+0x28>
 8006808:	2a2d      	cmp	r2, #45	; 0x2d
 800680a:	d1c8      	bne.n	800679e <_strtod_l+0x3e>
 800680c:	2201      	movs	r2, #1
 800680e:	920a      	str	r2, [sp, #40]	; 0x28
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	9219      	str	r2, [sp, #100]	; 0x64
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1c3      	bne.n	80067a2 <_strtod_l+0x42>
 800681a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800681c:	9619      	str	r6, [sp, #100]	; 0x64
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 856b 	bne.w	80072fa <_strtod_l+0xb9a>
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	e7e4      	b.n	80067f4 <_strtod_l+0x94>
 800682a:	2200      	movs	r2, #0
 800682c:	e7ef      	b.n	800680e <_strtod_l+0xae>
 800682e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006830:	b13a      	cbz	r2, 8006842 <_strtod_l+0xe2>
 8006832:	2135      	movs	r1, #53	; 0x35
 8006834:	a81c      	add	r0, sp, #112	; 0x70
 8006836:	f002 fd4d 	bl	80092d4 <__copybits>
 800683a:	4650      	mov	r0, sl
 800683c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800683e:	f002 f915 	bl	8008a6c <_Bfree>
 8006842:	3e01      	subs	r6, #1
 8006844:	2e04      	cmp	r6, #4
 8006846:	d806      	bhi.n	8006856 <_strtod_l+0xf6>
 8006848:	e8df f006 	tbb	[pc, r6]
 800684c:	1714030a 	.word	0x1714030a
 8006850:	0a          	.byte	0x0a
 8006851:	00          	.byte	0x00
 8006852:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006856:	0721      	lsls	r1, r4, #28
 8006858:	d5c3      	bpl.n	80067e2 <_strtod_l+0x82>
 800685a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800685e:	e7c0      	b.n	80067e2 <_strtod_l+0x82>
 8006860:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006862:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006866:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800686a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800686e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006872:	e7f0      	b.n	8006856 <_strtod_l+0xf6>
 8006874:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80069f0 <_strtod_l+0x290>
 8006878:	e7ed      	b.n	8006856 <_strtod_l+0xf6>
 800687a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800687e:	f04f 38ff 	mov.w	r8, #4294967295
 8006882:	e7e8      	b.n	8006856 <_strtod_l+0xf6>
 8006884:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	9219      	str	r2, [sp, #100]	; 0x64
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b30      	cmp	r3, #48	; 0x30
 800688e:	d0f9      	beq.n	8006884 <_strtod_l+0x124>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0a6      	beq.n	80067e2 <_strtod_l+0x82>
 8006894:	2301      	movs	r3, #1
 8006896:	9307      	str	r3, [sp, #28]
 8006898:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800689a:	220a      	movs	r2, #10
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	2300      	movs	r3, #0
 80068a0:	469b      	mov	fp, r3
 80068a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80068a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80068a8:	7805      	ldrb	r5, [r0, #0]
 80068aa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80068ae:	b2d9      	uxtb	r1, r3
 80068b0:	2909      	cmp	r1, #9
 80068b2:	d927      	bls.n	8006904 <_strtod_l+0x1a4>
 80068b4:	4622      	mov	r2, r4
 80068b6:	4639      	mov	r1, r7
 80068b8:	f003 fc7a 	bl	800a1b0 <strncmp>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d033      	beq.n	8006928 <_strtod_l+0x1c8>
 80068c0:	2000      	movs	r0, #0
 80068c2:	462a      	mov	r2, r5
 80068c4:	465c      	mov	r4, fp
 80068c6:	4603      	mov	r3, r0
 80068c8:	9004      	str	r0, [sp, #16]
 80068ca:	2a65      	cmp	r2, #101	; 0x65
 80068cc:	d001      	beq.n	80068d2 <_strtod_l+0x172>
 80068ce:	2a45      	cmp	r2, #69	; 0x45
 80068d0:	d114      	bne.n	80068fc <_strtod_l+0x19c>
 80068d2:	b91c      	cbnz	r4, 80068dc <_strtod_l+0x17c>
 80068d4:	9a07      	ldr	r2, [sp, #28]
 80068d6:	4302      	orrs	r2, r0
 80068d8:	d09f      	beq.n	800681a <_strtod_l+0xba>
 80068da:	2400      	movs	r4, #0
 80068dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80068de:	1c72      	adds	r2, r6, #1
 80068e0:	9219      	str	r2, [sp, #100]	; 0x64
 80068e2:	7872      	ldrb	r2, [r6, #1]
 80068e4:	2a2b      	cmp	r2, #43	; 0x2b
 80068e6:	d079      	beq.n	80069dc <_strtod_l+0x27c>
 80068e8:	2a2d      	cmp	r2, #45	; 0x2d
 80068ea:	f000 8083 	beq.w	80069f4 <_strtod_l+0x294>
 80068ee:	2700      	movs	r7, #0
 80068f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80068f4:	2909      	cmp	r1, #9
 80068f6:	f240 8083 	bls.w	8006a00 <_strtod_l+0x2a0>
 80068fa:	9619      	str	r6, [sp, #100]	; 0x64
 80068fc:	2500      	movs	r5, #0
 80068fe:	e09f      	b.n	8006a40 <_strtod_l+0x2e0>
 8006900:	2300      	movs	r3, #0
 8006902:	e7c8      	b.n	8006896 <_strtod_l+0x136>
 8006904:	f1bb 0f08 	cmp.w	fp, #8
 8006908:	bfd5      	itete	le
 800690a:	9906      	ldrle	r1, [sp, #24]
 800690c:	9905      	ldrgt	r1, [sp, #20]
 800690e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006912:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006916:	f100 0001 	add.w	r0, r0, #1
 800691a:	bfd4      	ite	le
 800691c:	9306      	strle	r3, [sp, #24]
 800691e:	9305      	strgt	r3, [sp, #20]
 8006920:	f10b 0b01 	add.w	fp, fp, #1
 8006924:	9019      	str	r0, [sp, #100]	; 0x64
 8006926:	e7be      	b.n	80068a6 <_strtod_l+0x146>
 8006928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800692a:	191a      	adds	r2, r3, r4
 800692c:	9219      	str	r2, [sp, #100]	; 0x64
 800692e:	5d1a      	ldrb	r2, [r3, r4]
 8006930:	f1bb 0f00 	cmp.w	fp, #0
 8006934:	d036      	beq.n	80069a4 <_strtod_l+0x244>
 8006936:	465c      	mov	r4, fp
 8006938:	9004      	str	r0, [sp, #16]
 800693a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800693e:	2b09      	cmp	r3, #9
 8006940:	d912      	bls.n	8006968 <_strtod_l+0x208>
 8006942:	2301      	movs	r3, #1
 8006944:	e7c1      	b.n	80068ca <_strtod_l+0x16a>
 8006946:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006948:	3001      	adds	r0, #1
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	9219      	str	r2, [sp, #100]	; 0x64
 800694e:	785a      	ldrb	r2, [r3, #1]
 8006950:	2a30      	cmp	r2, #48	; 0x30
 8006952:	d0f8      	beq.n	8006946 <_strtod_l+0x1e6>
 8006954:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006958:	2b08      	cmp	r3, #8
 800695a:	f200 84d5 	bhi.w	8007308 <_strtod_l+0xba8>
 800695e:	9004      	str	r0, [sp, #16]
 8006960:	2000      	movs	r0, #0
 8006962:	4604      	mov	r4, r0
 8006964:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006966:	9308      	str	r3, [sp, #32]
 8006968:	3a30      	subs	r2, #48	; 0x30
 800696a:	f100 0301 	add.w	r3, r0, #1
 800696e:	d013      	beq.n	8006998 <_strtod_l+0x238>
 8006970:	9904      	ldr	r1, [sp, #16]
 8006972:	1905      	adds	r5, r0, r4
 8006974:	4419      	add	r1, r3
 8006976:	9104      	str	r1, [sp, #16]
 8006978:	4623      	mov	r3, r4
 800697a:	210a      	movs	r1, #10
 800697c:	42ab      	cmp	r3, r5
 800697e:	d113      	bne.n	80069a8 <_strtod_l+0x248>
 8006980:	1823      	adds	r3, r4, r0
 8006982:	2b08      	cmp	r3, #8
 8006984:	f104 0401 	add.w	r4, r4, #1
 8006988:	4404      	add	r4, r0
 800698a:	dc1b      	bgt.n	80069c4 <_strtod_l+0x264>
 800698c:	230a      	movs	r3, #10
 800698e:	9906      	ldr	r1, [sp, #24]
 8006990:	fb03 2301 	mla	r3, r3, r1, r2
 8006994:	9306      	str	r3, [sp, #24]
 8006996:	2300      	movs	r3, #0
 8006998:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800699a:	4618      	mov	r0, r3
 800699c:	1c51      	adds	r1, r2, #1
 800699e:	9119      	str	r1, [sp, #100]	; 0x64
 80069a0:	7852      	ldrb	r2, [r2, #1]
 80069a2:	e7ca      	b.n	800693a <_strtod_l+0x1da>
 80069a4:	4658      	mov	r0, fp
 80069a6:	e7d3      	b.n	8006950 <_strtod_l+0x1f0>
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	dc04      	bgt.n	80069b6 <_strtod_l+0x256>
 80069ac:	9f06      	ldr	r7, [sp, #24]
 80069ae:	434f      	muls	r7, r1
 80069b0:	9706      	str	r7, [sp, #24]
 80069b2:	3301      	adds	r3, #1
 80069b4:	e7e2      	b.n	800697c <_strtod_l+0x21c>
 80069b6:	1c5f      	adds	r7, r3, #1
 80069b8:	2f10      	cmp	r7, #16
 80069ba:	bfde      	ittt	le
 80069bc:	9f05      	ldrle	r7, [sp, #20]
 80069be:	434f      	mulle	r7, r1
 80069c0:	9705      	strle	r7, [sp, #20]
 80069c2:	e7f6      	b.n	80069b2 <_strtod_l+0x252>
 80069c4:	2c10      	cmp	r4, #16
 80069c6:	bfdf      	itttt	le
 80069c8:	230a      	movle	r3, #10
 80069ca:	9905      	ldrle	r1, [sp, #20]
 80069cc:	fb03 2301 	mlale	r3, r3, r1, r2
 80069d0:	9305      	strle	r3, [sp, #20]
 80069d2:	e7e0      	b.n	8006996 <_strtod_l+0x236>
 80069d4:	2300      	movs	r3, #0
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	2301      	movs	r3, #1
 80069da:	e77b      	b.n	80068d4 <_strtod_l+0x174>
 80069dc:	2700      	movs	r7, #0
 80069de:	1cb2      	adds	r2, r6, #2
 80069e0:	9219      	str	r2, [sp, #100]	; 0x64
 80069e2:	78b2      	ldrb	r2, [r6, #2]
 80069e4:	e784      	b.n	80068f0 <_strtod_l+0x190>
 80069e6:	bf00      	nop
 80069e8:	0800b0f0 	.word	0x0800b0f0
 80069ec:	0800ae10 	.word	0x0800ae10
 80069f0:	7ff00000 	.word	0x7ff00000
 80069f4:	2701      	movs	r7, #1
 80069f6:	e7f2      	b.n	80069de <_strtod_l+0x27e>
 80069f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80069fa:	1c51      	adds	r1, r2, #1
 80069fc:	9119      	str	r1, [sp, #100]	; 0x64
 80069fe:	7852      	ldrb	r2, [r2, #1]
 8006a00:	2a30      	cmp	r2, #48	; 0x30
 8006a02:	d0f9      	beq.n	80069f8 <_strtod_l+0x298>
 8006a04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a08:	2908      	cmp	r1, #8
 8006a0a:	f63f af77 	bhi.w	80068fc <_strtod_l+0x19c>
 8006a0e:	f04f 0e0a 	mov.w	lr, #10
 8006a12:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006a16:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a18:	9209      	str	r2, [sp, #36]	; 0x24
 8006a1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a1c:	1c51      	adds	r1, r2, #1
 8006a1e:	9119      	str	r1, [sp, #100]	; 0x64
 8006a20:	7852      	ldrb	r2, [r2, #1]
 8006a22:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006a26:	2d09      	cmp	r5, #9
 8006a28:	d935      	bls.n	8006a96 <_strtod_l+0x336>
 8006a2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006a2c:	1b49      	subs	r1, r1, r5
 8006a2e:	2908      	cmp	r1, #8
 8006a30:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006a34:	dc02      	bgt.n	8006a3c <_strtod_l+0x2dc>
 8006a36:	4565      	cmp	r5, ip
 8006a38:	bfa8      	it	ge
 8006a3a:	4665      	movge	r5, ip
 8006a3c:	b107      	cbz	r7, 8006a40 <_strtod_l+0x2e0>
 8006a3e:	426d      	negs	r5, r5
 8006a40:	2c00      	cmp	r4, #0
 8006a42:	d14c      	bne.n	8006ade <_strtod_l+0x37e>
 8006a44:	9907      	ldr	r1, [sp, #28]
 8006a46:	4301      	orrs	r1, r0
 8006a48:	f47f aecb 	bne.w	80067e2 <_strtod_l+0x82>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f47f aee4 	bne.w	800681a <_strtod_l+0xba>
 8006a52:	2a69      	cmp	r2, #105	; 0x69
 8006a54:	d026      	beq.n	8006aa4 <_strtod_l+0x344>
 8006a56:	dc23      	bgt.n	8006aa0 <_strtod_l+0x340>
 8006a58:	2a49      	cmp	r2, #73	; 0x49
 8006a5a:	d023      	beq.n	8006aa4 <_strtod_l+0x344>
 8006a5c:	2a4e      	cmp	r2, #78	; 0x4e
 8006a5e:	f47f aedc 	bne.w	800681a <_strtod_l+0xba>
 8006a62:	499d      	ldr	r1, [pc, #628]	; (8006cd8 <_strtod_l+0x578>)
 8006a64:	a819      	add	r0, sp, #100	; 0x64
 8006a66:	f001 fec5 	bl	80087f4 <__match>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	f43f aed5 	beq.w	800681a <_strtod_l+0xba>
 8006a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b28      	cmp	r3, #40	; 0x28
 8006a76:	d12c      	bne.n	8006ad2 <_strtod_l+0x372>
 8006a78:	4998      	ldr	r1, [pc, #608]	; (8006cdc <_strtod_l+0x57c>)
 8006a7a:	aa1c      	add	r2, sp, #112	; 0x70
 8006a7c:	a819      	add	r0, sp, #100	; 0x64
 8006a7e:	f001 fecd 	bl	800881c <__hexnan>
 8006a82:	2805      	cmp	r0, #5
 8006a84:	d125      	bne.n	8006ad2 <_strtod_l+0x372>
 8006a86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a88:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006a8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006a90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006a94:	e6a5      	b.n	80067e2 <_strtod_l+0x82>
 8006a96:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006a9a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006a9e:	e7bc      	b.n	8006a1a <_strtod_l+0x2ba>
 8006aa0:	2a6e      	cmp	r2, #110	; 0x6e
 8006aa2:	e7dc      	b.n	8006a5e <_strtod_l+0x2fe>
 8006aa4:	498e      	ldr	r1, [pc, #568]	; (8006ce0 <_strtod_l+0x580>)
 8006aa6:	a819      	add	r0, sp, #100	; 0x64
 8006aa8:	f001 fea4 	bl	80087f4 <__match>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f43f aeb4 	beq.w	800681a <_strtod_l+0xba>
 8006ab2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ab4:	498b      	ldr	r1, [pc, #556]	; (8006ce4 <_strtod_l+0x584>)
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	a819      	add	r0, sp, #100	; 0x64
 8006aba:	9319      	str	r3, [sp, #100]	; 0x64
 8006abc:	f001 fe9a 	bl	80087f4 <__match>
 8006ac0:	b910      	cbnz	r0, 8006ac8 <_strtod_l+0x368>
 8006ac2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	9319      	str	r3, [sp, #100]	; 0x64
 8006ac8:	f04f 0800 	mov.w	r8, #0
 8006acc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006ce8 <_strtod_l+0x588>
 8006ad0:	e687      	b.n	80067e2 <_strtod_l+0x82>
 8006ad2:	4886      	ldr	r0, [pc, #536]	; (8006cec <_strtod_l+0x58c>)
 8006ad4:	f003 fb1e 	bl	800a114 <nan>
 8006ad8:	4680      	mov	r8, r0
 8006ada:	4689      	mov	r9, r1
 8006adc:	e681      	b.n	80067e2 <_strtod_l+0x82>
 8006ade:	9b04      	ldr	r3, [sp, #16]
 8006ae0:	f1bb 0f00 	cmp.w	fp, #0
 8006ae4:	bf08      	it	eq
 8006ae6:	46a3      	moveq	fp, r4
 8006ae8:	1aeb      	subs	r3, r5, r3
 8006aea:	2c10      	cmp	r4, #16
 8006aec:	9806      	ldr	r0, [sp, #24]
 8006aee:	4626      	mov	r6, r4
 8006af0:	9307      	str	r3, [sp, #28]
 8006af2:	bfa8      	it	ge
 8006af4:	2610      	movge	r6, #16
 8006af6:	f7f9 fc75 	bl	80003e4 <__aeabi_ui2d>
 8006afa:	2c09      	cmp	r4, #9
 8006afc:	4680      	mov	r8, r0
 8006afe:	4689      	mov	r9, r1
 8006b00:	dd13      	ble.n	8006b2a <_strtod_l+0x3ca>
 8006b02:	4b7b      	ldr	r3, [pc, #492]	; (8006cf0 <_strtod_l+0x590>)
 8006b04:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b08:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	4680      	mov	r8, r0
 8006b12:	9805      	ldr	r0, [sp, #20]
 8006b14:	4689      	mov	r9, r1
 8006b16:	f7f9 fc65 	bl	80003e4 <__aeabi_ui2d>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4649      	mov	r1, r9
 8006b22:	f7f9 fb23 	bl	800016c <__adddf3>
 8006b26:	4680      	mov	r8, r0
 8006b28:	4689      	mov	r9, r1
 8006b2a:	2c0f      	cmp	r4, #15
 8006b2c:	dc36      	bgt.n	8006b9c <_strtod_l+0x43c>
 8006b2e:	9b07      	ldr	r3, [sp, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f43f ae56 	beq.w	80067e2 <_strtod_l+0x82>
 8006b36:	dd22      	ble.n	8006b7e <_strtod_l+0x41e>
 8006b38:	2b16      	cmp	r3, #22
 8006b3a:	dc09      	bgt.n	8006b50 <_strtod_l+0x3f0>
 8006b3c:	496c      	ldr	r1, [pc, #432]	; (8006cf0 <_strtod_l+0x590>)
 8006b3e:	4642      	mov	r2, r8
 8006b40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b44:	464b      	mov	r3, r9
 8006b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b4a:	f7f9 fcc5 	bl	80004d8 <__aeabi_dmul>
 8006b4e:	e7c3      	b.n	8006ad8 <_strtod_l+0x378>
 8006b50:	9a07      	ldr	r2, [sp, #28]
 8006b52:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006b56:	4293      	cmp	r3, r2
 8006b58:	db20      	blt.n	8006b9c <_strtod_l+0x43c>
 8006b5a:	4d65      	ldr	r5, [pc, #404]	; (8006cf0 <_strtod_l+0x590>)
 8006b5c:	f1c4 040f 	rsb	r4, r4, #15
 8006b60:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006b64:	4642      	mov	r2, r8
 8006b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	f7f9 fcb4 	bl	80004d8 <__aeabi_dmul>
 8006b70:	9b07      	ldr	r3, [sp, #28]
 8006b72:	1b1c      	subs	r4, r3, r4
 8006b74:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b7c:	e7e5      	b.n	8006b4a <_strtod_l+0x3ea>
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	3316      	adds	r3, #22
 8006b82:	db0b      	blt.n	8006b9c <_strtod_l+0x43c>
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	4640      	mov	r0, r8
 8006b88:	1b5d      	subs	r5, r3, r5
 8006b8a:	4b59      	ldr	r3, [pc, #356]	; (8006cf0 <_strtod_l+0x590>)
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006b92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b96:	f7f9 fdc9 	bl	800072c <__aeabi_ddiv>
 8006b9a:	e79d      	b.n	8006ad8 <_strtod_l+0x378>
 8006b9c:	9b07      	ldr	r3, [sp, #28]
 8006b9e:	1ba6      	subs	r6, r4, r6
 8006ba0:	441e      	add	r6, r3
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	dd74      	ble.n	8006c90 <_strtod_l+0x530>
 8006ba6:	f016 030f 	ands.w	r3, r6, #15
 8006baa:	d00a      	beq.n	8006bc2 <_strtod_l+0x462>
 8006bac:	4950      	ldr	r1, [pc, #320]	; (8006cf0 <_strtod_l+0x590>)
 8006bae:	4642      	mov	r2, r8
 8006bb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb8:	464b      	mov	r3, r9
 8006bba:	f7f9 fc8d 	bl	80004d8 <__aeabi_dmul>
 8006bbe:	4680      	mov	r8, r0
 8006bc0:	4689      	mov	r9, r1
 8006bc2:	f036 060f 	bics.w	r6, r6, #15
 8006bc6:	d052      	beq.n	8006c6e <_strtod_l+0x50e>
 8006bc8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006bcc:	dd27      	ble.n	8006c1e <_strtod_l+0x4be>
 8006bce:	f04f 0b00 	mov.w	fp, #0
 8006bd2:	f8cd b010 	str.w	fp, [sp, #16]
 8006bd6:	f8cd b020 	str.w	fp, [sp, #32]
 8006bda:	f8cd b018 	str.w	fp, [sp, #24]
 8006bde:	2322      	movs	r3, #34	; 0x22
 8006be0:	f04f 0800 	mov.w	r8, #0
 8006be4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006ce8 <_strtod_l+0x588>
 8006be8:	f8ca 3000 	str.w	r3, [sl]
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f43f adf7 	beq.w	80067e2 <_strtod_l+0x82>
 8006bf4:	4650      	mov	r0, sl
 8006bf6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006bf8:	f001 ff38 	bl	8008a6c <_Bfree>
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	9906      	ldr	r1, [sp, #24]
 8006c00:	f001 ff34 	bl	8008a6c <_Bfree>
 8006c04:	4650      	mov	r0, sl
 8006c06:	9904      	ldr	r1, [sp, #16]
 8006c08:	f001 ff30 	bl	8008a6c <_Bfree>
 8006c0c:	4650      	mov	r0, sl
 8006c0e:	9908      	ldr	r1, [sp, #32]
 8006c10:	f001 ff2c 	bl	8008a6c <_Bfree>
 8006c14:	4659      	mov	r1, fp
 8006c16:	4650      	mov	r0, sl
 8006c18:	f001 ff28 	bl	8008a6c <_Bfree>
 8006c1c:	e5e1      	b.n	80067e2 <_strtod_l+0x82>
 8006c1e:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <_strtod_l+0x594>)
 8006c20:	4640      	mov	r0, r8
 8006c22:	9305      	str	r3, [sp, #20]
 8006c24:	2300      	movs	r3, #0
 8006c26:	4649      	mov	r1, r9
 8006c28:	461f      	mov	r7, r3
 8006c2a:	1136      	asrs	r6, r6, #4
 8006c2c:	2e01      	cmp	r6, #1
 8006c2e:	dc21      	bgt.n	8006c74 <_strtod_l+0x514>
 8006c30:	b10b      	cbz	r3, 8006c36 <_strtod_l+0x4d6>
 8006c32:	4680      	mov	r8, r0
 8006c34:	4689      	mov	r9, r1
 8006c36:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <_strtod_l+0x594>)
 8006c38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006c3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006c40:	4642      	mov	r2, r8
 8006c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c46:	464b      	mov	r3, r9
 8006c48:	f7f9 fc46 	bl	80004d8 <__aeabi_dmul>
 8006c4c:	4b26      	ldr	r3, [pc, #152]	; (8006ce8 <_strtod_l+0x588>)
 8006c4e:	460a      	mov	r2, r1
 8006c50:	400b      	ands	r3, r1
 8006c52:	4929      	ldr	r1, [pc, #164]	; (8006cf8 <_strtod_l+0x598>)
 8006c54:	4680      	mov	r8, r0
 8006c56:	428b      	cmp	r3, r1
 8006c58:	d8b9      	bhi.n	8006bce <_strtod_l+0x46e>
 8006c5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c5e:	428b      	cmp	r3, r1
 8006c60:	bf86      	itte	hi
 8006c62:	f04f 38ff 	movhi.w	r8, #4294967295
 8006c66:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006cfc <_strtod_l+0x59c>
 8006c6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	e07f      	b.n	8006d74 <_strtod_l+0x614>
 8006c74:	07f2      	lsls	r2, r6, #31
 8006c76:	d505      	bpl.n	8006c84 <_strtod_l+0x524>
 8006c78:	9b05      	ldr	r3, [sp, #20]
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 fc2b 	bl	80004d8 <__aeabi_dmul>
 8006c82:	2301      	movs	r3, #1
 8006c84:	9a05      	ldr	r2, [sp, #20]
 8006c86:	3701      	adds	r7, #1
 8006c88:	3208      	adds	r2, #8
 8006c8a:	1076      	asrs	r6, r6, #1
 8006c8c:	9205      	str	r2, [sp, #20]
 8006c8e:	e7cd      	b.n	8006c2c <_strtod_l+0x4cc>
 8006c90:	d0ed      	beq.n	8006c6e <_strtod_l+0x50e>
 8006c92:	4276      	negs	r6, r6
 8006c94:	f016 020f 	ands.w	r2, r6, #15
 8006c98:	d00a      	beq.n	8006cb0 <_strtod_l+0x550>
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <_strtod_l+0x590>)
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fd40 	bl	800072c <__aeabi_ddiv>
 8006cac:	4680      	mov	r8, r0
 8006cae:	4689      	mov	r9, r1
 8006cb0:	1136      	asrs	r6, r6, #4
 8006cb2:	d0dc      	beq.n	8006c6e <_strtod_l+0x50e>
 8006cb4:	2e1f      	cmp	r6, #31
 8006cb6:	dd23      	ble.n	8006d00 <_strtod_l+0x5a0>
 8006cb8:	f04f 0b00 	mov.w	fp, #0
 8006cbc:	f8cd b010 	str.w	fp, [sp, #16]
 8006cc0:	f8cd b020 	str.w	fp, [sp, #32]
 8006cc4:	f8cd b018 	str.w	fp, [sp, #24]
 8006cc8:	2322      	movs	r3, #34	; 0x22
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	f04f 0900 	mov.w	r9, #0
 8006cd2:	f8ca 3000 	str.w	r3, [sl]
 8006cd6:	e789      	b.n	8006bec <_strtod_l+0x48c>
 8006cd8:	0800ade5 	.word	0x0800ade5
 8006cdc:	0800ae24 	.word	0x0800ae24
 8006ce0:	0800addd 	.word	0x0800addd
 8006ce4:	0800b014 	.word	0x0800b014
 8006ce8:	7ff00000 	.word	0x7ff00000
 8006cec:	0800af0f 	.word	0x0800af0f
 8006cf0:	0800b188 	.word	0x0800b188
 8006cf4:	0800b160 	.word	0x0800b160
 8006cf8:	7ca00000 	.word	0x7ca00000
 8006cfc:	7fefffff 	.word	0x7fefffff
 8006d00:	f016 0310 	ands.w	r3, r6, #16
 8006d04:	bf18      	it	ne
 8006d06:	236a      	movne	r3, #106	; 0x6a
 8006d08:	4640      	mov	r0, r8
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4fb0      	ldr	r7, [pc, #704]	; (8006fd4 <_strtod_l+0x874>)
 8006d12:	07f2      	lsls	r2, r6, #31
 8006d14:	d504      	bpl.n	8006d20 <_strtod_l+0x5c0>
 8006d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1a:	f7f9 fbdd 	bl	80004d8 <__aeabi_dmul>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	1076      	asrs	r6, r6, #1
 8006d22:	f107 0708 	add.w	r7, r7, #8
 8006d26:	d1f4      	bne.n	8006d12 <_strtod_l+0x5b2>
 8006d28:	b10b      	cbz	r3, 8006d2e <_strtod_l+0x5ce>
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	4689      	mov	r9, r1
 8006d2e:	9b05      	ldr	r3, [sp, #20]
 8006d30:	b1c3      	cbz	r3, 8006d64 <_strtod_l+0x604>
 8006d32:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006d36:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	dd11      	ble.n	8006d64 <_strtod_l+0x604>
 8006d40:	2b1f      	cmp	r3, #31
 8006d42:	f340 8127 	ble.w	8006f94 <_strtod_l+0x834>
 8006d46:	2b34      	cmp	r3, #52	; 0x34
 8006d48:	bfd8      	it	le
 8006d4a:	f04f 33ff 	movle.w	r3, #4294967295
 8006d4e:	f04f 0800 	mov.w	r8, #0
 8006d52:	bfcf      	iteee	gt
 8006d54:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006d58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006d5c:	fa03 f202 	lslle.w	r2, r3, r2
 8006d60:	ea02 0901 	andle.w	r9, r2, r1
 8006d64:	2200      	movs	r2, #0
 8006d66:	2300      	movs	r3, #0
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	f7f9 fe1c 	bl	80009a8 <__aeabi_dcmpeq>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d1a1      	bne.n	8006cb8 <_strtod_l+0x558>
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	465a      	mov	r2, fp
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	4623      	mov	r3, r4
 8006d7e:	9908      	ldr	r1, [sp, #32]
 8006d80:	f001 fedc 	bl	8008b3c <__s2b>
 8006d84:	9008      	str	r0, [sp, #32]
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f43f af21 	beq.w	8006bce <_strtod_l+0x46e>
 8006d8c:	9b04      	ldr	r3, [sp, #16]
 8006d8e:	f04f 0b00 	mov.w	fp, #0
 8006d92:	1b5d      	subs	r5, r3, r5
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	f8cd b010 	str.w	fp, [sp, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bfb4      	ite	lt
 8006d9e:	462b      	movlt	r3, r5
 8006da0:	2300      	movge	r3, #0
 8006da2:	930e      	str	r3, [sp, #56]	; 0x38
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006daa:	9314      	str	r3, [sp, #80]	; 0x50
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	4650      	mov	r0, sl
 8006db0:	6859      	ldr	r1, [r3, #4]
 8006db2:	f001 fe1b 	bl	80089ec <_Balloc>
 8006db6:	9006      	str	r0, [sp, #24]
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f43f af10 	beq.w	8006bde <_strtod_l+0x47e>
 8006dbe:	9b08      	ldr	r3, [sp, #32]
 8006dc0:	300c      	adds	r0, #12
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	f103 010c 	add.w	r1, r3, #12
 8006dc8:	3202      	adds	r2, #2
 8006dca:	0092      	lsls	r2, r2, #2
 8006dcc:	f001 fe00 	bl	80089d0 <memcpy>
 8006dd0:	ab1c      	add	r3, sp, #112	; 0x70
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	ab1b      	add	r3, sp, #108	; 0x6c
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	4650      	mov	r0, sl
 8006dde:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006de2:	f002 f9ed 	bl	80091c0 <__d2b>
 8006de6:	901a      	str	r0, [sp, #104]	; 0x68
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f43f aef8 	beq.w	8006bde <_strtod_l+0x47e>
 8006dee:	2101      	movs	r1, #1
 8006df0:	4650      	mov	r0, sl
 8006df2:	f001 ff3b 	bl	8008c6c <__i2b>
 8006df6:	4603      	mov	r3, r0
 8006df8:	9004      	str	r0, [sp, #16]
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f43f aeef 	beq.w	8006bde <_strtod_l+0x47e>
 8006e00:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006e02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006e04:	2d00      	cmp	r5, #0
 8006e06:	bfab      	itete	ge
 8006e08:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006e0a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006e0c:	18ee      	addge	r6, r5, r3
 8006e0e:	1b5c      	sublt	r4, r3, r5
 8006e10:	9b05      	ldr	r3, [sp, #20]
 8006e12:	bfa8      	it	ge
 8006e14:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006e16:	eba5 0503 	sub.w	r5, r5, r3
 8006e1a:	4415      	add	r5, r2
 8006e1c:	4b6e      	ldr	r3, [pc, #440]	; (8006fd8 <_strtod_l+0x878>)
 8006e1e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006e22:	bfb8      	it	lt
 8006e24:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006e26:	429d      	cmp	r5, r3
 8006e28:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e2c:	f280 80c4 	bge.w	8006fb8 <_strtod_l+0x858>
 8006e30:	1b5b      	subs	r3, r3, r5
 8006e32:	2b1f      	cmp	r3, #31
 8006e34:	f04f 0701 	mov.w	r7, #1
 8006e38:	eba2 0203 	sub.w	r2, r2, r3
 8006e3c:	f300 80b1 	bgt.w	8006fa2 <_strtod_l+0x842>
 8006e40:	2500      	movs	r5, #0
 8006e42:	fa07 f303 	lsl.w	r3, r7, r3
 8006e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e48:	18b7      	adds	r7, r6, r2
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	42be      	cmp	r6, r7
 8006e4e:	4414      	add	r4, r2
 8006e50:	441c      	add	r4, r3
 8006e52:	4633      	mov	r3, r6
 8006e54:	bfa8      	it	ge
 8006e56:	463b      	movge	r3, r7
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	bfa8      	it	ge
 8006e5c:	4623      	movge	r3, r4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfc2      	ittt	gt
 8006e62:	1aff      	subgt	r7, r7, r3
 8006e64:	1ae4      	subgt	r4, r4, r3
 8006e66:	1af6      	subgt	r6, r6, r3
 8006e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dd17      	ble.n	8006e9e <_strtod_l+0x73e>
 8006e6e:	461a      	mov	r2, r3
 8006e70:	4650      	mov	r0, sl
 8006e72:	9904      	ldr	r1, [sp, #16]
 8006e74:	f001 ffb8 	bl	8008de8 <__pow5mult>
 8006e78:	9004      	str	r0, [sp, #16]
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f43f aeaf 	beq.w	8006bde <_strtod_l+0x47e>
 8006e80:	4601      	mov	r1, r0
 8006e82:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e84:	4650      	mov	r0, sl
 8006e86:	f001 ff07 	bl	8008c98 <__multiply>
 8006e8a:	9009      	str	r0, [sp, #36]	; 0x24
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f43f aea6 	beq.w	8006bde <_strtod_l+0x47e>
 8006e92:	4650      	mov	r0, sl
 8006e94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e96:	f001 fde9 	bl	8008a6c <_Bfree>
 8006e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e9e:	2f00      	cmp	r7, #0
 8006ea0:	f300 808e 	bgt.w	8006fc0 <_strtod_l+0x860>
 8006ea4:	9b07      	ldr	r3, [sp, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	dd08      	ble.n	8006ebc <_strtod_l+0x75c>
 8006eaa:	4650      	mov	r0, sl
 8006eac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006eae:	9906      	ldr	r1, [sp, #24]
 8006eb0:	f001 ff9a 	bl	8008de8 <__pow5mult>
 8006eb4:	9006      	str	r0, [sp, #24]
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f43f ae91 	beq.w	8006bde <_strtod_l+0x47e>
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	dd08      	ble.n	8006ed2 <_strtod_l+0x772>
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	9906      	ldr	r1, [sp, #24]
 8006ec6:	f001 ffe9 	bl	8008e9c <__lshift>
 8006eca:	9006      	str	r0, [sp, #24]
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f43f ae86 	beq.w	8006bde <_strtod_l+0x47e>
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	dd08      	ble.n	8006ee8 <_strtod_l+0x788>
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	4650      	mov	r0, sl
 8006eda:	9904      	ldr	r1, [sp, #16]
 8006edc:	f001 ffde 	bl	8008e9c <__lshift>
 8006ee0:	9004      	str	r0, [sp, #16]
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f43f ae7b 	beq.w	8006bde <_strtod_l+0x47e>
 8006ee8:	4650      	mov	r0, sl
 8006eea:	9a06      	ldr	r2, [sp, #24]
 8006eec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006eee:	f002 f861 	bl	8008fb4 <__mdiff>
 8006ef2:	4683      	mov	fp, r0
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f43f ae72 	beq.w	8006bde <_strtod_l+0x47e>
 8006efa:	2400      	movs	r4, #0
 8006efc:	68c3      	ldr	r3, [r0, #12]
 8006efe:	9904      	ldr	r1, [sp, #16]
 8006f00:	60c4      	str	r4, [r0, #12]
 8006f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f04:	f002 f83a 	bl	8008f7c <__mcmp>
 8006f08:	42a0      	cmp	r0, r4
 8006f0a:	da6b      	bge.n	8006fe4 <_strtod_l+0x884>
 8006f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f0e:	ea53 0308 	orrs.w	r3, r3, r8
 8006f12:	f040 8091 	bne.w	8007038 <_strtod_l+0x8d8>
 8006f16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 808c 	bne.w	8007038 <_strtod_l+0x8d8>
 8006f20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f24:	0d1b      	lsrs	r3, r3, #20
 8006f26:	051b      	lsls	r3, r3, #20
 8006f28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f2c:	f240 8084 	bls.w	8007038 <_strtod_l+0x8d8>
 8006f30:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006f34:	b91b      	cbnz	r3, 8006f3e <_strtod_l+0x7de>
 8006f36:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	dd7c      	ble.n	8007038 <_strtod_l+0x8d8>
 8006f3e:	4659      	mov	r1, fp
 8006f40:	2201      	movs	r2, #1
 8006f42:	4650      	mov	r0, sl
 8006f44:	f001 ffaa 	bl	8008e9c <__lshift>
 8006f48:	9904      	ldr	r1, [sp, #16]
 8006f4a:	4683      	mov	fp, r0
 8006f4c:	f002 f816 	bl	8008f7c <__mcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dd71      	ble.n	8007038 <_strtod_l+0x8d8>
 8006f54:	9905      	ldr	r1, [sp, #20]
 8006f56:	464b      	mov	r3, r9
 8006f58:	4a20      	ldr	r2, [pc, #128]	; (8006fdc <_strtod_l+0x87c>)
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	f000 808c 	beq.w	8007078 <_strtod_l+0x918>
 8006f60:	ea02 0109 	and.w	r1, r2, r9
 8006f64:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f68:	f300 8086 	bgt.w	8007078 <_strtod_l+0x918>
 8006f6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f70:	f77f aeaa 	ble.w	8006cc8 <_strtod_l+0x568>
 8006f74:	4640      	mov	r0, r8
 8006f76:	4649      	mov	r1, r9
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <_strtod_l+0x880>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f7f9 faac 	bl	80004d8 <__aeabi_dmul>
 8006f80:	460b      	mov	r3, r1
 8006f82:	4303      	orrs	r3, r0
 8006f84:	bf08      	it	eq
 8006f86:	2322      	moveq	r3, #34	; 0x22
 8006f88:	4680      	mov	r8, r0
 8006f8a:	4689      	mov	r9, r1
 8006f8c:	bf08      	it	eq
 8006f8e:	f8ca 3000 	streq.w	r3, [sl]
 8006f92:	e62f      	b.n	8006bf4 <_strtod_l+0x494>
 8006f94:	f04f 32ff 	mov.w	r2, #4294967295
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	ea03 0808 	and.w	r8, r3, r8
 8006fa0:	e6e0      	b.n	8006d64 <_strtod_l+0x604>
 8006fa2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006fa6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006faa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006fae:	35e2      	adds	r5, #226	; 0xe2
 8006fb0:	fa07 f505 	lsl.w	r5, r7, r5
 8006fb4:	970f      	str	r7, [sp, #60]	; 0x3c
 8006fb6:	e747      	b.n	8006e48 <_strtod_l+0x6e8>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	2500      	movs	r5, #0
 8006fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fbe:	e743      	b.n	8006e48 <_strtod_l+0x6e8>
 8006fc0:	463a      	mov	r2, r7
 8006fc2:	4650      	mov	r0, sl
 8006fc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fc6:	f001 ff69 	bl	8008e9c <__lshift>
 8006fca:	901a      	str	r0, [sp, #104]	; 0x68
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	f47f af69 	bne.w	8006ea4 <_strtod_l+0x744>
 8006fd2:	e604      	b.n	8006bde <_strtod_l+0x47e>
 8006fd4:	0800ae38 	.word	0x0800ae38
 8006fd8:	fffffc02 	.word	0xfffffc02
 8006fdc:	7ff00000 	.word	0x7ff00000
 8006fe0:	39500000 	.word	0x39500000
 8006fe4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006fe8:	d165      	bne.n	80070b6 <_strtod_l+0x956>
 8006fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ff0:	b35a      	cbz	r2, 800704a <_strtod_l+0x8ea>
 8006ff2:	4a99      	ldr	r2, [pc, #612]	; (8007258 <_strtod_l+0xaf8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d12b      	bne.n	8007050 <_strtod_l+0x8f0>
 8006ff8:	9b05      	ldr	r3, [sp, #20]
 8006ffa:	4641      	mov	r1, r8
 8006ffc:	b303      	cbz	r3, 8007040 <_strtod_l+0x8e0>
 8006ffe:	464a      	mov	r2, r9
 8007000:	4b96      	ldr	r3, [pc, #600]	; (800725c <_strtod_l+0xafc>)
 8007002:	4013      	ands	r3, r2
 8007004:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007008:	f04f 32ff 	mov.w	r2, #4294967295
 800700c:	d81b      	bhi.n	8007046 <_strtod_l+0x8e6>
 800700e:	0d1b      	lsrs	r3, r3, #20
 8007010:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007014:	fa02 f303 	lsl.w	r3, r2, r3
 8007018:	4299      	cmp	r1, r3
 800701a:	d119      	bne.n	8007050 <_strtod_l+0x8f0>
 800701c:	4b90      	ldr	r3, [pc, #576]	; (8007260 <_strtod_l+0xb00>)
 800701e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007020:	429a      	cmp	r2, r3
 8007022:	d102      	bne.n	800702a <_strtod_l+0x8ca>
 8007024:	3101      	adds	r1, #1
 8007026:	f43f adda 	beq.w	8006bde <_strtod_l+0x47e>
 800702a:	f04f 0800 	mov.w	r8, #0
 800702e:	4b8b      	ldr	r3, [pc, #556]	; (800725c <_strtod_l+0xafc>)
 8007030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007032:	401a      	ands	r2, r3
 8007034:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007038:	9b05      	ldr	r3, [sp, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d19a      	bne.n	8006f74 <_strtod_l+0x814>
 800703e:	e5d9      	b.n	8006bf4 <_strtod_l+0x494>
 8007040:	f04f 33ff 	mov.w	r3, #4294967295
 8007044:	e7e8      	b.n	8007018 <_strtod_l+0x8b8>
 8007046:	4613      	mov	r3, r2
 8007048:	e7e6      	b.n	8007018 <_strtod_l+0x8b8>
 800704a:	ea53 0308 	orrs.w	r3, r3, r8
 800704e:	d081      	beq.n	8006f54 <_strtod_l+0x7f4>
 8007050:	b1e5      	cbz	r5, 800708c <_strtod_l+0x92c>
 8007052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007054:	421d      	tst	r5, r3
 8007056:	d0ef      	beq.n	8007038 <_strtod_l+0x8d8>
 8007058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	9a05      	ldr	r2, [sp, #20]
 8007060:	b1c3      	cbz	r3, 8007094 <_strtod_l+0x934>
 8007062:	f7ff fb5c 	bl	800671e <sulp>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800706e:	f7f9 f87d 	bl	800016c <__adddf3>
 8007072:	4680      	mov	r8, r0
 8007074:	4689      	mov	r9, r1
 8007076:	e7df      	b.n	8007038 <_strtod_l+0x8d8>
 8007078:	4013      	ands	r3, r2
 800707a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800707e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007082:	f04f 38ff 	mov.w	r8, #4294967295
 8007086:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800708a:	e7d5      	b.n	8007038 <_strtod_l+0x8d8>
 800708c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800708e:	ea13 0f08 	tst.w	r3, r8
 8007092:	e7e0      	b.n	8007056 <_strtod_l+0x8f6>
 8007094:	f7ff fb43 	bl	800671e <sulp>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070a0:	f7f9 f862 	bl	8000168 <__aeabi_dsub>
 80070a4:	2200      	movs	r2, #0
 80070a6:	2300      	movs	r3, #0
 80070a8:	4680      	mov	r8, r0
 80070aa:	4689      	mov	r9, r1
 80070ac:	f7f9 fc7c 	bl	80009a8 <__aeabi_dcmpeq>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d0c1      	beq.n	8007038 <_strtod_l+0x8d8>
 80070b4:	e608      	b.n	8006cc8 <_strtod_l+0x568>
 80070b6:	4658      	mov	r0, fp
 80070b8:	9904      	ldr	r1, [sp, #16]
 80070ba:	f002 f8dd 	bl	8009278 <__ratio>
 80070be:	2200      	movs	r2, #0
 80070c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070c4:	4606      	mov	r6, r0
 80070c6:	460f      	mov	r7, r1
 80070c8:	f7f9 fc82 	bl	80009d0 <__aeabi_dcmple>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d070      	beq.n	80071b2 <_strtod_l+0xa52>
 80070d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d042      	beq.n	800715c <_strtod_l+0x9fc>
 80070d6:	2600      	movs	r6, #0
 80070d8:	4f62      	ldr	r7, [pc, #392]	; (8007264 <_strtod_l+0xb04>)
 80070da:	4d62      	ldr	r5, [pc, #392]	; (8007264 <_strtod_l+0xb04>)
 80070dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e2:	0d1b      	lsrs	r3, r3, #20
 80070e4:	051b      	lsls	r3, r3, #20
 80070e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070ea:	4b5f      	ldr	r3, [pc, #380]	; (8007268 <_strtod_l+0xb08>)
 80070ec:	429a      	cmp	r2, r3
 80070ee:	f040 80c3 	bne.w	8007278 <_strtod_l+0xb18>
 80070f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f4:	4640      	mov	r0, r8
 80070f6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80070fa:	4649      	mov	r1, r9
 80070fc:	f001 ffe6 	bl	80090cc <__ulp>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4630      	mov	r0, r6
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 f9e6 	bl	80004d8 <__aeabi_dmul>
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	f7f9 f82c 	bl	800016c <__adddf3>
 8007114:	460b      	mov	r3, r1
 8007116:	4951      	ldr	r1, [pc, #324]	; (800725c <_strtod_l+0xafc>)
 8007118:	4a54      	ldr	r2, [pc, #336]	; (800726c <_strtod_l+0xb0c>)
 800711a:	4019      	ands	r1, r3
 800711c:	4291      	cmp	r1, r2
 800711e:	4680      	mov	r8, r0
 8007120:	d95d      	bls.n	80071de <_strtod_l+0xa7e>
 8007122:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007124:	4b4e      	ldr	r3, [pc, #312]	; (8007260 <_strtod_l+0xb00>)
 8007126:	429a      	cmp	r2, r3
 8007128:	d103      	bne.n	8007132 <_strtod_l+0x9d2>
 800712a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800712c:	3301      	adds	r3, #1
 800712e:	f43f ad56 	beq.w	8006bde <_strtod_l+0x47e>
 8007132:	f04f 38ff 	mov.w	r8, #4294967295
 8007136:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007260 <_strtod_l+0xb00>
 800713a:	4650      	mov	r0, sl
 800713c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800713e:	f001 fc95 	bl	8008a6c <_Bfree>
 8007142:	4650      	mov	r0, sl
 8007144:	9906      	ldr	r1, [sp, #24]
 8007146:	f001 fc91 	bl	8008a6c <_Bfree>
 800714a:	4650      	mov	r0, sl
 800714c:	9904      	ldr	r1, [sp, #16]
 800714e:	f001 fc8d 	bl	8008a6c <_Bfree>
 8007152:	4659      	mov	r1, fp
 8007154:	4650      	mov	r0, sl
 8007156:	f001 fc89 	bl	8008a6c <_Bfree>
 800715a:	e627      	b.n	8006dac <_strtod_l+0x64c>
 800715c:	f1b8 0f00 	cmp.w	r8, #0
 8007160:	d119      	bne.n	8007196 <_strtod_l+0xa36>
 8007162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007168:	b9e3      	cbnz	r3, 80071a4 <_strtod_l+0xa44>
 800716a:	2200      	movs	r2, #0
 800716c:	4630      	mov	r0, r6
 800716e:	4639      	mov	r1, r7
 8007170:	4b3c      	ldr	r3, [pc, #240]	; (8007264 <_strtod_l+0xb04>)
 8007172:	f7f9 fc23 	bl	80009bc <__aeabi_dcmplt>
 8007176:	b9c8      	cbnz	r0, 80071ac <_strtod_l+0xa4c>
 8007178:	2200      	movs	r2, #0
 800717a:	4630      	mov	r0, r6
 800717c:	4639      	mov	r1, r7
 800717e:	4b3c      	ldr	r3, [pc, #240]	; (8007270 <_strtod_l+0xb10>)
 8007180:	f7f9 f9aa 	bl	80004d8 <__aeabi_dmul>
 8007184:	4604      	mov	r4, r0
 8007186:	460d      	mov	r5, r1
 8007188:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800718c:	9416      	str	r4, [sp, #88]	; 0x58
 800718e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007190:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007194:	e7a2      	b.n	80070dc <_strtod_l+0x97c>
 8007196:	f1b8 0f01 	cmp.w	r8, #1
 800719a:	d103      	bne.n	80071a4 <_strtod_l+0xa44>
 800719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f43f ad92 	beq.w	8006cc8 <_strtod_l+0x568>
 80071a4:	2600      	movs	r6, #0
 80071a6:	2400      	movs	r4, #0
 80071a8:	4f32      	ldr	r7, [pc, #200]	; (8007274 <_strtod_l+0xb14>)
 80071aa:	e796      	b.n	80070da <_strtod_l+0x97a>
 80071ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80071ae:	4d30      	ldr	r5, [pc, #192]	; (8007270 <_strtod_l+0xb10>)
 80071b0:	e7ea      	b.n	8007188 <_strtod_l+0xa28>
 80071b2:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <_strtod_l+0xb10>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	4630      	mov	r0, r6
 80071b8:	4639      	mov	r1, r7
 80071ba:	f7f9 f98d 	bl	80004d8 <__aeabi_dmul>
 80071be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c0:	4604      	mov	r4, r0
 80071c2:	460d      	mov	r5, r1
 80071c4:	b933      	cbnz	r3, 80071d4 <_strtod_l+0xa74>
 80071c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ca:	9010      	str	r0, [sp, #64]	; 0x40
 80071cc:	9311      	str	r3, [sp, #68]	; 0x44
 80071ce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80071d2:	e783      	b.n	80070dc <_strtod_l+0x97c>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80071dc:	e7f7      	b.n	80071ce <_strtod_l+0xa6e>
 80071de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80071e2:	9b05      	ldr	r3, [sp, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1a8      	bne.n	800713a <_strtod_l+0x9da>
 80071e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071ee:	0d1b      	lsrs	r3, r3, #20
 80071f0:	051b      	lsls	r3, r3, #20
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d1a1      	bne.n	800713a <_strtod_l+0x9da>
 80071f6:	4620      	mov	r0, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	f7f9 fcb5 	bl	8000b68 <__aeabi_d2lz>
 80071fe:	f7f9 f93d 	bl	800047c <__aeabi_l2d>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	f7f8 ffad 	bl	8000168 <__aeabi_dsub>
 800720e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007214:	ea43 0308 	orr.w	r3, r3, r8
 8007218:	4313      	orrs	r3, r2
 800721a:	4604      	mov	r4, r0
 800721c:	460d      	mov	r5, r1
 800721e:	d066      	beq.n	80072ee <_strtod_l+0xb8e>
 8007220:	a309      	add	r3, pc, #36	; (adr r3, 8007248 <_strtod_l+0xae8>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f9 fbc9 	bl	80009bc <__aeabi_dcmplt>
 800722a:	2800      	cmp	r0, #0
 800722c:	f47f ace2 	bne.w	8006bf4 <_strtod_l+0x494>
 8007230:	a307      	add	r3, pc, #28	; (adr r3, 8007250 <_strtod_l+0xaf0>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 fbdd 	bl	80009f8 <__aeabi_dcmpgt>
 800723e:	2800      	cmp	r0, #0
 8007240:	f43f af7b 	beq.w	800713a <_strtod_l+0x9da>
 8007244:	e4d6      	b.n	8006bf4 <_strtod_l+0x494>
 8007246:	bf00      	nop
 8007248:	94a03595 	.word	0x94a03595
 800724c:	3fdfffff 	.word	0x3fdfffff
 8007250:	35afe535 	.word	0x35afe535
 8007254:	3fe00000 	.word	0x3fe00000
 8007258:	000fffff 	.word	0x000fffff
 800725c:	7ff00000 	.word	0x7ff00000
 8007260:	7fefffff 	.word	0x7fefffff
 8007264:	3ff00000 	.word	0x3ff00000
 8007268:	7fe00000 	.word	0x7fe00000
 800726c:	7c9fffff 	.word	0x7c9fffff
 8007270:	3fe00000 	.word	0x3fe00000
 8007274:	bff00000 	.word	0xbff00000
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	b313      	cbz	r3, 80072c2 <_strtod_l+0xb62>
 800727c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800727e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007282:	d81e      	bhi.n	80072c2 <_strtod_l+0xb62>
 8007284:	a326      	add	r3, pc, #152	; (adr r3, 8007320 <_strtod_l+0xbc0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f7f9 fb9f 	bl	80009d0 <__aeabi_dcmple>
 8007292:	b190      	cbz	r0, 80072ba <_strtod_l+0xb5a>
 8007294:	4629      	mov	r1, r5
 8007296:	4620      	mov	r0, r4
 8007298:	f7f9 fbf6 	bl	8000a88 <__aeabi_d2uiz>
 800729c:	2801      	cmp	r0, #1
 800729e:	bf38      	it	cc
 80072a0:	2001      	movcc	r0, #1
 80072a2:	f7f9 f89f 	bl	80003e4 <__aeabi_ui2d>
 80072a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a8:	4604      	mov	r4, r0
 80072aa:	460d      	mov	r5, r1
 80072ac:	b9d3      	cbnz	r3, 80072e4 <_strtod_l+0xb84>
 80072ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072b2:	9012      	str	r0, [sp, #72]	; 0x48
 80072b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80072b6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80072ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072bc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80072c0:	1a9f      	subs	r7, r3, r2
 80072c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072c6:	f001 ff01 	bl	80090cc <__ulp>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f9 f901 	bl	80004d8 <__aeabi_dmul>
 80072d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80072da:	f7f8 ff47 	bl	800016c <__adddf3>
 80072de:	4680      	mov	r8, r0
 80072e0:	4689      	mov	r9, r1
 80072e2:	e77e      	b.n	80071e2 <_strtod_l+0xa82>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80072ec:	e7e3      	b.n	80072b6 <_strtod_l+0xb56>
 80072ee:	a30e      	add	r3, pc, #56	; (adr r3, 8007328 <_strtod_l+0xbc8>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f7f9 fb62 	bl	80009bc <__aeabi_dcmplt>
 80072f8:	e7a1      	b.n	800723e <_strtod_l+0xade>
 80072fa:	2300      	movs	r3, #0
 80072fc:	930a      	str	r3, [sp, #40]	; 0x28
 80072fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007300:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	f7ff ba71 	b.w	80067ea <_strtod_l+0x8a>
 8007308:	2a65      	cmp	r2, #101	; 0x65
 800730a:	f43f ab63 	beq.w	80069d4 <_strtod_l+0x274>
 800730e:	2a45      	cmp	r2, #69	; 0x45
 8007310:	f43f ab60 	beq.w	80069d4 <_strtod_l+0x274>
 8007314:	2301      	movs	r3, #1
 8007316:	f7ff bb95 	b.w	8006a44 <_strtod_l+0x2e4>
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w
 8007320:	ffc00000 	.word	0xffc00000
 8007324:	41dfffff 	.word	0x41dfffff
 8007328:	94a03595 	.word	0x94a03595
 800732c:	3fcfffff 	.word	0x3fcfffff

08007330 <_strtod_r>:
 8007330:	4b01      	ldr	r3, [pc, #4]	; (8007338 <_strtod_r+0x8>)
 8007332:	f7ff ba15 	b.w	8006760 <_strtod_l>
 8007336:	bf00      	nop
 8007338:	200000e0 	.word	0x200000e0

0800733c <strtok>:
 800733c:	4b16      	ldr	r3, [pc, #88]	; (8007398 <strtok+0x5c>)
 800733e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	681f      	ldr	r7, [r3, #0]
 8007344:	4605      	mov	r5, r0
 8007346:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007348:	460e      	mov	r6, r1
 800734a:	b9ec      	cbnz	r4, 8007388 <strtok+0x4c>
 800734c:	2050      	movs	r0, #80	; 0x50
 800734e:	f001 fb17 	bl	8008980 <malloc>
 8007352:	4602      	mov	r2, r0
 8007354:	65b8      	str	r0, [r7, #88]	; 0x58
 8007356:	b920      	cbnz	r0, 8007362 <strtok+0x26>
 8007358:	2157      	movs	r1, #87	; 0x57
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <strtok+0x60>)
 800735c:	4810      	ldr	r0, [pc, #64]	; (80073a0 <strtok+0x64>)
 800735e:	f000 f8d9 	bl	8007514 <__assert_func>
 8007362:	e9c0 4400 	strd	r4, r4, [r0]
 8007366:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800736a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800736e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007372:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007376:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800737a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800737e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007382:	6184      	str	r4, [r0, #24]
 8007384:	7704      	strb	r4, [r0, #28]
 8007386:	6244      	str	r4, [r0, #36]	; 0x24
 8007388:	4631      	mov	r1, r6
 800738a:	4628      	mov	r0, r5
 800738c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800738e:	2301      	movs	r3, #1
 8007390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007394:	f000 b806 	b.w	80073a4 <__strtok_r>
 8007398:	20000078 	.word	0x20000078
 800739c:	0800ae60 	.word	0x0800ae60
 80073a0:	0800ae77 	.word	0x0800ae77

080073a4 <__strtok_r>:
 80073a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073a6:	b908      	cbnz	r0, 80073ac <__strtok_r+0x8>
 80073a8:	6810      	ldr	r0, [r2, #0]
 80073aa:	b188      	cbz	r0, 80073d0 <__strtok_r+0x2c>
 80073ac:	4604      	mov	r4, r0
 80073ae:	460f      	mov	r7, r1
 80073b0:	4620      	mov	r0, r4
 80073b2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80073b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80073ba:	b91e      	cbnz	r6, 80073c4 <__strtok_r+0x20>
 80073bc:	b965      	cbnz	r5, 80073d8 <__strtok_r+0x34>
 80073be:	4628      	mov	r0, r5
 80073c0:	6015      	str	r5, [r2, #0]
 80073c2:	e005      	b.n	80073d0 <__strtok_r+0x2c>
 80073c4:	42b5      	cmp	r5, r6
 80073c6:	d1f6      	bne.n	80073b6 <__strtok_r+0x12>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f0      	bne.n	80073ae <__strtok_r+0xa>
 80073cc:	6014      	str	r4, [r2, #0]
 80073ce:	7003      	strb	r3, [r0, #0]
 80073d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d2:	461c      	mov	r4, r3
 80073d4:	e00c      	b.n	80073f0 <__strtok_r+0x4c>
 80073d6:	b915      	cbnz	r5, 80073de <__strtok_r+0x3a>
 80073d8:	460e      	mov	r6, r1
 80073da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80073e2:	42ab      	cmp	r3, r5
 80073e4:	d1f7      	bne.n	80073d6 <__strtok_r+0x32>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f3      	beq.n	80073d2 <__strtok_r+0x2e>
 80073ea:	2300      	movs	r3, #0
 80073ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80073f0:	6014      	str	r4, [r2, #0]
 80073f2:	e7ed      	b.n	80073d0 <__strtok_r+0x2c>

080073f4 <_strtol_l.constprop.0>:
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fa:	4680      	mov	r8, r0
 80073fc:	d001      	beq.n	8007402 <_strtol_l.constprop.0+0xe>
 80073fe:	2b24      	cmp	r3, #36	; 0x24
 8007400:	d906      	bls.n	8007410 <_strtol_l.constprop.0+0x1c>
 8007402:	f7fe fa23 	bl	800584c <__errno>
 8007406:	2316      	movs	r3, #22
 8007408:	6003      	str	r3, [r0, #0]
 800740a:	2000      	movs	r0, #0
 800740c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007410:	460d      	mov	r5, r1
 8007412:	4f35      	ldr	r7, [pc, #212]	; (80074e8 <_strtol_l.constprop.0+0xf4>)
 8007414:	4628      	mov	r0, r5
 8007416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800741a:	5de6      	ldrb	r6, [r4, r7]
 800741c:	f016 0608 	ands.w	r6, r6, #8
 8007420:	d1f8      	bne.n	8007414 <_strtol_l.constprop.0+0x20>
 8007422:	2c2d      	cmp	r4, #45	; 0x2d
 8007424:	d12f      	bne.n	8007486 <_strtol_l.constprop.0+0x92>
 8007426:	2601      	movs	r6, #1
 8007428:	782c      	ldrb	r4, [r5, #0]
 800742a:	1c85      	adds	r5, r0, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d057      	beq.n	80074e0 <_strtol_l.constprop.0+0xec>
 8007430:	2b10      	cmp	r3, #16
 8007432:	d109      	bne.n	8007448 <_strtol_l.constprop.0+0x54>
 8007434:	2c30      	cmp	r4, #48	; 0x30
 8007436:	d107      	bne.n	8007448 <_strtol_l.constprop.0+0x54>
 8007438:	7828      	ldrb	r0, [r5, #0]
 800743a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800743e:	2858      	cmp	r0, #88	; 0x58
 8007440:	d149      	bne.n	80074d6 <_strtol_l.constprop.0+0xe2>
 8007442:	2310      	movs	r3, #16
 8007444:	786c      	ldrb	r4, [r5, #1]
 8007446:	3502      	adds	r5, #2
 8007448:	2700      	movs	r7, #0
 800744a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800744e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007452:	fbbe f9f3 	udiv	r9, lr, r3
 8007456:	4638      	mov	r0, r7
 8007458:	fb03 ea19 	mls	sl, r3, r9, lr
 800745c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007460:	f1bc 0f09 	cmp.w	ip, #9
 8007464:	d814      	bhi.n	8007490 <_strtol_l.constprop.0+0x9c>
 8007466:	4664      	mov	r4, ip
 8007468:	42a3      	cmp	r3, r4
 800746a:	dd22      	ble.n	80074b2 <_strtol_l.constprop.0+0xbe>
 800746c:	2f00      	cmp	r7, #0
 800746e:	db1d      	blt.n	80074ac <_strtol_l.constprop.0+0xb8>
 8007470:	4581      	cmp	r9, r0
 8007472:	d31b      	bcc.n	80074ac <_strtol_l.constprop.0+0xb8>
 8007474:	d101      	bne.n	800747a <_strtol_l.constprop.0+0x86>
 8007476:	45a2      	cmp	sl, r4
 8007478:	db18      	blt.n	80074ac <_strtol_l.constprop.0+0xb8>
 800747a:	2701      	movs	r7, #1
 800747c:	fb00 4003 	mla	r0, r0, r3, r4
 8007480:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007484:	e7ea      	b.n	800745c <_strtol_l.constprop.0+0x68>
 8007486:	2c2b      	cmp	r4, #43	; 0x2b
 8007488:	bf04      	itt	eq
 800748a:	782c      	ldrbeq	r4, [r5, #0]
 800748c:	1c85      	addeq	r5, r0, #2
 800748e:	e7cd      	b.n	800742c <_strtol_l.constprop.0+0x38>
 8007490:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007494:	f1bc 0f19 	cmp.w	ip, #25
 8007498:	d801      	bhi.n	800749e <_strtol_l.constprop.0+0xaa>
 800749a:	3c37      	subs	r4, #55	; 0x37
 800749c:	e7e4      	b.n	8007468 <_strtol_l.constprop.0+0x74>
 800749e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80074a2:	f1bc 0f19 	cmp.w	ip, #25
 80074a6:	d804      	bhi.n	80074b2 <_strtol_l.constprop.0+0xbe>
 80074a8:	3c57      	subs	r4, #87	; 0x57
 80074aa:	e7dd      	b.n	8007468 <_strtol_l.constprop.0+0x74>
 80074ac:	f04f 37ff 	mov.w	r7, #4294967295
 80074b0:	e7e6      	b.n	8007480 <_strtol_l.constprop.0+0x8c>
 80074b2:	2f00      	cmp	r7, #0
 80074b4:	da07      	bge.n	80074c6 <_strtol_l.constprop.0+0xd2>
 80074b6:	2322      	movs	r3, #34	; 0x22
 80074b8:	4670      	mov	r0, lr
 80074ba:	f8c8 3000 	str.w	r3, [r8]
 80074be:	2a00      	cmp	r2, #0
 80074c0:	d0a4      	beq.n	800740c <_strtol_l.constprop.0+0x18>
 80074c2:	1e69      	subs	r1, r5, #1
 80074c4:	e005      	b.n	80074d2 <_strtol_l.constprop.0+0xde>
 80074c6:	b106      	cbz	r6, 80074ca <_strtol_l.constprop.0+0xd6>
 80074c8:	4240      	negs	r0, r0
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	d09e      	beq.n	800740c <_strtol_l.constprop.0+0x18>
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	d1f7      	bne.n	80074c2 <_strtol_l.constprop.0+0xce>
 80074d2:	6011      	str	r1, [r2, #0]
 80074d4:	e79a      	b.n	800740c <_strtol_l.constprop.0+0x18>
 80074d6:	2430      	movs	r4, #48	; 0x30
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1b5      	bne.n	8007448 <_strtol_l.constprop.0+0x54>
 80074dc:	2308      	movs	r3, #8
 80074de:	e7b3      	b.n	8007448 <_strtol_l.constprop.0+0x54>
 80074e0:	2c30      	cmp	r4, #48	; 0x30
 80074e2:	d0a9      	beq.n	8007438 <_strtol_l.constprop.0+0x44>
 80074e4:	230a      	movs	r3, #10
 80074e6:	e7af      	b.n	8007448 <_strtol_l.constprop.0+0x54>
 80074e8:	0800af11 	.word	0x0800af11

080074ec <_strtol_r>:
 80074ec:	f7ff bf82 	b.w	80073f4 <_strtol_l.constprop.0>

080074f0 <_write_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	4d05      	ldr	r5, [pc, #20]	; (8007510 <_write_r+0x20>)
 80074fc:	602a      	str	r2, [r5, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	f7fa fe04 	bl	800210c <_write>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_write_r+0x1e>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_write_r+0x1e>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	200005a8 	.word	0x200005a8

08007514 <__assert_func>:
 8007514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007516:	4614      	mov	r4, r2
 8007518:	461a      	mov	r2, r3
 800751a:	4b09      	ldr	r3, [pc, #36]	; (8007540 <__assert_func+0x2c>)
 800751c:	4605      	mov	r5, r0
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68d8      	ldr	r0, [r3, #12]
 8007522:	b14c      	cbz	r4, 8007538 <__assert_func+0x24>
 8007524:	4b07      	ldr	r3, [pc, #28]	; (8007544 <__assert_func+0x30>)
 8007526:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800752a:	9100      	str	r1, [sp, #0]
 800752c:	462b      	mov	r3, r5
 800752e:	4906      	ldr	r1, [pc, #24]	; (8007548 <__assert_func+0x34>)
 8007530:	f000 fe98 	bl	8008264 <fiprintf>
 8007534:	f002 ffca 	bl	800a4cc <abort>
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <__assert_func+0x38>)
 800753a:	461c      	mov	r4, r3
 800753c:	e7f3      	b.n	8007526 <__assert_func+0x12>
 800753e:	bf00      	nop
 8007540:	20000078 	.word	0x20000078
 8007544:	0800aed4 	.word	0x0800aed4
 8007548:	0800aee1 	.word	0x0800aee1
 800754c:	0800af0f 	.word	0x0800af0f

08007550 <_close_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	2300      	movs	r3, #0
 8007554:	4d05      	ldr	r5, [pc, #20]	; (800756c <_close_r+0x1c>)
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	f7fa fdf2 	bl	8002144 <_close>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_close_r+0x1a>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_close_r+0x1a>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	200005a8 	.word	0x200005a8

08007570 <quorem>:
 8007570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	6903      	ldr	r3, [r0, #16]
 8007576:	690c      	ldr	r4, [r1, #16]
 8007578:	4607      	mov	r7, r0
 800757a:	42a3      	cmp	r3, r4
 800757c:	f2c0 8082 	blt.w	8007684 <quorem+0x114>
 8007580:	3c01      	subs	r4, #1
 8007582:	f100 0514 	add.w	r5, r0, #20
 8007586:	f101 0814 	add.w	r8, r1, #20
 800758a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007598:	3301      	adds	r3, #1
 800759a:	429a      	cmp	r2, r3
 800759c:	fbb2 f6f3 	udiv	r6, r2, r3
 80075a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075a8:	d331      	bcc.n	800760e <quorem+0x9e>
 80075aa:	f04f 0e00 	mov.w	lr, #0
 80075ae:	4640      	mov	r0, r8
 80075b0:	46ac      	mov	ip, r5
 80075b2:	46f2      	mov	sl, lr
 80075b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075b8:	b293      	uxth	r3, r2
 80075ba:	fb06 e303 	mla	r3, r6, r3, lr
 80075be:	0c12      	lsrs	r2, r2, #16
 80075c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	fb06 e202 	mla	r2, r6, r2, lr
 80075ca:	ebaa 0303 	sub.w	r3, sl, r3
 80075ce:	f8dc a000 	ldr.w	sl, [ip]
 80075d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075d6:	fa1f fa8a 	uxth.w	sl, sl
 80075da:	4453      	add	r3, sl
 80075dc:	f8dc a000 	ldr.w	sl, [ip]
 80075e0:	b292      	uxth	r2, r2
 80075e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075f0:	4581      	cmp	r9, r0
 80075f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075f6:	f84c 3b04 	str.w	r3, [ip], #4
 80075fa:	d2db      	bcs.n	80075b4 <quorem+0x44>
 80075fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007600:	b92b      	cbnz	r3, 800760e <quorem+0x9e>
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	3b04      	subs	r3, #4
 8007606:	429d      	cmp	r5, r3
 8007608:	461a      	mov	r2, r3
 800760a:	d32f      	bcc.n	800766c <quorem+0xfc>
 800760c:	613c      	str	r4, [r7, #16]
 800760e:	4638      	mov	r0, r7
 8007610:	f001 fcb4 	bl	8008f7c <__mcmp>
 8007614:	2800      	cmp	r0, #0
 8007616:	db25      	blt.n	8007664 <quorem+0xf4>
 8007618:	4628      	mov	r0, r5
 800761a:	f04f 0c00 	mov.w	ip, #0
 800761e:	3601      	adds	r6, #1
 8007620:	f858 1b04 	ldr.w	r1, [r8], #4
 8007624:	f8d0 e000 	ldr.w	lr, [r0]
 8007628:	b28b      	uxth	r3, r1
 800762a:	ebac 0303 	sub.w	r3, ip, r3
 800762e:	fa1f f28e 	uxth.w	r2, lr
 8007632:	4413      	add	r3, r2
 8007634:	0c0a      	lsrs	r2, r1, #16
 8007636:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800763a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800763e:	b29b      	uxth	r3, r3
 8007640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007644:	45c1      	cmp	r9, r8
 8007646:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800764a:	f840 3b04 	str.w	r3, [r0], #4
 800764e:	d2e7      	bcs.n	8007620 <quorem+0xb0>
 8007650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007658:	b922      	cbnz	r2, 8007664 <quorem+0xf4>
 800765a:	3b04      	subs	r3, #4
 800765c:	429d      	cmp	r5, r3
 800765e:	461a      	mov	r2, r3
 8007660:	d30a      	bcc.n	8007678 <quorem+0x108>
 8007662:	613c      	str	r4, [r7, #16]
 8007664:	4630      	mov	r0, r6
 8007666:	b003      	add	sp, #12
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	3b04      	subs	r3, #4
 8007670:	2a00      	cmp	r2, #0
 8007672:	d1cb      	bne.n	800760c <quorem+0x9c>
 8007674:	3c01      	subs	r4, #1
 8007676:	e7c6      	b.n	8007606 <quorem+0x96>
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	3b04      	subs	r3, #4
 800767c:	2a00      	cmp	r2, #0
 800767e:	d1f0      	bne.n	8007662 <quorem+0xf2>
 8007680:	3c01      	subs	r4, #1
 8007682:	e7eb      	b.n	800765c <quorem+0xec>
 8007684:	2000      	movs	r0, #0
 8007686:	e7ee      	b.n	8007666 <quorem+0xf6>

08007688 <_dtoa_r>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	4616      	mov	r6, r2
 800768e:	461f      	mov	r7, r3
 8007690:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007692:	b099      	sub	sp, #100	; 0x64
 8007694:	4605      	mov	r5, r0
 8007696:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800769a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800769e:	b974      	cbnz	r4, 80076be <_dtoa_r+0x36>
 80076a0:	2010      	movs	r0, #16
 80076a2:	f001 f96d 	bl	8008980 <malloc>
 80076a6:	4602      	mov	r2, r0
 80076a8:	6268      	str	r0, [r5, #36]	; 0x24
 80076aa:	b920      	cbnz	r0, 80076b6 <_dtoa_r+0x2e>
 80076ac:	21ea      	movs	r1, #234	; 0xea
 80076ae:	4ba8      	ldr	r3, [pc, #672]	; (8007950 <_dtoa_r+0x2c8>)
 80076b0:	48a8      	ldr	r0, [pc, #672]	; (8007954 <_dtoa_r+0x2cc>)
 80076b2:	f7ff ff2f 	bl	8007514 <__assert_func>
 80076b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076ba:	6004      	str	r4, [r0, #0]
 80076bc:	60c4      	str	r4, [r0, #12]
 80076be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076c0:	6819      	ldr	r1, [r3, #0]
 80076c2:	b151      	cbz	r1, 80076da <_dtoa_r+0x52>
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	2301      	movs	r3, #1
 80076c8:	4093      	lsls	r3, r2
 80076ca:	604a      	str	r2, [r1, #4]
 80076cc:	608b      	str	r3, [r1, #8]
 80076ce:	4628      	mov	r0, r5
 80076d0:	f001 f9cc 	bl	8008a6c <_Bfree>
 80076d4:	2200      	movs	r2, #0
 80076d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	1e3b      	subs	r3, r7, #0
 80076dc:	bfaf      	iteee	ge
 80076de:	2300      	movge	r3, #0
 80076e0:	2201      	movlt	r2, #1
 80076e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076e6:	9305      	strlt	r3, [sp, #20]
 80076e8:	bfa8      	it	ge
 80076ea:	f8c8 3000 	strge.w	r3, [r8]
 80076ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80076f2:	4b99      	ldr	r3, [pc, #612]	; (8007958 <_dtoa_r+0x2d0>)
 80076f4:	bfb8      	it	lt
 80076f6:	f8c8 2000 	strlt.w	r2, [r8]
 80076fa:	ea33 0309 	bics.w	r3, r3, r9
 80076fe:	d119      	bne.n	8007734 <_dtoa_r+0xac>
 8007700:	f242 730f 	movw	r3, #9999	; 0x270f
 8007704:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800770c:	4333      	orrs	r3, r6
 800770e:	f000 857f 	beq.w	8008210 <_dtoa_r+0xb88>
 8007712:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007714:	b953      	cbnz	r3, 800772c <_dtoa_r+0xa4>
 8007716:	4b91      	ldr	r3, [pc, #580]	; (800795c <_dtoa_r+0x2d4>)
 8007718:	e022      	b.n	8007760 <_dtoa_r+0xd8>
 800771a:	4b91      	ldr	r3, [pc, #580]	; (8007960 <_dtoa_r+0x2d8>)
 800771c:	9303      	str	r3, [sp, #12]
 800771e:	3308      	adds	r3, #8
 8007720:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	9803      	ldr	r0, [sp, #12]
 8007726:	b019      	add	sp, #100	; 0x64
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	4b8b      	ldr	r3, [pc, #556]	; (800795c <_dtoa_r+0x2d4>)
 800772e:	9303      	str	r3, [sp, #12]
 8007730:	3303      	adds	r3, #3
 8007732:	e7f5      	b.n	8007720 <_dtoa_r+0x98>
 8007734:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007738:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800773c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007740:	2200      	movs	r2, #0
 8007742:	2300      	movs	r3, #0
 8007744:	f7f9 f930 	bl	80009a8 <__aeabi_dcmpeq>
 8007748:	4680      	mov	r8, r0
 800774a:	b158      	cbz	r0, 8007764 <_dtoa_r+0xdc>
 800774c:	2301      	movs	r3, #1
 800774e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8558 	beq.w	800820a <_dtoa_r+0xb82>
 800775a:	4882      	ldr	r0, [pc, #520]	; (8007964 <_dtoa_r+0x2dc>)
 800775c:	6018      	str	r0, [r3, #0]
 800775e:	1e43      	subs	r3, r0, #1
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	e7df      	b.n	8007724 <_dtoa_r+0x9c>
 8007764:	ab16      	add	r3, sp, #88	; 0x58
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	ab17      	add	r3, sp, #92	; 0x5c
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4628      	mov	r0, r5
 800776e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007772:	f001 fd25 	bl	80091c0 <__d2b>
 8007776:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800777a:	4683      	mov	fp, r0
 800777c:	2c00      	cmp	r4, #0
 800777e:	d07f      	beq.n	8007880 <_dtoa_r+0x1f8>
 8007780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007786:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800778a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800778e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007792:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007796:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800779a:	2200      	movs	r2, #0
 800779c:	4b72      	ldr	r3, [pc, #456]	; (8007968 <_dtoa_r+0x2e0>)
 800779e:	f7f8 fce3 	bl	8000168 <__aeabi_dsub>
 80077a2:	a365      	add	r3, pc, #404	; (adr r3, 8007938 <_dtoa_r+0x2b0>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 fe96 	bl	80004d8 <__aeabi_dmul>
 80077ac:	a364      	add	r3, pc, #400	; (adr r3, 8007940 <_dtoa_r+0x2b8>)
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f7f8 fcdb 	bl	800016c <__adddf3>
 80077b6:	4606      	mov	r6, r0
 80077b8:	4620      	mov	r0, r4
 80077ba:	460f      	mov	r7, r1
 80077bc:	f7f8 fe22 	bl	8000404 <__aeabi_i2d>
 80077c0:	a361      	add	r3, pc, #388	; (adr r3, 8007948 <_dtoa_r+0x2c0>)
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	f7f8 fe87 	bl	80004d8 <__aeabi_dmul>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4630      	mov	r0, r6
 80077d0:	4639      	mov	r1, r7
 80077d2:	f7f8 fccb 	bl	800016c <__adddf3>
 80077d6:	4606      	mov	r6, r0
 80077d8:	460f      	mov	r7, r1
 80077da:	f7f9 f92d 	bl	8000a38 <__aeabi_d2iz>
 80077de:	2200      	movs	r2, #0
 80077e0:	4682      	mov	sl, r0
 80077e2:	2300      	movs	r3, #0
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f9 f8e8 	bl	80009bc <__aeabi_dcmplt>
 80077ec:	b148      	cbz	r0, 8007802 <_dtoa_r+0x17a>
 80077ee:	4650      	mov	r0, sl
 80077f0:	f7f8 fe08 	bl	8000404 <__aeabi_i2d>
 80077f4:	4632      	mov	r2, r6
 80077f6:	463b      	mov	r3, r7
 80077f8:	f7f9 f8d6 	bl	80009a8 <__aeabi_dcmpeq>
 80077fc:	b908      	cbnz	r0, 8007802 <_dtoa_r+0x17a>
 80077fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007802:	f1ba 0f16 	cmp.w	sl, #22
 8007806:	d858      	bhi.n	80078ba <_dtoa_r+0x232>
 8007808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800780c:	4b57      	ldr	r3, [pc, #348]	; (800796c <_dtoa_r+0x2e4>)
 800780e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f7f9 f8d1 	bl	80009bc <__aeabi_dcmplt>
 800781a:	2800      	cmp	r0, #0
 800781c:	d04f      	beq.n	80078be <_dtoa_r+0x236>
 800781e:	2300      	movs	r3, #0
 8007820:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007824:	930f      	str	r3, [sp, #60]	; 0x3c
 8007826:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007828:	1b1c      	subs	r4, r3, r4
 800782a:	1e63      	subs	r3, r4, #1
 800782c:	9309      	str	r3, [sp, #36]	; 0x24
 800782e:	bf49      	itett	mi
 8007830:	f1c4 0301 	rsbmi	r3, r4, #1
 8007834:	2300      	movpl	r3, #0
 8007836:	9306      	strmi	r3, [sp, #24]
 8007838:	2300      	movmi	r3, #0
 800783a:	bf54      	ite	pl
 800783c:	9306      	strpl	r3, [sp, #24]
 800783e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007840:	f1ba 0f00 	cmp.w	sl, #0
 8007844:	db3d      	blt.n	80078c2 <_dtoa_r+0x23a>
 8007846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007848:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800784c:	4453      	add	r3, sl
 800784e:	9309      	str	r3, [sp, #36]	; 0x24
 8007850:	2300      	movs	r3, #0
 8007852:	930a      	str	r3, [sp, #40]	; 0x28
 8007854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007856:	2b09      	cmp	r3, #9
 8007858:	f200 808c 	bhi.w	8007974 <_dtoa_r+0x2ec>
 800785c:	2b05      	cmp	r3, #5
 800785e:	bfc4      	itt	gt
 8007860:	3b04      	subgt	r3, #4
 8007862:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007866:	bfc8      	it	gt
 8007868:	2400      	movgt	r4, #0
 800786a:	f1a3 0302 	sub.w	r3, r3, #2
 800786e:	bfd8      	it	le
 8007870:	2401      	movle	r4, #1
 8007872:	2b03      	cmp	r3, #3
 8007874:	f200 808a 	bhi.w	800798c <_dtoa_r+0x304>
 8007878:	e8df f003 	tbb	[pc, r3]
 800787c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007880:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007884:	441c      	add	r4, r3
 8007886:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800788a:	2b20      	cmp	r3, #32
 800788c:	bfc3      	ittte	gt
 800788e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007892:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007896:	fa09 f303 	lslgt.w	r3, r9, r3
 800789a:	f1c3 0320 	rsble	r3, r3, #32
 800789e:	bfc6      	itte	gt
 80078a0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078a4:	4318      	orrgt	r0, r3
 80078a6:	fa06 f003 	lslle.w	r0, r6, r3
 80078aa:	f7f8 fd9b 	bl	80003e4 <__aeabi_ui2d>
 80078ae:	2301      	movs	r3, #1
 80078b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80078b4:	3c01      	subs	r4, #1
 80078b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80078b8:	e76f      	b.n	800779a <_dtoa_r+0x112>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e7b2      	b.n	8007824 <_dtoa_r+0x19c>
 80078be:	900f      	str	r0, [sp, #60]	; 0x3c
 80078c0:	e7b1      	b.n	8007826 <_dtoa_r+0x19e>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	eba3 030a 	sub.w	r3, r3, sl
 80078c8:	9306      	str	r3, [sp, #24]
 80078ca:	f1ca 0300 	rsb	r3, sl, #0
 80078ce:	930a      	str	r3, [sp, #40]	; 0x28
 80078d0:	2300      	movs	r3, #0
 80078d2:	930e      	str	r3, [sp, #56]	; 0x38
 80078d4:	e7be      	b.n	8007854 <_dtoa_r+0x1cc>
 80078d6:	2300      	movs	r3, #0
 80078d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dc58      	bgt.n	8007992 <_dtoa_r+0x30a>
 80078e0:	f04f 0901 	mov.w	r9, #1
 80078e4:	464b      	mov	r3, r9
 80078e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80078ea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80078ee:	2200      	movs	r2, #0
 80078f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80078f2:	6042      	str	r2, [r0, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	f102 0614 	add.w	r6, r2, #20
 80078fa:	429e      	cmp	r6, r3
 80078fc:	6841      	ldr	r1, [r0, #4]
 80078fe:	d94e      	bls.n	800799e <_dtoa_r+0x316>
 8007900:	4628      	mov	r0, r5
 8007902:	f001 f873 	bl	80089ec <_Balloc>
 8007906:	9003      	str	r0, [sp, #12]
 8007908:	2800      	cmp	r0, #0
 800790a:	d14c      	bne.n	80079a6 <_dtoa_r+0x31e>
 800790c:	4602      	mov	r2, r0
 800790e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007912:	4b17      	ldr	r3, [pc, #92]	; (8007970 <_dtoa_r+0x2e8>)
 8007914:	e6cc      	b.n	80076b0 <_dtoa_r+0x28>
 8007916:	2301      	movs	r3, #1
 8007918:	e7de      	b.n	80078d8 <_dtoa_r+0x250>
 800791a:	2300      	movs	r3, #0
 800791c:	930b      	str	r3, [sp, #44]	; 0x2c
 800791e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007920:	eb0a 0903 	add.w	r9, sl, r3
 8007924:	f109 0301 	add.w	r3, r9, #1
 8007928:	2b01      	cmp	r3, #1
 800792a:	9308      	str	r3, [sp, #32]
 800792c:	bfb8      	it	lt
 800792e:	2301      	movlt	r3, #1
 8007930:	e7dd      	b.n	80078ee <_dtoa_r+0x266>
 8007932:	2301      	movs	r3, #1
 8007934:	e7f2      	b.n	800791c <_dtoa_r+0x294>
 8007936:	bf00      	nop
 8007938:	636f4361 	.word	0x636f4361
 800793c:	3fd287a7 	.word	0x3fd287a7
 8007940:	8b60c8b3 	.word	0x8b60c8b3
 8007944:	3fc68a28 	.word	0x3fc68a28
 8007948:	509f79fb 	.word	0x509f79fb
 800794c:	3fd34413 	.word	0x3fd34413
 8007950:	0800ae60 	.word	0x0800ae60
 8007954:	0800b01e 	.word	0x0800b01e
 8007958:	7ff00000 	.word	0x7ff00000
 800795c:	0800b01a 	.word	0x0800b01a
 8007960:	0800b011 	.word	0x0800b011
 8007964:	0800b272 	.word	0x0800b272
 8007968:	3ff80000 	.word	0x3ff80000
 800796c:	0800b188 	.word	0x0800b188
 8007970:	0800b079 	.word	0x0800b079
 8007974:	2401      	movs	r4, #1
 8007976:	2300      	movs	r3, #0
 8007978:	940b      	str	r4, [sp, #44]	; 0x2c
 800797a:	9322      	str	r3, [sp, #136]	; 0x88
 800797c:	f04f 39ff 	mov.w	r9, #4294967295
 8007980:	2200      	movs	r2, #0
 8007982:	2312      	movs	r3, #18
 8007984:	f8cd 9020 	str.w	r9, [sp, #32]
 8007988:	9223      	str	r2, [sp, #140]	; 0x8c
 800798a:	e7b0      	b.n	80078ee <_dtoa_r+0x266>
 800798c:	2301      	movs	r3, #1
 800798e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007990:	e7f4      	b.n	800797c <_dtoa_r+0x2f4>
 8007992:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007996:	464b      	mov	r3, r9
 8007998:	f8cd 9020 	str.w	r9, [sp, #32]
 800799c:	e7a7      	b.n	80078ee <_dtoa_r+0x266>
 800799e:	3101      	adds	r1, #1
 80079a0:	6041      	str	r1, [r0, #4]
 80079a2:	0052      	lsls	r2, r2, #1
 80079a4:	e7a7      	b.n	80078f6 <_dtoa_r+0x26e>
 80079a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079a8:	9a03      	ldr	r2, [sp, #12]
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	2b0e      	cmp	r3, #14
 80079b0:	f200 80a8 	bhi.w	8007b04 <_dtoa_r+0x47c>
 80079b4:	2c00      	cmp	r4, #0
 80079b6:	f000 80a5 	beq.w	8007b04 <_dtoa_r+0x47c>
 80079ba:	f1ba 0f00 	cmp.w	sl, #0
 80079be:	dd34      	ble.n	8007a2a <_dtoa_r+0x3a2>
 80079c0:	4a9a      	ldr	r2, [pc, #616]	; (8007c2c <_dtoa_r+0x5a4>)
 80079c2:	f00a 030f 	and.w	r3, sl, #15
 80079c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80079ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80079da:	d016      	beq.n	8007a0a <_dtoa_r+0x382>
 80079dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079e0:	4b93      	ldr	r3, [pc, #588]	; (8007c30 <_dtoa_r+0x5a8>)
 80079e2:	2703      	movs	r7, #3
 80079e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e8:	f7f8 fea0 	bl	800072c <__aeabi_ddiv>
 80079ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079f0:	f004 040f 	and.w	r4, r4, #15
 80079f4:	4e8e      	ldr	r6, [pc, #568]	; (8007c30 <_dtoa_r+0x5a8>)
 80079f6:	b954      	cbnz	r4, 8007a0e <_dtoa_r+0x386>
 80079f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a00:	f7f8 fe94 	bl	800072c <__aeabi_ddiv>
 8007a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a08:	e029      	b.n	8007a5e <_dtoa_r+0x3d6>
 8007a0a:	2702      	movs	r7, #2
 8007a0c:	e7f2      	b.n	80079f4 <_dtoa_r+0x36c>
 8007a0e:	07e1      	lsls	r1, r4, #31
 8007a10:	d508      	bpl.n	8007a24 <_dtoa_r+0x39c>
 8007a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a1a:	f7f8 fd5d 	bl	80004d8 <__aeabi_dmul>
 8007a1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a22:	3701      	adds	r7, #1
 8007a24:	1064      	asrs	r4, r4, #1
 8007a26:	3608      	adds	r6, #8
 8007a28:	e7e5      	b.n	80079f6 <_dtoa_r+0x36e>
 8007a2a:	f000 80a5 	beq.w	8007b78 <_dtoa_r+0x4f0>
 8007a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a32:	f1ca 0400 	rsb	r4, sl, #0
 8007a36:	4b7d      	ldr	r3, [pc, #500]	; (8007c2c <_dtoa_r+0x5a4>)
 8007a38:	f004 020f 	and.w	r2, r4, #15
 8007a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	f7f8 fd48 	bl	80004d8 <__aeabi_dmul>
 8007a48:	2702      	movs	r7, #2
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a50:	4e77      	ldr	r6, [pc, #476]	; (8007c30 <_dtoa_r+0x5a8>)
 8007a52:	1124      	asrs	r4, r4, #4
 8007a54:	2c00      	cmp	r4, #0
 8007a56:	f040 8084 	bne.w	8007b62 <_dtoa_r+0x4da>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1d2      	bne.n	8007a04 <_dtoa_r+0x37c>
 8007a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 808b 	beq.w	8007b7c <_dtoa_r+0x4f4>
 8007a66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a72:	2200      	movs	r2, #0
 8007a74:	4b6f      	ldr	r3, [pc, #444]	; (8007c34 <_dtoa_r+0x5ac>)
 8007a76:	f7f8 ffa1 	bl	80009bc <__aeabi_dcmplt>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d07e      	beq.n	8007b7c <_dtoa_r+0x4f4>
 8007a7e:	9b08      	ldr	r3, [sp, #32]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d07b      	beq.n	8007b7c <_dtoa_r+0x4f4>
 8007a84:	f1b9 0f00 	cmp.w	r9, #0
 8007a88:	dd38      	ble.n	8007afc <_dtoa_r+0x474>
 8007a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4b69      	ldr	r3, [pc, #420]	; (8007c38 <_dtoa_r+0x5b0>)
 8007a92:	f7f8 fd21 	bl	80004d8 <__aeabi_dmul>
 8007a96:	464c      	mov	r4, r9
 8007a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a9c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007aa0:	3701      	adds	r7, #1
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	f7f8 fcae 	bl	8000404 <__aeabi_i2d>
 8007aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aac:	f7f8 fd14 	bl	80004d8 <__aeabi_dmul>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4b62      	ldr	r3, [pc, #392]	; (8007c3c <_dtoa_r+0x5b4>)
 8007ab4:	f7f8 fb5a 	bl	800016c <__adddf3>
 8007ab8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007abc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ac0:	9611      	str	r6, [sp, #68]	; 0x44
 8007ac2:	2c00      	cmp	r4, #0
 8007ac4:	d15d      	bne.n	8007b82 <_dtoa_r+0x4fa>
 8007ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aca:	2200      	movs	r2, #0
 8007acc:	4b5c      	ldr	r3, [pc, #368]	; (8007c40 <_dtoa_r+0x5b8>)
 8007ace:	f7f8 fb4b 	bl	8000168 <__aeabi_dsub>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ada:	4633      	mov	r3, r6
 8007adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ade:	f7f8 ff8b 	bl	80009f8 <__aeabi_dcmpgt>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	f040 829c 	bne.w	8008020 <_dtoa_r+0x998>
 8007ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007af2:	f7f8 ff63 	bl	80009bc <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f040 8290 	bne.w	800801c <_dtoa_r+0x994>
 8007afc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007b00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f2c0 8152 	blt.w	8007db0 <_dtoa_r+0x728>
 8007b0c:	f1ba 0f0e 	cmp.w	sl, #14
 8007b10:	f300 814e 	bgt.w	8007db0 <_dtoa_r+0x728>
 8007b14:	4b45      	ldr	r3, [pc, #276]	; (8007c2c <_dtoa_r+0x5a4>)
 8007b16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f280 80db 	bge.w	8007ce0 <_dtoa_r+0x658>
 8007b2a:	9b08      	ldr	r3, [sp, #32]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f300 80d7 	bgt.w	8007ce0 <_dtoa_r+0x658>
 8007b32:	f040 8272 	bne.w	800801a <_dtoa_r+0x992>
 8007b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	4b40      	ldr	r3, [pc, #256]	; (8007c40 <_dtoa_r+0x5b8>)
 8007b3e:	f7f8 fccb 	bl	80004d8 <__aeabi_dmul>
 8007b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b46:	f7f8 ff4d 	bl	80009e4 <__aeabi_dcmpge>
 8007b4a:	9c08      	ldr	r4, [sp, #32]
 8007b4c:	4626      	mov	r6, r4
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f040 8248 	bne.w	8007fe4 <_dtoa_r+0x95c>
 8007b54:	2331      	movs	r3, #49	; 0x31
 8007b56:	9f03      	ldr	r7, [sp, #12]
 8007b58:	f10a 0a01 	add.w	sl, sl, #1
 8007b5c:	f807 3b01 	strb.w	r3, [r7], #1
 8007b60:	e244      	b.n	8007fec <_dtoa_r+0x964>
 8007b62:	07e2      	lsls	r2, r4, #31
 8007b64:	d505      	bpl.n	8007b72 <_dtoa_r+0x4ea>
 8007b66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b6a:	f7f8 fcb5 	bl	80004d8 <__aeabi_dmul>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	3701      	adds	r7, #1
 8007b72:	1064      	asrs	r4, r4, #1
 8007b74:	3608      	adds	r6, #8
 8007b76:	e76d      	b.n	8007a54 <_dtoa_r+0x3cc>
 8007b78:	2702      	movs	r7, #2
 8007b7a:	e770      	b.n	8007a5e <_dtoa_r+0x3d6>
 8007b7c:	46d0      	mov	r8, sl
 8007b7e:	9c08      	ldr	r4, [sp, #32]
 8007b80:	e78f      	b.n	8007aa2 <_dtoa_r+0x41a>
 8007b82:	9903      	ldr	r1, [sp, #12]
 8007b84:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <_dtoa_r+0x5a4>)
 8007b86:	4421      	add	r1, r4
 8007b88:	9112      	str	r1, [sp, #72]	; 0x48
 8007b8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	d055      	beq.n	8007c48 <_dtoa_r+0x5c0>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	4929      	ldr	r1, [pc, #164]	; (8007c44 <_dtoa_r+0x5bc>)
 8007ba0:	f7f8 fdc4 	bl	800072c <__aeabi_ddiv>
 8007ba4:	463b      	mov	r3, r7
 8007ba6:	4632      	mov	r2, r6
 8007ba8:	f7f8 fade 	bl	8000168 <__aeabi_dsub>
 8007bac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bb0:	9f03      	ldr	r7, [sp, #12]
 8007bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bb6:	f7f8 ff3f 	bl	8000a38 <__aeabi_d2iz>
 8007bba:	4604      	mov	r4, r0
 8007bbc:	f7f8 fc22 	bl	8000404 <__aeabi_i2d>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc8:	f7f8 face 	bl	8000168 <__aeabi_dsub>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	3430      	adds	r4, #48	; 0x30
 8007bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bda:	f807 4b01 	strb.w	r4, [r7], #1
 8007bde:	f7f8 feed 	bl	80009bc <__aeabi_dcmplt>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d174      	bne.n	8007cd0 <_dtoa_r+0x648>
 8007be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bea:	2000      	movs	r0, #0
 8007bec:	4911      	ldr	r1, [pc, #68]	; (8007c34 <_dtoa_r+0x5ac>)
 8007bee:	f7f8 fabb 	bl	8000168 <__aeabi_dsub>
 8007bf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bf6:	f7f8 fee1 	bl	80009bc <__aeabi_dcmplt>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f040 80b7 	bne.w	8007d6e <_dtoa_r+0x6e6>
 8007c00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c02:	429f      	cmp	r7, r3
 8007c04:	f43f af7a 	beq.w	8007afc <_dtoa_r+0x474>
 8007c08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <_dtoa_r+0x5b0>)
 8007c10:	f7f8 fc62 	bl	80004d8 <__aeabi_dmul>
 8007c14:	2200      	movs	r2, #0
 8007c16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <_dtoa_r+0x5b0>)
 8007c20:	f7f8 fc5a 	bl	80004d8 <__aeabi_dmul>
 8007c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c28:	e7c3      	b.n	8007bb2 <_dtoa_r+0x52a>
 8007c2a:	bf00      	nop
 8007c2c:	0800b188 	.word	0x0800b188
 8007c30:	0800b160 	.word	0x0800b160
 8007c34:	3ff00000 	.word	0x3ff00000
 8007c38:	40240000 	.word	0x40240000
 8007c3c:	401c0000 	.word	0x401c0000
 8007c40:	40140000 	.word	0x40140000
 8007c44:	3fe00000 	.word	0x3fe00000
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f7f8 fc44 	bl	80004d8 <__aeabi_dmul>
 8007c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c56:	9c03      	ldr	r4, [sp, #12]
 8007c58:	9314      	str	r3, [sp, #80]	; 0x50
 8007c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c5e:	f7f8 feeb 	bl	8000a38 <__aeabi_d2iz>
 8007c62:	9015      	str	r0, [sp, #84]	; 0x54
 8007c64:	f7f8 fbce 	bl	8000404 <__aeabi_i2d>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c70:	f7f8 fa7a 	bl	8000168 <__aeabi_dsub>
 8007c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c76:	4606      	mov	r6, r0
 8007c78:	3330      	adds	r3, #48	; 0x30
 8007c7a:	f804 3b01 	strb.w	r3, [r4], #1
 8007c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c80:	460f      	mov	r7, r1
 8007c82:	429c      	cmp	r4, r3
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	d124      	bne.n	8007cd4 <_dtoa_r+0x64c>
 8007c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c8e:	4bb0      	ldr	r3, [pc, #704]	; (8007f50 <_dtoa_r+0x8c8>)
 8007c90:	f7f8 fa6c 	bl	800016c <__adddf3>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4630      	mov	r0, r6
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	f7f8 feac 	bl	80009f8 <__aeabi_dcmpgt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d163      	bne.n	8007d6c <_dtoa_r+0x6e4>
 8007ca4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ca8:	2000      	movs	r0, #0
 8007caa:	49a9      	ldr	r1, [pc, #676]	; (8007f50 <_dtoa_r+0x8c8>)
 8007cac:	f7f8 fa5c 	bl	8000168 <__aeabi_dsub>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fe80 	bl	80009bc <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f43f af1d 	beq.w	8007afc <_dtoa_r+0x474>
 8007cc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007cc4:	1e7b      	subs	r3, r7, #1
 8007cc6:	9314      	str	r3, [sp, #80]	; 0x50
 8007cc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d0f8      	beq.n	8007cc2 <_dtoa_r+0x63a>
 8007cd0:	46c2      	mov	sl, r8
 8007cd2:	e03b      	b.n	8007d4c <_dtoa_r+0x6c4>
 8007cd4:	4b9f      	ldr	r3, [pc, #636]	; (8007f54 <_dtoa_r+0x8cc>)
 8007cd6:	f7f8 fbff 	bl	80004d8 <__aeabi_dmul>
 8007cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cde:	e7bc      	b.n	8007c5a <_dtoa_r+0x5d2>
 8007ce0:	9f03      	ldr	r7, [sp, #12]
 8007ce2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 fd1d 	bl	800072c <__aeabi_ddiv>
 8007cf2:	f7f8 fea1 	bl	8000a38 <__aeabi_d2iz>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	f7f8 fb84 	bl	8000404 <__aeabi_i2d>
 8007cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d00:	f7f8 fbea 	bl	80004d8 <__aeabi_dmul>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4640      	mov	r0, r8
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	f7f8 fa2c 	bl	8000168 <__aeabi_dsub>
 8007d10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007d14:	f807 6b01 	strb.w	r6, [r7], #1
 8007d18:	9e03      	ldr	r6, [sp, #12]
 8007d1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007d1e:	1bbe      	subs	r6, r7, r6
 8007d20:	45b4      	cmp	ip, r6
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	d136      	bne.n	8007d96 <_dtoa_r+0x70e>
 8007d28:	f7f8 fa20 	bl	800016c <__adddf3>
 8007d2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d30:	4680      	mov	r8, r0
 8007d32:	4689      	mov	r9, r1
 8007d34:	f7f8 fe60 	bl	80009f8 <__aeabi_dcmpgt>
 8007d38:	bb58      	cbnz	r0, 8007d92 <_dtoa_r+0x70a>
 8007d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fe31 	bl	80009a8 <__aeabi_dcmpeq>
 8007d46:	b108      	cbz	r0, 8007d4c <_dtoa_r+0x6c4>
 8007d48:	07e1      	lsls	r1, r4, #31
 8007d4a:	d422      	bmi.n	8007d92 <_dtoa_r+0x70a>
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	4659      	mov	r1, fp
 8007d50:	f000 fe8c 	bl	8008a6c <_Bfree>
 8007d54:	2300      	movs	r3, #0
 8007d56:	703b      	strb	r3, [r7, #0]
 8007d58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d5a:	f10a 0001 	add.w	r0, sl, #1
 8007d5e:	6018      	str	r0, [r3, #0]
 8007d60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f43f acde 	beq.w	8007724 <_dtoa_r+0x9c>
 8007d68:	601f      	str	r7, [r3, #0]
 8007d6a:	e4db      	b.n	8007724 <_dtoa_r+0x9c>
 8007d6c:	4627      	mov	r7, r4
 8007d6e:	463b      	mov	r3, r7
 8007d70:	461f      	mov	r7, r3
 8007d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d76:	2a39      	cmp	r2, #57	; 0x39
 8007d78:	d107      	bne.n	8007d8a <_dtoa_r+0x702>
 8007d7a:	9a03      	ldr	r2, [sp, #12]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1f7      	bne.n	8007d70 <_dtoa_r+0x6e8>
 8007d80:	2230      	movs	r2, #48	; 0x30
 8007d82:	9903      	ldr	r1, [sp, #12]
 8007d84:	f108 0801 	add.w	r8, r8, #1
 8007d88:	700a      	strb	r2, [r1, #0]
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	3201      	adds	r2, #1
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e79e      	b.n	8007cd0 <_dtoa_r+0x648>
 8007d92:	46d0      	mov	r8, sl
 8007d94:	e7eb      	b.n	8007d6e <_dtoa_r+0x6e6>
 8007d96:	2200      	movs	r2, #0
 8007d98:	4b6e      	ldr	r3, [pc, #440]	; (8007f54 <_dtoa_r+0x8cc>)
 8007d9a:	f7f8 fb9d 	bl	80004d8 <__aeabi_dmul>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	4680      	mov	r8, r0
 8007da4:	4689      	mov	r9, r1
 8007da6:	f7f8 fdff 	bl	80009a8 <__aeabi_dcmpeq>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d09b      	beq.n	8007ce6 <_dtoa_r+0x65e>
 8007dae:	e7cd      	b.n	8007d4c <_dtoa_r+0x6c4>
 8007db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	f000 80d0 	beq.w	8007f58 <_dtoa_r+0x8d0>
 8007db8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007dba:	2a01      	cmp	r2, #1
 8007dbc:	f300 80ae 	bgt.w	8007f1c <_dtoa_r+0x894>
 8007dc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	f000 80a6 	beq.w	8007f14 <_dtoa_r+0x88c>
 8007dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dce:	9f06      	ldr	r7, [sp, #24]
 8007dd0:	9a06      	ldr	r2, [sp, #24]
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	441a      	add	r2, r3
 8007dd6:	9206      	str	r2, [sp, #24]
 8007dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dda:	4628      	mov	r0, r5
 8007ddc:	441a      	add	r2, r3
 8007dde:	9209      	str	r2, [sp, #36]	; 0x24
 8007de0:	f000 ff44 	bl	8008c6c <__i2b>
 8007de4:	4606      	mov	r6, r0
 8007de6:	2f00      	cmp	r7, #0
 8007de8:	dd0c      	ble.n	8007e04 <_dtoa_r+0x77c>
 8007dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dd09      	ble.n	8007e04 <_dtoa_r+0x77c>
 8007df0:	42bb      	cmp	r3, r7
 8007df2:	bfa8      	it	ge
 8007df4:	463b      	movge	r3, r7
 8007df6:	9a06      	ldr	r2, [sp, #24]
 8007df8:	1aff      	subs	r7, r7, r3
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	9206      	str	r2, [sp, #24]
 8007dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	9309      	str	r3, [sp, #36]	; 0x24
 8007e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e06:	b1f3      	cbz	r3, 8007e46 <_dtoa_r+0x7be>
 8007e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80a8 	beq.w	8007f60 <_dtoa_r+0x8d8>
 8007e10:	2c00      	cmp	r4, #0
 8007e12:	dd10      	ble.n	8007e36 <_dtoa_r+0x7ae>
 8007e14:	4631      	mov	r1, r6
 8007e16:	4622      	mov	r2, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 ffe5 	bl	8008de8 <__pow5mult>
 8007e1e:	465a      	mov	r2, fp
 8007e20:	4601      	mov	r1, r0
 8007e22:	4606      	mov	r6, r0
 8007e24:	4628      	mov	r0, r5
 8007e26:	f000 ff37 	bl	8008c98 <__multiply>
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fe1c 	bl	8008a6c <_Bfree>
 8007e34:	46c3      	mov	fp, r8
 8007e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e38:	1b1a      	subs	r2, r3, r4
 8007e3a:	d004      	beq.n	8007e46 <_dtoa_r+0x7be>
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 ffd2 	bl	8008de8 <__pow5mult>
 8007e44:	4683      	mov	fp, r0
 8007e46:	2101      	movs	r1, #1
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 ff0f 	bl	8008c6c <__i2b>
 8007e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e50:	4604      	mov	r4, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f340 8086 	ble.w	8007f64 <_dtoa_r+0x8dc>
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 ffc3 	bl	8008de8 <__pow5mult>
 8007e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e64:	4604      	mov	r4, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	dd7f      	ble.n	8007f6a <_dtoa_r+0x8e2>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e74:	6918      	ldr	r0, [r3, #16]
 8007e76:	f000 feab 	bl	8008bd0 <__hi0bits>
 8007e7a:	f1c0 0020 	rsb	r0, r0, #32
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	4418      	add	r0, r3
 8007e82:	f010 001f 	ands.w	r0, r0, #31
 8007e86:	f000 8092 	beq.w	8007fae <_dtoa_r+0x926>
 8007e8a:	f1c0 0320 	rsb	r3, r0, #32
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	f340 808a 	ble.w	8007fa8 <_dtoa_r+0x920>
 8007e94:	f1c0 001c 	rsb	r0, r0, #28
 8007e98:	9b06      	ldr	r3, [sp, #24]
 8007e9a:	4407      	add	r7, r0
 8007e9c:	4403      	add	r3, r0
 8007e9e:	9306      	str	r3, [sp, #24]
 8007ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea2:	4403      	add	r3, r0
 8007ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dd05      	ble.n	8007eb8 <_dtoa_r+0x830>
 8007eac:	4659      	mov	r1, fp
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 fff3 	bl	8008e9c <__lshift>
 8007eb6:	4683      	mov	fp, r0
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dd05      	ble.n	8007eca <_dtoa_r+0x842>
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 ffea 	bl	8008e9c <__lshift>
 8007ec8:	4604      	mov	r4, r0
 8007eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d070      	beq.n	8007fb2 <_dtoa_r+0x92a>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	f001 f852 	bl	8008f7c <__mcmp>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	da6a      	bge.n	8007fb2 <_dtoa_r+0x92a>
 8007edc:	2300      	movs	r3, #0
 8007ede:	4659      	mov	r1, fp
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 fde4 	bl	8008ab0 <__multadd>
 8007ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eea:	4683      	mov	fp, r0
 8007eec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8194 	beq.w	800821e <_dtoa_r+0xb96>
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	2300      	movs	r3, #0
 8007efa:	220a      	movs	r2, #10
 8007efc:	4628      	mov	r0, r5
 8007efe:	f000 fdd7 	bl	8008ab0 <__multadd>
 8007f02:	f1b9 0f00 	cmp.w	r9, #0
 8007f06:	4606      	mov	r6, r0
 8007f08:	f300 8093 	bgt.w	8008032 <_dtoa_r+0x9aa>
 8007f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	dc57      	bgt.n	8007fc2 <_dtoa_r+0x93a>
 8007f12:	e08e      	b.n	8008032 <_dtoa_r+0x9aa>
 8007f14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f1a:	e757      	b.n	8007dcc <_dtoa_r+0x744>
 8007f1c:	9b08      	ldr	r3, [sp, #32]
 8007f1e:	1e5c      	subs	r4, r3, #1
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	bfb7      	itett	lt
 8007f26:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f28:	1b1c      	subge	r4, r3, r4
 8007f2a:	1ae2      	sublt	r2, r4, r3
 8007f2c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f2e:	bfbe      	ittt	lt
 8007f30:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007f32:	189b      	addlt	r3, r3, r2
 8007f34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f36:	9b08      	ldr	r3, [sp, #32]
 8007f38:	bfb8      	it	lt
 8007f3a:	2400      	movlt	r4, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bfbb      	ittet	lt
 8007f40:	9b06      	ldrlt	r3, [sp, #24]
 8007f42:	9a08      	ldrlt	r2, [sp, #32]
 8007f44:	9f06      	ldrge	r7, [sp, #24]
 8007f46:	1a9f      	sublt	r7, r3, r2
 8007f48:	bfac      	ite	ge
 8007f4a:	9b08      	ldrge	r3, [sp, #32]
 8007f4c:	2300      	movlt	r3, #0
 8007f4e:	e73f      	b.n	8007dd0 <_dtoa_r+0x748>
 8007f50:	3fe00000 	.word	0x3fe00000
 8007f54:	40240000 	.word	0x40240000
 8007f58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f5a:	9f06      	ldr	r7, [sp, #24]
 8007f5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007f5e:	e742      	b.n	8007de6 <_dtoa_r+0x75e>
 8007f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f62:	e76b      	b.n	8007e3c <_dtoa_r+0x7b4>
 8007f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	dc19      	bgt.n	8007f9e <_dtoa_r+0x916>
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	b9bb      	cbnz	r3, 8007f9e <_dtoa_r+0x916>
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f74:	b99b      	cbnz	r3, 8007f9e <_dtoa_r+0x916>
 8007f76:	9b05      	ldr	r3, [sp, #20]
 8007f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	0d1b      	lsrs	r3, r3, #20
 8007f7e:	051b      	lsls	r3, r3, #20
 8007f80:	b183      	cbz	r3, 8007fa4 <_dtoa_r+0x91c>
 8007f82:	f04f 0801 	mov.w	r8, #1
 8007f86:	9b06      	ldr	r3, [sp, #24]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	9306      	str	r3, [sp, #24]
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9309      	str	r3, [sp, #36]	; 0x24
 8007f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f47f af6a 	bne.w	8007e6e <_dtoa_r+0x7e6>
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	e76f      	b.n	8007e7e <_dtoa_r+0x7f6>
 8007f9e:	f04f 0800 	mov.w	r8, #0
 8007fa2:	e7f6      	b.n	8007f92 <_dtoa_r+0x90a>
 8007fa4:	4698      	mov	r8, r3
 8007fa6:	e7f4      	b.n	8007f92 <_dtoa_r+0x90a>
 8007fa8:	f43f af7d 	beq.w	8007ea6 <_dtoa_r+0x81e>
 8007fac:	4618      	mov	r0, r3
 8007fae:	301c      	adds	r0, #28
 8007fb0:	e772      	b.n	8007e98 <_dtoa_r+0x810>
 8007fb2:	9b08      	ldr	r3, [sp, #32]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dc36      	bgt.n	8008026 <_dtoa_r+0x99e>
 8007fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	dd33      	ble.n	8008026 <_dtoa_r+0x99e>
 8007fbe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fc2:	f1b9 0f00 	cmp.w	r9, #0
 8007fc6:	d10d      	bne.n	8007fe4 <_dtoa_r+0x95c>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	464b      	mov	r3, r9
 8007fcc:	2205      	movs	r2, #5
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 fd6e 	bl	8008ab0 <__multadd>
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4658      	mov	r0, fp
 8007fda:	f000 ffcf 	bl	8008f7c <__mcmp>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f73f adb8 	bgt.w	8007b54 <_dtoa_r+0x4cc>
 8007fe4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fe6:	9f03      	ldr	r7, [sp, #12]
 8007fe8:	ea6f 0a03 	mvn.w	sl, r3
 8007fec:	f04f 0800 	mov.w	r8, #0
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 fd3a 	bl	8008a6c <_Bfree>
 8007ff8:	2e00      	cmp	r6, #0
 8007ffa:	f43f aea7 	beq.w	8007d4c <_dtoa_r+0x6c4>
 8007ffe:	f1b8 0f00 	cmp.w	r8, #0
 8008002:	d005      	beq.n	8008010 <_dtoa_r+0x988>
 8008004:	45b0      	cmp	r8, r6
 8008006:	d003      	beq.n	8008010 <_dtoa_r+0x988>
 8008008:	4641      	mov	r1, r8
 800800a:	4628      	mov	r0, r5
 800800c:	f000 fd2e 	bl	8008a6c <_Bfree>
 8008010:	4631      	mov	r1, r6
 8008012:	4628      	mov	r0, r5
 8008014:	f000 fd2a 	bl	8008a6c <_Bfree>
 8008018:	e698      	b.n	8007d4c <_dtoa_r+0x6c4>
 800801a:	2400      	movs	r4, #0
 800801c:	4626      	mov	r6, r4
 800801e:	e7e1      	b.n	8007fe4 <_dtoa_r+0x95c>
 8008020:	46c2      	mov	sl, r8
 8008022:	4626      	mov	r6, r4
 8008024:	e596      	b.n	8007b54 <_dtoa_r+0x4cc>
 8008026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80fd 	beq.w	800822c <_dtoa_r+0xba4>
 8008032:	2f00      	cmp	r7, #0
 8008034:	dd05      	ble.n	8008042 <_dtoa_r+0x9ba>
 8008036:	4631      	mov	r1, r6
 8008038:	463a      	mov	r2, r7
 800803a:	4628      	mov	r0, r5
 800803c:	f000 ff2e 	bl	8008e9c <__lshift>
 8008040:	4606      	mov	r6, r0
 8008042:	f1b8 0f00 	cmp.w	r8, #0
 8008046:	d05c      	beq.n	8008102 <_dtoa_r+0xa7a>
 8008048:	4628      	mov	r0, r5
 800804a:	6871      	ldr	r1, [r6, #4]
 800804c:	f000 fcce 	bl	80089ec <_Balloc>
 8008050:	4607      	mov	r7, r0
 8008052:	b928      	cbnz	r0, 8008060 <_dtoa_r+0x9d8>
 8008054:	4602      	mov	r2, r0
 8008056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800805a:	4b7f      	ldr	r3, [pc, #508]	; (8008258 <_dtoa_r+0xbd0>)
 800805c:	f7ff bb28 	b.w	80076b0 <_dtoa_r+0x28>
 8008060:	6932      	ldr	r2, [r6, #16]
 8008062:	f106 010c 	add.w	r1, r6, #12
 8008066:	3202      	adds	r2, #2
 8008068:	0092      	lsls	r2, r2, #2
 800806a:	300c      	adds	r0, #12
 800806c:	f000 fcb0 	bl	80089d0 <memcpy>
 8008070:	2201      	movs	r2, #1
 8008072:	4639      	mov	r1, r7
 8008074:	4628      	mov	r0, r5
 8008076:	f000 ff11 	bl	8008e9c <__lshift>
 800807a:	46b0      	mov	r8, r6
 800807c:	4606      	mov	r6, r0
 800807e:	9b03      	ldr	r3, [sp, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	9308      	str	r3, [sp, #32]
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	444b      	add	r3, r9
 8008088:	930a      	str	r3, [sp, #40]	; 0x28
 800808a:	9b04      	ldr	r3, [sp, #16]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	9309      	str	r3, [sp, #36]	; 0x24
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	4621      	mov	r1, r4
 8008096:	3b01      	subs	r3, #1
 8008098:	4658      	mov	r0, fp
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	f7ff fa68 	bl	8007570 <quorem>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4641      	mov	r1, r8
 80080a4:	3330      	adds	r3, #48	; 0x30
 80080a6:	9006      	str	r0, [sp, #24]
 80080a8:	4658      	mov	r0, fp
 80080aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ac:	f000 ff66 	bl	8008f7c <__mcmp>
 80080b0:	4632      	mov	r2, r6
 80080b2:	4681      	mov	r9, r0
 80080b4:	4621      	mov	r1, r4
 80080b6:	4628      	mov	r0, r5
 80080b8:	f000 ff7c 	bl	8008fb4 <__mdiff>
 80080bc:	68c2      	ldr	r2, [r0, #12]
 80080be:	4607      	mov	r7, r0
 80080c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c2:	bb02      	cbnz	r2, 8008106 <_dtoa_r+0xa7e>
 80080c4:	4601      	mov	r1, r0
 80080c6:	4658      	mov	r0, fp
 80080c8:	f000 ff58 	bl	8008f7c <__mcmp>
 80080cc:	4602      	mov	r2, r0
 80080ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d0:	4639      	mov	r1, r7
 80080d2:	4628      	mov	r0, r5
 80080d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80080d8:	f000 fcc8 	bl	8008a6c <_Bfree>
 80080dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080e0:	9f08      	ldr	r7, [sp, #32]
 80080e2:	ea43 0102 	orr.w	r1, r3, r2
 80080e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e8:	430b      	orrs	r3, r1
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	d10d      	bne.n	800810a <_dtoa_r+0xa82>
 80080ee:	2b39      	cmp	r3, #57	; 0x39
 80080f0:	d029      	beq.n	8008146 <_dtoa_r+0xabe>
 80080f2:	f1b9 0f00 	cmp.w	r9, #0
 80080f6:	dd01      	ble.n	80080fc <_dtoa_r+0xa74>
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	3331      	adds	r3, #49	; 0x31
 80080fc:	9a04      	ldr	r2, [sp, #16]
 80080fe:	7013      	strb	r3, [r2, #0]
 8008100:	e776      	b.n	8007ff0 <_dtoa_r+0x968>
 8008102:	4630      	mov	r0, r6
 8008104:	e7b9      	b.n	800807a <_dtoa_r+0x9f2>
 8008106:	2201      	movs	r2, #1
 8008108:	e7e2      	b.n	80080d0 <_dtoa_r+0xa48>
 800810a:	f1b9 0f00 	cmp.w	r9, #0
 800810e:	db06      	blt.n	800811e <_dtoa_r+0xa96>
 8008110:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008112:	ea41 0909 	orr.w	r9, r1, r9
 8008116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008118:	ea59 0101 	orrs.w	r1, r9, r1
 800811c:	d120      	bne.n	8008160 <_dtoa_r+0xad8>
 800811e:	2a00      	cmp	r2, #0
 8008120:	ddec      	ble.n	80080fc <_dtoa_r+0xa74>
 8008122:	4659      	mov	r1, fp
 8008124:	2201      	movs	r2, #1
 8008126:	4628      	mov	r0, r5
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	f000 feb7 	bl	8008e9c <__lshift>
 800812e:	4621      	mov	r1, r4
 8008130:	4683      	mov	fp, r0
 8008132:	f000 ff23 	bl	8008f7c <__mcmp>
 8008136:	2800      	cmp	r0, #0
 8008138:	9b08      	ldr	r3, [sp, #32]
 800813a:	dc02      	bgt.n	8008142 <_dtoa_r+0xaba>
 800813c:	d1de      	bne.n	80080fc <_dtoa_r+0xa74>
 800813e:	07da      	lsls	r2, r3, #31
 8008140:	d5dc      	bpl.n	80080fc <_dtoa_r+0xa74>
 8008142:	2b39      	cmp	r3, #57	; 0x39
 8008144:	d1d8      	bne.n	80080f8 <_dtoa_r+0xa70>
 8008146:	2339      	movs	r3, #57	; 0x39
 8008148:	9a04      	ldr	r2, [sp, #16]
 800814a:	7013      	strb	r3, [r2, #0]
 800814c:	463b      	mov	r3, r7
 800814e:	461f      	mov	r7, r3
 8008150:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008154:	3b01      	subs	r3, #1
 8008156:	2a39      	cmp	r2, #57	; 0x39
 8008158:	d050      	beq.n	80081fc <_dtoa_r+0xb74>
 800815a:	3201      	adds	r2, #1
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e747      	b.n	8007ff0 <_dtoa_r+0x968>
 8008160:	2a00      	cmp	r2, #0
 8008162:	dd03      	ble.n	800816c <_dtoa_r+0xae4>
 8008164:	2b39      	cmp	r3, #57	; 0x39
 8008166:	d0ee      	beq.n	8008146 <_dtoa_r+0xabe>
 8008168:	3301      	adds	r3, #1
 800816a:	e7c7      	b.n	80080fc <_dtoa_r+0xa74>
 800816c:	9a08      	ldr	r2, [sp, #32]
 800816e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008170:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008174:	428a      	cmp	r2, r1
 8008176:	d02a      	beq.n	80081ce <_dtoa_r+0xb46>
 8008178:	4659      	mov	r1, fp
 800817a:	2300      	movs	r3, #0
 800817c:	220a      	movs	r2, #10
 800817e:	4628      	mov	r0, r5
 8008180:	f000 fc96 	bl	8008ab0 <__multadd>
 8008184:	45b0      	cmp	r8, r6
 8008186:	4683      	mov	fp, r0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	f04f 020a 	mov.w	r2, #10
 8008190:	4641      	mov	r1, r8
 8008192:	4628      	mov	r0, r5
 8008194:	d107      	bne.n	80081a6 <_dtoa_r+0xb1e>
 8008196:	f000 fc8b 	bl	8008ab0 <__multadd>
 800819a:	4680      	mov	r8, r0
 800819c:	4606      	mov	r6, r0
 800819e:	9b08      	ldr	r3, [sp, #32]
 80081a0:	3301      	adds	r3, #1
 80081a2:	9308      	str	r3, [sp, #32]
 80081a4:	e775      	b.n	8008092 <_dtoa_r+0xa0a>
 80081a6:	f000 fc83 	bl	8008ab0 <__multadd>
 80081aa:	4631      	mov	r1, r6
 80081ac:	4680      	mov	r8, r0
 80081ae:	2300      	movs	r3, #0
 80081b0:	220a      	movs	r2, #10
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 fc7c 	bl	8008ab0 <__multadd>
 80081b8:	4606      	mov	r6, r0
 80081ba:	e7f0      	b.n	800819e <_dtoa_r+0xb16>
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	bfcc      	ite	gt
 80081c2:	464f      	movgt	r7, r9
 80081c4:	2701      	movle	r7, #1
 80081c6:	f04f 0800 	mov.w	r8, #0
 80081ca:	9a03      	ldr	r2, [sp, #12]
 80081cc:	4417      	add	r7, r2
 80081ce:	4659      	mov	r1, fp
 80081d0:	2201      	movs	r2, #1
 80081d2:	4628      	mov	r0, r5
 80081d4:	9308      	str	r3, [sp, #32]
 80081d6:	f000 fe61 	bl	8008e9c <__lshift>
 80081da:	4621      	mov	r1, r4
 80081dc:	4683      	mov	fp, r0
 80081de:	f000 fecd 	bl	8008f7c <__mcmp>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	dcb2      	bgt.n	800814c <_dtoa_r+0xac4>
 80081e6:	d102      	bne.n	80081ee <_dtoa_r+0xb66>
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	07db      	lsls	r3, r3, #31
 80081ec:	d4ae      	bmi.n	800814c <_dtoa_r+0xac4>
 80081ee:	463b      	mov	r3, r7
 80081f0:	461f      	mov	r7, r3
 80081f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081f6:	2a30      	cmp	r2, #48	; 0x30
 80081f8:	d0fa      	beq.n	80081f0 <_dtoa_r+0xb68>
 80081fa:	e6f9      	b.n	8007ff0 <_dtoa_r+0x968>
 80081fc:	9a03      	ldr	r2, [sp, #12]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d1a5      	bne.n	800814e <_dtoa_r+0xac6>
 8008202:	2331      	movs	r3, #49	; 0x31
 8008204:	f10a 0a01 	add.w	sl, sl, #1
 8008208:	e779      	b.n	80080fe <_dtoa_r+0xa76>
 800820a:	4b14      	ldr	r3, [pc, #80]	; (800825c <_dtoa_r+0xbd4>)
 800820c:	f7ff baa8 	b.w	8007760 <_dtoa_r+0xd8>
 8008210:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008212:	2b00      	cmp	r3, #0
 8008214:	f47f aa81 	bne.w	800771a <_dtoa_r+0x92>
 8008218:	4b11      	ldr	r3, [pc, #68]	; (8008260 <_dtoa_r+0xbd8>)
 800821a:	f7ff baa1 	b.w	8007760 <_dtoa_r+0xd8>
 800821e:	f1b9 0f00 	cmp.w	r9, #0
 8008222:	dc03      	bgt.n	800822c <_dtoa_r+0xba4>
 8008224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008226:	2b02      	cmp	r3, #2
 8008228:	f73f aecb 	bgt.w	8007fc2 <_dtoa_r+0x93a>
 800822c:	9f03      	ldr	r7, [sp, #12]
 800822e:	4621      	mov	r1, r4
 8008230:	4658      	mov	r0, fp
 8008232:	f7ff f99d 	bl	8007570 <quorem>
 8008236:	9a03      	ldr	r2, [sp, #12]
 8008238:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800823c:	f807 3b01 	strb.w	r3, [r7], #1
 8008240:	1aba      	subs	r2, r7, r2
 8008242:	4591      	cmp	r9, r2
 8008244:	ddba      	ble.n	80081bc <_dtoa_r+0xb34>
 8008246:	4659      	mov	r1, fp
 8008248:	2300      	movs	r3, #0
 800824a:	220a      	movs	r2, #10
 800824c:	4628      	mov	r0, r5
 800824e:	f000 fc2f 	bl	8008ab0 <__multadd>
 8008252:	4683      	mov	fp, r0
 8008254:	e7eb      	b.n	800822e <_dtoa_r+0xba6>
 8008256:	bf00      	nop
 8008258:	0800b079 	.word	0x0800b079
 800825c:	0800b271 	.word	0x0800b271
 8008260:	0800b011 	.word	0x0800b011

08008264 <fiprintf>:
 8008264:	b40e      	push	{r1, r2, r3}
 8008266:	b503      	push	{r0, r1, lr}
 8008268:	4601      	mov	r1, r0
 800826a:	ab03      	add	r3, sp, #12
 800826c:	4805      	ldr	r0, [pc, #20]	; (8008284 <fiprintf+0x20>)
 800826e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008272:	6800      	ldr	r0, [r0, #0]
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	f001 fcb9 	bl	8009bec <_vfiprintf_r>
 800827a:	b002      	add	sp, #8
 800827c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008280:	b003      	add	sp, #12
 8008282:	4770      	bx	lr
 8008284:	20000078 	.word	0x20000078

08008288 <rshift>:
 8008288:	6903      	ldr	r3, [r0, #16]
 800828a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800828e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008292:	f100 0414 	add.w	r4, r0, #20
 8008296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800829a:	dd46      	ble.n	800832a <rshift+0xa2>
 800829c:	f011 011f 	ands.w	r1, r1, #31
 80082a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80082a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80082a8:	d10c      	bne.n	80082c4 <rshift+0x3c>
 80082aa:	4629      	mov	r1, r5
 80082ac:	f100 0710 	add.w	r7, r0, #16
 80082b0:	42b1      	cmp	r1, r6
 80082b2:	d335      	bcc.n	8008320 <rshift+0x98>
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	1eea      	subs	r2, r5, #3
 80082ba:	4296      	cmp	r6, r2
 80082bc:	bf38      	it	cc
 80082be:	2300      	movcc	r3, #0
 80082c0:	4423      	add	r3, r4
 80082c2:	e015      	b.n	80082f0 <rshift+0x68>
 80082c4:	46a1      	mov	r9, r4
 80082c6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082ca:	f1c1 0820 	rsb	r8, r1, #32
 80082ce:	40cf      	lsrs	r7, r1
 80082d0:	f105 0e04 	add.w	lr, r5, #4
 80082d4:	4576      	cmp	r6, lr
 80082d6:	46f4      	mov	ip, lr
 80082d8:	d816      	bhi.n	8008308 <rshift+0x80>
 80082da:	1a9a      	subs	r2, r3, r2
 80082dc:	0092      	lsls	r2, r2, #2
 80082de:	3a04      	subs	r2, #4
 80082e0:	3501      	adds	r5, #1
 80082e2:	42ae      	cmp	r6, r5
 80082e4:	bf38      	it	cc
 80082e6:	2200      	movcc	r2, #0
 80082e8:	18a3      	adds	r3, r4, r2
 80082ea:	50a7      	str	r7, [r4, r2]
 80082ec:	b107      	cbz	r7, 80082f0 <rshift+0x68>
 80082ee:	3304      	adds	r3, #4
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	eba3 0204 	sub.w	r2, r3, r4
 80082f6:	bf08      	it	eq
 80082f8:	2300      	moveq	r3, #0
 80082fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082fe:	6102      	str	r2, [r0, #16]
 8008300:	bf08      	it	eq
 8008302:	6143      	streq	r3, [r0, #20]
 8008304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008308:	f8dc c000 	ldr.w	ip, [ip]
 800830c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008310:	ea4c 0707 	orr.w	r7, ip, r7
 8008314:	f849 7b04 	str.w	r7, [r9], #4
 8008318:	f85e 7b04 	ldr.w	r7, [lr], #4
 800831c:	40cf      	lsrs	r7, r1
 800831e:	e7d9      	b.n	80082d4 <rshift+0x4c>
 8008320:	f851 cb04 	ldr.w	ip, [r1], #4
 8008324:	f847 cf04 	str.w	ip, [r7, #4]!
 8008328:	e7c2      	b.n	80082b0 <rshift+0x28>
 800832a:	4623      	mov	r3, r4
 800832c:	e7e0      	b.n	80082f0 <rshift+0x68>

0800832e <__hexdig_fun>:
 800832e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008332:	2b09      	cmp	r3, #9
 8008334:	d802      	bhi.n	800833c <__hexdig_fun+0xe>
 8008336:	3820      	subs	r0, #32
 8008338:	b2c0      	uxtb	r0, r0
 800833a:	4770      	bx	lr
 800833c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008340:	2b05      	cmp	r3, #5
 8008342:	d801      	bhi.n	8008348 <__hexdig_fun+0x1a>
 8008344:	3847      	subs	r0, #71	; 0x47
 8008346:	e7f7      	b.n	8008338 <__hexdig_fun+0xa>
 8008348:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800834c:	2b05      	cmp	r3, #5
 800834e:	d801      	bhi.n	8008354 <__hexdig_fun+0x26>
 8008350:	3827      	subs	r0, #39	; 0x27
 8008352:	e7f1      	b.n	8008338 <__hexdig_fun+0xa>
 8008354:	2000      	movs	r0, #0
 8008356:	4770      	bx	lr

08008358 <__gethex>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	b08b      	sub	sp, #44	; 0x2c
 800835e:	9305      	str	r3, [sp, #20]
 8008360:	4bb2      	ldr	r3, [pc, #712]	; (800862c <__gethex+0x2d4>)
 8008362:	9002      	str	r0, [sp, #8]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	468b      	mov	fp, r1
 8008368:	4618      	mov	r0, r3
 800836a:	4690      	mov	r8, r2
 800836c:	9303      	str	r3, [sp, #12]
 800836e:	f7f7 feef 	bl	8000150 <strlen>
 8008372:	4682      	mov	sl, r0
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	f8db 2000 	ldr.w	r2, [fp]
 800837a:	4403      	add	r3, r0
 800837c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008380:	9306      	str	r3, [sp, #24]
 8008382:	1c93      	adds	r3, r2, #2
 8008384:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008388:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800838c:	32fe      	adds	r2, #254	; 0xfe
 800838e:	18d1      	adds	r1, r2, r3
 8008390:	461f      	mov	r7, r3
 8008392:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008396:	9101      	str	r1, [sp, #4]
 8008398:	2830      	cmp	r0, #48	; 0x30
 800839a:	d0f8      	beq.n	800838e <__gethex+0x36>
 800839c:	f7ff ffc7 	bl	800832e <__hexdig_fun>
 80083a0:	4604      	mov	r4, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d13a      	bne.n	800841c <__gethex+0xc4>
 80083a6:	4652      	mov	r2, sl
 80083a8:	4638      	mov	r0, r7
 80083aa:	9903      	ldr	r1, [sp, #12]
 80083ac:	f001 ff00 	bl	800a1b0 <strncmp>
 80083b0:	4605      	mov	r5, r0
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d166      	bne.n	8008484 <__gethex+0x12c>
 80083b6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80083ba:	eb07 060a 	add.w	r6, r7, sl
 80083be:	f7ff ffb6 	bl	800832e <__hexdig_fun>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d060      	beq.n	8008488 <__gethex+0x130>
 80083c6:	4633      	mov	r3, r6
 80083c8:	7818      	ldrb	r0, [r3, #0]
 80083ca:	461f      	mov	r7, r3
 80083cc:	2830      	cmp	r0, #48	; 0x30
 80083ce:	f103 0301 	add.w	r3, r3, #1
 80083d2:	d0f9      	beq.n	80083c8 <__gethex+0x70>
 80083d4:	f7ff ffab 	bl	800832e <__hexdig_fun>
 80083d8:	2301      	movs	r3, #1
 80083da:	fab0 f480 	clz	r4, r0
 80083de:	4635      	mov	r5, r6
 80083e0:	0964      	lsrs	r4, r4, #5
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	463a      	mov	r2, r7
 80083e6:	4616      	mov	r6, r2
 80083e8:	7830      	ldrb	r0, [r6, #0]
 80083ea:	3201      	adds	r2, #1
 80083ec:	f7ff ff9f 	bl	800832e <__hexdig_fun>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d1f8      	bne.n	80083e6 <__gethex+0x8e>
 80083f4:	4652      	mov	r2, sl
 80083f6:	4630      	mov	r0, r6
 80083f8:	9903      	ldr	r1, [sp, #12]
 80083fa:	f001 fed9 	bl	800a1b0 <strncmp>
 80083fe:	b980      	cbnz	r0, 8008422 <__gethex+0xca>
 8008400:	b94d      	cbnz	r5, 8008416 <__gethex+0xbe>
 8008402:	eb06 050a 	add.w	r5, r6, sl
 8008406:	462a      	mov	r2, r5
 8008408:	4616      	mov	r6, r2
 800840a:	7830      	ldrb	r0, [r6, #0]
 800840c:	3201      	adds	r2, #1
 800840e:	f7ff ff8e 	bl	800832e <__hexdig_fun>
 8008412:	2800      	cmp	r0, #0
 8008414:	d1f8      	bne.n	8008408 <__gethex+0xb0>
 8008416:	1bad      	subs	r5, r5, r6
 8008418:	00ad      	lsls	r5, r5, #2
 800841a:	e004      	b.n	8008426 <__gethex+0xce>
 800841c:	2400      	movs	r4, #0
 800841e:	4625      	mov	r5, r4
 8008420:	e7e0      	b.n	80083e4 <__gethex+0x8c>
 8008422:	2d00      	cmp	r5, #0
 8008424:	d1f7      	bne.n	8008416 <__gethex+0xbe>
 8008426:	7833      	ldrb	r3, [r6, #0]
 8008428:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800842c:	2b50      	cmp	r3, #80	; 0x50
 800842e:	d139      	bne.n	80084a4 <__gethex+0x14c>
 8008430:	7873      	ldrb	r3, [r6, #1]
 8008432:	2b2b      	cmp	r3, #43	; 0x2b
 8008434:	d02a      	beq.n	800848c <__gethex+0x134>
 8008436:	2b2d      	cmp	r3, #45	; 0x2d
 8008438:	d02c      	beq.n	8008494 <__gethex+0x13c>
 800843a:	f04f 0900 	mov.w	r9, #0
 800843e:	1c71      	adds	r1, r6, #1
 8008440:	7808      	ldrb	r0, [r1, #0]
 8008442:	f7ff ff74 	bl	800832e <__hexdig_fun>
 8008446:	1e43      	subs	r3, r0, #1
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b18      	cmp	r3, #24
 800844c:	d82a      	bhi.n	80084a4 <__gethex+0x14c>
 800844e:	f1a0 0210 	sub.w	r2, r0, #16
 8008452:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008456:	f7ff ff6a 	bl	800832e <__hexdig_fun>
 800845a:	1e43      	subs	r3, r0, #1
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b18      	cmp	r3, #24
 8008460:	d91b      	bls.n	800849a <__gethex+0x142>
 8008462:	f1b9 0f00 	cmp.w	r9, #0
 8008466:	d000      	beq.n	800846a <__gethex+0x112>
 8008468:	4252      	negs	r2, r2
 800846a:	4415      	add	r5, r2
 800846c:	f8cb 1000 	str.w	r1, [fp]
 8008470:	b1d4      	cbz	r4, 80084a8 <__gethex+0x150>
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf14      	ite	ne
 8008478:	2700      	movne	r7, #0
 800847a:	2706      	moveq	r7, #6
 800847c:	4638      	mov	r0, r7
 800847e:	b00b      	add	sp, #44	; 0x2c
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008484:	463e      	mov	r6, r7
 8008486:	4625      	mov	r5, r4
 8008488:	2401      	movs	r4, #1
 800848a:	e7cc      	b.n	8008426 <__gethex+0xce>
 800848c:	f04f 0900 	mov.w	r9, #0
 8008490:	1cb1      	adds	r1, r6, #2
 8008492:	e7d5      	b.n	8008440 <__gethex+0xe8>
 8008494:	f04f 0901 	mov.w	r9, #1
 8008498:	e7fa      	b.n	8008490 <__gethex+0x138>
 800849a:	230a      	movs	r3, #10
 800849c:	fb03 0202 	mla	r2, r3, r2, r0
 80084a0:	3a10      	subs	r2, #16
 80084a2:	e7d6      	b.n	8008452 <__gethex+0xfa>
 80084a4:	4631      	mov	r1, r6
 80084a6:	e7e1      	b.n	800846c <__gethex+0x114>
 80084a8:	4621      	mov	r1, r4
 80084aa:	1bf3      	subs	r3, r6, r7
 80084ac:	3b01      	subs	r3, #1
 80084ae:	2b07      	cmp	r3, #7
 80084b0:	dc0a      	bgt.n	80084c8 <__gethex+0x170>
 80084b2:	9802      	ldr	r0, [sp, #8]
 80084b4:	f000 fa9a 	bl	80089ec <_Balloc>
 80084b8:	4604      	mov	r4, r0
 80084ba:	b940      	cbnz	r0, 80084ce <__gethex+0x176>
 80084bc:	4602      	mov	r2, r0
 80084be:	21de      	movs	r1, #222	; 0xde
 80084c0:	4b5b      	ldr	r3, [pc, #364]	; (8008630 <__gethex+0x2d8>)
 80084c2:	485c      	ldr	r0, [pc, #368]	; (8008634 <__gethex+0x2dc>)
 80084c4:	f7ff f826 	bl	8007514 <__assert_func>
 80084c8:	3101      	adds	r1, #1
 80084ca:	105b      	asrs	r3, r3, #1
 80084cc:	e7ef      	b.n	80084ae <__gethex+0x156>
 80084ce:	f04f 0b00 	mov.w	fp, #0
 80084d2:	f100 0914 	add.w	r9, r0, #20
 80084d6:	f1ca 0301 	rsb	r3, sl, #1
 80084da:	f8cd 9010 	str.w	r9, [sp, #16]
 80084de:	f8cd b004 	str.w	fp, [sp, #4]
 80084e2:	9308      	str	r3, [sp, #32]
 80084e4:	42b7      	cmp	r7, r6
 80084e6:	d33f      	bcc.n	8008568 <__gethex+0x210>
 80084e8:	9f04      	ldr	r7, [sp, #16]
 80084ea:	9b01      	ldr	r3, [sp, #4]
 80084ec:	f847 3b04 	str.w	r3, [r7], #4
 80084f0:	eba7 0709 	sub.w	r7, r7, r9
 80084f4:	10bf      	asrs	r7, r7, #2
 80084f6:	6127      	str	r7, [r4, #16]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fb69 	bl	8008bd0 <__hi0bits>
 80084fe:	017f      	lsls	r7, r7, #5
 8008500:	f8d8 6000 	ldr.w	r6, [r8]
 8008504:	1a3f      	subs	r7, r7, r0
 8008506:	42b7      	cmp	r7, r6
 8008508:	dd62      	ble.n	80085d0 <__gethex+0x278>
 800850a:	1bbf      	subs	r7, r7, r6
 800850c:	4639      	mov	r1, r7
 800850e:	4620      	mov	r0, r4
 8008510:	f000 ff03 	bl	800931a <__any_on>
 8008514:	4682      	mov	sl, r0
 8008516:	b1a8      	cbz	r0, 8008544 <__gethex+0x1ec>
 8008518:	f04f 0a01 	mov.w	sl, #1
 800851c:	1e7b      	subs	r3, r7, #1
 800851e:	1159      	asrs	r1, r3, #5
 8008520:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008524:	f003 021f 	and.w	r2, r3, #31
 8008528:	fa0a f202 	lsl.w	r2, sl, r2
 800852c:	420a      	tst	r2, r1
 800852e:	d009      	beq.n	8008544 <__gethex+0x1ec>
 8008530:	4553      	cmp	r3, sl
 8008532:	dd05      	ble.n	8008540 <__gethex+0x1e8>
 8008534:	4620      	mov	r0, r4
 8008536:	1eb9      	subs	r1, r7, #2
 8008538:	f000 feef 	bl	800931a <__any_on>
 800853c:	2800      	cmp	r0, #0
 800853e:	d144      	bne.n	80085ca <__gethex+0x272>
 8008540:	f04f 0a02 	mov.w	sl, #2
 8008544:	4639      	mov	r1, r7
 8008546:	4620      	mov	r0, r4
 8008548:	f7ff fe9e 	bl	8008288 <rshift>
 800854c:	443d      	add	r5, r7
 800854e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008552:	42ab      	cmp	r3, r5
 8008554:	da4a      	bge.n	80085ec <__gethex+0x294>
 8008556:	4621      	mov	r1, r4
 8008558:	9802      	ldr	r0, [sp, #8]
 800855a:	f000 fa87 	bl	8008a6c <_Bfree>
 800855e:	2300      	movs	r3, #0
 8008560:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008562:	27a3      	movs	r7, #163	; 0xa3
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	e789      	b.n	800847c <__gethex+0x124>
 8008568:	1e73      	subs	r3, r6, #1
 800856a:	9a06      	ldr	r2, [sp, #24]
 800856c:	9307      	str	r3, [sp, #28]
 800856e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008572:	4293      	cmp	r3, r2
 8008574:	d019      	beq.n	80085aa <__gethex+0x252>
 8008576:	f1bb 0f20 	cmp.w	fp, #32
 800857a:	d107      	bne.n	800858c <__gethex+0x234>
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	9a01      	ldr	r2, [sp, #4]
 8008580:	f843 2b04 	str.w	r2, [r3], #4
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	2300      	movs	r3, #0
 8008588:	469b      	mov	fp, r3
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008590:	f7ff fecd 	bl	800832e <__hexdig_fun>
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	f000 000f 	and.w	r0, r0, #15
 800859a:	fa00 f00b 	lsl.w	r0, r0, fp
 800859e:	4303      	orrs	r3, r0
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	f10b 0b04 	add.w	fp, fp, #4
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	e00d      	b.n	80085c6 <__gethex+0x26e>
 80085aa:	9a08      	ldr	r2, [sp, #32]
 80085ac:	1e73      	subs	r3, r6, #1
 80085ae:	4413      	add	r3, r2
 80085b0:	42bb      	cmp	r3, r7
 80085b2:	d3e0      	bcc.n	8008576 <__gethex+0x21e>
 80085b4:	4618      	mov	r0, r3
 80085b6:	4652      	mov	r2, sl
 80085b8:	9903      	ldr	r1, [sp, #12]
 80085ba:	9309      	str	r3, [sp, #36]	; 0x24
 80085bc:	f001 fdf8 	bl	800a1b0 <strncmp>
 80085c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d1d7      	bne.n	8008576 <__gethex+0x21e>
 80085c6:	461e      	mov	r6, r3
 80085c8:	e78c      	b.n	80084e4 <__gethex+0x18c>
 80085ca:	f04f 0a03 	mov.w	sl, #3
 80085ce:	e7b9      	b.n	8008544 <__gethex+0x1ec>
 80085d0:	da09      	bge.n	80085e6 <__gethex+0x28e>
 80085d2:	1bf7      	subs	r7, r6, r7
 80085d4:	4621      	mov	r1, r4
 80085d6:	463a      	mov	r2, r7
 80085d8:	9802      	ldr	r0, [sp, #8]
 80085da:	f000 fc5f 	bl	8008e9c <__lshift>
 80085de:	4604      	mov	r4, r0
 80085e0:	1bed      	subs	r5, r5, r7
 80085e2:	f100 0914 	add.w	r9, r0, #20
 80085e6:	f04f 0a00 	mov.w	sl, #0
 80085ea:	e7b0      	b.n	800854e <__gethex+0x1f6>
 80085ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085f0:	42a8      	cmp	r0, r5
 80085f2:	dd72      	ble.n	80086da <__gethex+0x382>
 80085f4:	1b45      	subs	r5, r0, r5
 80085f6:	42ae      	cmp	r6, r5
 80085f8:	dc35      	bgt.n	8008666 <__gethex+0x30e>
 80085fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d029      	beq.n	8008656 <__gethex+0x2fe>
 8008602:	2b03      	cmp	r3, #3
 8008604:	d02b      	beq.n	800865e <__gethex+0x306>
 8008606:	2b01      	cmp	r3, #1
 8008608:	d11c      	bne.n	8008644 <__gethex+0x2ec>
 800860a:	42ae      	cmp	r6, r5
 800860c:	d11a      	bne.n	8008644 <__gethex+0x2ec>
 800860e:	2e01      	cmp	r6, #1
 8008610:	d112      	bne.n	8008638 <__gethex+0x2e0>
 8008612:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008616:	9a05      	ldr	r2, [sp, #20]
 8008618:	2762      	movs	r7, #98	; 0x62
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	2301      	movs	r3, #1
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	f8c9 3000 	str.w	r3, [r9]
 8008624:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008626:	601c      	str	r4, [r3, #0]
 8008628:	e728      	b.n	800847c <__gethex+0x124>
 800862a:	bf00      	nop
 800862c:	0800b0f0 	.word	0x0800b0f0
 8008630:	0800b079 	.word	0x0800b079
 8008634:	0800b08a 	.word	0x0800b08a
 8008638:	4620      	mov	r0, r4
 800863a:	1e71      	subs	r1, r6, #1
 800863c:	f000 fe6d 	bl	800931a <__any_on>
 8008640:	2800      	cmp	r0, #0
 8008642:	d1e6      	bne.n	8008612 <__gethex+0x2ba>
 8008644:	4621      	mov	r1, r4
 8008646:	9802      	ldr	r0, [sp, #8]
 8008648:	f000 fa10 	bl	8008a6c <_Bfree>
 800864c:	2300      	movs	r3, #0
 800864e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008650:	2750      	movs	r7, #80	; 0x50
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	e712      	b.n	800847c <__gethex+0x124>
 8008656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f3      	bne.n	8008644 <__gethex+0x2ec>
 800865c:	e7d9      	b.n	8008612 <__gethex+0x2ba>
 800865e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1d6      	bne.n	8008612 <__gethex+0x2ba>
 8008664:	e7ee      	b.n	8008644 <__gethex+0x2ec>
 8008666:	1e6f      	subs	r7, r5, #1
 8008668:	f1ba 0f00 	cmp.w	sl, #0
 800866c:	d132      	bne.n	80086d4 <__gethex+0x37c>
 800866e:	b127      	cbz	r7, 800867a <__gethex+0x322>
 8008670:	4639      	mov	r1, r7
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fe51 	bl	800931a <__any_on>
 8008678:	4682      	mov	sl, r0
 800867a:	2101      	movs	r1, #1
 800867c:	117b      	asrs	r3, r7, #5
 800867e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008682:	f007 071f 	and.w	r7, r7, #31
 8008686:	fa01 f707 	lsl.w	r7, r1, r7
 800868a:	421f      	tst	r7, r3
 800868c:	f04f 0702 	mov.w	r7, #2
 8008690:	4629      	mov	r1, r5
 8008692:	4620      	mov	r0, r4
 8008694:	bf18      	it	ne
 8008696:	f04a 0a02 	orrne.w	sl, sl, #2
 800869a:	1b76      	subs	r6, r6, r5
 800869c:	f7ff fdf4 	bl	8008288 <rshift>
 80086a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80086a4:	f1ba 0f00 	cmp.w	sl, #0
 80086a8:	d048      	beq.n	800873c <__gethex+0x3e4>
 80086aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d015      	beq.n	80086de <__gethex+0x386>
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d017      	beq.n	80086e6 <__gethex+0x38e>
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d109      	bne.n	80086ce <__gethex+0x376>
 80086ba:	f01a 0f02 	tst.w	sl, #2
 80086be:	d006      	beq.n	80086ce <__gethex+0x376>
 80086c0:	f8d9 0000 	ldr.w	r0, [r9]
 80086c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80086c8:	f01a 0f01 	tst.w	sl, #1
 80086cc:	d10e      	bne.n	80086ec <__gethex+0x394>
 80086ce:	f047 0710 	orr.w	r7, r7, #16
 80086d2:	e033      	b.n	800873c <__gethex+0x3e4>
 80086d4:	f04f 0a01 	mov.w	sl, #1
 80086d8:	e7cf      	b.n	800867a <__gethex+0x322>
 80086da:	2701      	movs	r7, #1
 80086dc:	e7e2      	b.n	80086a4 <__gethex+0x34c>
 80086de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e0:	f1c3 0301 	rsb	r3, r3, #1
 80086e4:	9315      	str	r3, [sp, #84]	; 0x54
 80086e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0f0      	beq.n	80086ce <__gethex+0x376>
 80086ec:	f04f 0c00 	mov.w	ip, #0
 80086f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086f4:	f104 0314 	add.w	r3, r4, #20
 80086f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80086fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008700:	4618      	mov	r0, r3
 8008702:	f853 2b04 	ldr.w	r2, [r3], #4
 8008706:	f1b2 3fff 	cmp.w	r2, #4294967295
 800870a:	d01c      	beq.n	8008746 <__gethex+0x3ee>
 800870c:	3201      	adds	r2, #1
 800870e:	6002      	str	r2, [r0, #0]
 8008710:	2f02      	cmp	r7, #2
 8008712:	f104 0314 	add.w	r3, r4, #20
 8008716:	d13d      	bne.n	8008794 <__gethex+0x43c>
 8008718:	f8d8 2000 	ldr.w	r2, [r8]
 800871c:	3a01      	subs	r2, #1
 800871e:	42b2      	cmp	r2, r6
 8008720:	d10a      	bne.n	8008738 <__gethex+0x3e0>
 8008722:	2201      	movs	r2, #1
 8008724:	1171      	asrs	r1, r6, #5
 8008726:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800872a:	f006 061f 	and.w	r6, r6, #31
 800872e:	fa02 f606 	lsl.w	r6, r2, r6
 8008732:	421e      	tst	r6, r3
 8008734:	bf18      	it	ne
 8008736:	4617      	movne	r7, r2
 8008738:	f047 0720 	orr.w	r7, r7, #32
 800873c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800873e:	601c      	str	r4, [r3, #0]
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	601d      	str	r5, [r3, #0]
 8008744:	e69a      	b.n	800847c <__gethex+0x124>
 8008746:	4299      	cmp	r1, r3
 8008748:	f843 cc04 	str.w	ip, [r3, #-4]
 800874c:	d8d8      	bhi.n	8008700 <__gethex+0x3a8>
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	459b      	cmp	fp, r3
 8008752:	db17      	blt.n	8008784 <__gethex+0x42c>
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	9802      	ldr	r0, [sp, #8]
 8008758:	3101      	adds	r1, #1
 800875a:	f000 f947 	bl	80089ec <_Balloc>
 800875e:	4681      	mov	r9, r0
 8008760:	b918      	cbnz	r0, 800876a <__gethex+0x412>
 8008762:	4602      	mov	r2, r0
 8008764:	2184      	movs	r1, #132	; 0x84
 8008766:	4b19      	ldr	r3, [pc, #100]	; (80087cc <__gethex+0x474>)
 8008768:	e6ab      	b.n	80084c2 <__gethex+0x16a>
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	f104 010c 	add.w	r1, r4, #12
 8008770:	3202      	adds	r2, #2
 8008772:	0092      	lsls	r2, r2, #2
 8008774:	300c      	adds	r0, #12
 8008776:	f000 f92b 	bl	80089d0 <memcpy>
 800877a:	4621      	mov	r1, r4
 800877c:	9802      	ldr	r0, [sp, #8]
 800877e:	f000 f975 	bl	8008a6c <_Bfree>
 8008782:	464c      	mov	r4, r9
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	6122      	str	r2, [r4, #16]
 800878a:	2201      	movs	r2, #1
 800878c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008790:	615a      	str	r2, [r3, #20]
 8008792:	e7bd      	b.n	8008710 <__gethex+0x3b8>
 8008794:	6922      	ldr	r2, [r4, #16]
 8008796:	455a      	cmp	r2, fp
 8008798:	dd0b      	ble.n	80087b2 <__gethex+0x45a>
 800879a:	2101      	movs	r1, #1
 800879c:	4620      	mov	r0, r4
 800879e:	f7ff fd73 	bl	8008288 <rshift>
 80087a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087a6:	3501      	adds	r5, #1
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	f6ff aed4 	blt.w	8008556 <__gethex+0x1fe>
 80087ae:	2701      	movs	r7, #1
 80087b0:	e7c2      	b.n	8008738 <__gethex+0x3e0>
 80087b2:	f016 061f 	ands.w	r6, r6, #31
 80087b6:	d0fa      	beq.n	80087ae <__gethex+0x456>
 80087b8:	4453      	add	r3, sl
 80087ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80087be:	f000 fa07 	bl	8008bd0 <__hi0bits>
 80087c2:	f1c6 0620 	rsb	r6, r6, #32
 80087c6:	42b0      	cmp	r0, r6
 80087c8:	dbe7      	blt.n	800879a <__gethex+0x442>
 80087ca:	e7f0      	b.n	80087ae <__gethex+0x456>
 80087cc:	0800b079 	.word	0x0800b079

080087d0 <L_shift>:
 80087d0:	f1c2 0208 	rsb	r2, r2, #8
 80087d4:	0092      	lsls	r2, r2, #2
 80087d6:	b570      	push	{r4, r5, r6, lr}
 80087d8:	f1c2 0620 	rsb	r6, r2, #32
 80087dc:	6843      	ldr	r3, [r0, #4]
 80087de:	6804      	ldr	r4, [r0, #0]
 80087e0:	fa03 f506 	lsl.w	r5, r3, r6
 80087e4:	432c      	orrs	r4, r5
 80087e6:	40d3      	lsrs	r3, r2
 80087e8:	6004      	str	r4, [r0, #0]
 80087ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80087ee:	4288      	cmp	r0, r1
 80087f0:	d3f4      	bcc.n	80087dc <L_shift+0xc>
 80087f2:	bd70      	pop	{r4, r5, r6, pc}

080087f4 <__match>:
 80087f4:	b530      	push	{r4, r5, lr}
 80087f6:	6803      	ldr	r3, [r0, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087fe:	b914      	cbnz	r4, 8008806 <__match+0x12>
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	2001      	movs	r0, #1
 8008804:	bd30      	pop	{r4, r5, pc}
 8008806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800880a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800880e:	2d19      	cmp	r5, #25
 8008810:	bf98      	it	ls
 8008812:	3220      	addls	r2, #32
 8008814:	42a2      	cmp	r2, r4
 8008816:	d0f0      	beq.n	80087fa <__match+0x6>
 8008818:	2000      	movs	r0, #0
 800881a:	e7f3      	b.n	8008804 <__match+0x10>

0800881c <__hexnan>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	2500      	movs	r5, #0
 8008822:	680b      	ldr	r3, [r1, #0]
 8008824:	4682      	mov	sl, r0
 8008826:	115e      	asrs	r6, r3, #5
 8008828:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800882c:	f013 031f 	ands.w	r3, r3, #31
 8008830:	bf18      	it	ne
 8008832:	3604      	addne	r6, #4
 8008834:	1f37      	subs	r7, r6, #4
 8008836:	46b9      	mov	r9, r7
 8008838:	463c      	mov	r4, r7
 800883a:	46ab      	mov	fp, r5
 800883c:	b087      	sub	sp, #28
 800883e:	4690      	mov	r8, r2
 8008840:	6802      	ldr	r2, [r0, #0]
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	f846 5c04 	str.w	r5, [r6, #-4]
 8008848:	9502      	str	r5, [sp, #8]
 800884a:	7851      	ldrb	r1, [r2, #1]
 800884c:	1c53      	adds	r3, r2, #1
 800884e:	9303      	str	r3, [sp, #12]
 8008850:	b341      	cbz	r1, 80088a4 <__hexnan+0x88>
 8008852:	4608      	mov	r0, r1
 8008854:	9205      	str	r2, [sp, #20]
 8008856:	9104      	str	r1, [sp, #16]
 8008858:	f7ff fd69 	bl	800832e <__hexdig_fun>
 800885c:	2800      	cmp	r0, #0
 800885e:	d14f      	bne.n	8008900 <__hexnan+0xe4>
 8008860:	9904      	ldr	r1, [sp, #16]
 8008862:	9a05      	ldr	r2, [sp, #20]
 8008864:	2920      	cmp	r1, #32
 8008866:	d818      	bhi.n	800889a <__hexnan+0x7e>
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	459b      	cmp	fp, r3
 800886c:	dd13      	ble.n	8008896 <__hexnan+0x7a>
 800886e:	454c      	cmp	r4, r9
 8008870:	d206      	bcs.n	8008880 <__hexnan+0x64>
 8008872:	2d07      	cmp	r5, #7
 8008874:	dc04      	bgt.n	8008880 <__hexnan+0x64>
 8008876:	462a      	mov	r2, r5
 8008878:	4649      	mov	r1, r9
 800887a:	4620      	mov	r0, r4
 800887c:	f7ff ffa8 	bl	80087d0 <L_shift>
 8008880:	4544      	cmp	r4, r8
 8008882:	d950      	bls.n	8008926 <__hexnan+0x10a>
 8008884:	2300      	movs	r3, #0
 8008886:	f1a4 0904 	sub.w	r9, r4, #4
 800888a:	f844 3c04 	str.w	r3, [r4, #-4]
 800888e:	461d      	mov	r5, r3
 8008890:	464c      	mov	r4, r9
 8008892:	f8cd b008 	str.w	fp, [sp, #8]
 8008896:	9a03      	ldr	r2, [sp, #12]
 8008898:	e7d7      	b.n	800884a <__hexnan+0x2e>
 800889a:	2929      	cmp	r1, #41	; 0x29
 800889c:	d156      	bne.n	800894c <__hexnan+0x130>
 800889e:	3202      	adds	r2, #2
 80088a0:	f8ca 2000 	str.w	r2, [sl]
 80088a4:	f1bb 0f00 	cmp.w	fp, #0
 80088a8:	d050      	beq.n	800894c <__hexnan+0x130>
 80088aa:	454c      	cmp	r4, r9
 80088ac:	d206      	bcs.n	80088bc <__hexnan+0xa0>
 80088ae:	2d07      	cmp	r5, #7
 80088b0:	dc04      	bgt.n	80088bc <__hexnan+0xa0>
 80088b2:	462a      	mov	r2, r5
 80088b4:	4649      	mov	r1, r9
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff ff8a 	bl	80087d0 <L_shift>
 80088bc:	4544      	cmp	r4, r8
 80088be:	d934      	bls.n	800892a <__hexnan+0x10e>
 80088c0:	4623      	mov	r3, r4
 80088c2:	f1a8 0204 	sub.w	r2, r8, #4
 80088c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80088ca:	429f      	cmp	r7, r3
 80088cc:	f842 1f04 	str.w	r1, [r2, #4]!
 80088d0:	d2f9      	bcs.n	80088c6 <__hexnan+0xaa>
 80088d2:	1b3b      	subs	r3, r7, r4
 80088d4:	f023 0303 	bic.w	r3, r3, #3
 80088d8:	3304      	adds	r3, #4
 80088da:	3401      	adds	r4, #1
 80088dc:	3e03      	subs	r6, #3
 80088de:	42b4      	cmp	r4, r6
 80088e0:	bf88      	it	hi
 80088e2:	2304      	movhi	r3, #4
 80088e4:	2200      	movs	r2, #0
 80088e6:	4443      	add	r3, r8
 80088e8:	f843 2b04 	str.w	r2, [r3], #4
 80088ec:	429f      	cmp	r7, r3
 80088ee:	d2fb      	bcs.n	80088e8 <__hexnan+0xcc>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	b91b      	cbnz	r3, 80088fc <__hexnan+0xe0>
 80088f4:	4547      	cmp	r7, r8
 80088f6:	d127      	bne.n	8008948 <__hexnan+0x12c>
 80088f8:	2301      	movs	r3, #1
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	2005      	movs	r0, #5
 80088fe:	e026      	b.n	800894e <__hexnan+0x132>
 8008900:	3501      	adds	r5, #1
 8008902:	2d08      	cmp	r5, #8
 8008904:	f10b 0b01 	add.w	fp, fp, #1
 8008908:	dd06      	ble.n	8008918 <__hexnan+0xfc>
 800890a:	4544      	cmp	r4, r8
 800890c:	d9c3      	bls.n	8008896 <__hexnan+0x7a>
 800890e:	2300      	movs	r3, #0
 8008910:	2501      	movs	r5, #1
 8008912:	f844 3c04 	str.w	r3, [r4, #-4]
 8008916:	3c04      	subs	r4, #4
 8008918:	6822      	ldr	r2, [r4, #0]
 800891a:	f000 000f 	and.w	r0, r0, #15
 800891e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	e7b7      	b.n	8008896 <__hexnan+0x7a>
 8008926:	2508      	movs	r5, #8
 8008928:	e7b5      	b.n	8008896 <__hexnan+0x7a>
 800892a:	9b01      	ldr	r3, [sp, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0df      	beq.n	80088f0 <__hexnan+0xd4>
 8008930:	f04f 32ff 	mov.w	r2, #4294967295
 8008934:	f1c3 0320 	rsb	r3, r3, #32
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
 800893c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008940:	401a      	ands	r2, r3
 8008942:	f846 2c04 	str.w	r2, [r6, #-4]
 8008946:	e7d3      	b.n	80088f0 <__hexnan+0xd4>
 8008948:	3f04      	subs	r7, #4
 800894a:	e7d1      	b.n	80088f0 <__hexnan+0xd4>
 800894c:	2004      	movs	r0, #4
 800894e:	b007      	add	sp, #28
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008954 <_localeconv_r>:
 8008954:	4800      	ldr	r0, [pc, #0]	; (8008958 <_localeconv_r+0x4>)
 8008956:	4770      	bx	lr
 8008958:	200001d0 	.word	0x200001d0

0800895c <_lseek_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	2200      	movs	r2, #0
 8008966:	4d05      	ldr	r5, [pc, #20]	; (800897c <_lseek_r+0x20>)
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f9 fc0e 	bl	800218c <_lseek>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_lseek_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_lseek_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	200005a8 	.word	0x200005a8

08008980 <malloc>:
 8008980:	4b02      	ldr	r3, [pc, #8]	; (800898c <malloc+0xc>)
 8008982:	4601      	mov	r1, r0
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	f000 bd65 	b.w	8009454 <_malloc_r>
 800898a:	bf00      	nop
 800898c:	20000078 	.word	0x20000078

08008990 <__ascii_mbtowc>:
 8008990:	b082      	sub	sp, #8
 8008992:	b901      	cbnz	r1, 8008996 <__ascii_mbtowc+0x6>
 8008994:	a901      	add	r1, sp, #4
 8008996:	b142      	cbz	r2, 80089aa <__ascii_mbtowc+0x1a>
 8008998:	b14b      	cbz	r3, 80089ae <__ascii_mbtowc+0x1e>
 800899a:	7813      	ldrb	r3, [r2, #0]
 800899c:	600b      	str	r3, [r1, #0]
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	1e10      	subs	r0, r2, #0
 80089a2:	bf18      	it	ne
 80089a4:	2001      	movne	r0, #1
 80089a6:	b002      	add	sp, #8
 80089a8:	4770      	bx	lr
 80089aa:	4610      	mov	r0, r2
 80089ac:	e7fb      	b.n	80089a6 <__ascii_mbtowc+0x16>
 80089ae:	f06f 0001 	mvn.w	r0, #1
 80089b2:	e7f8      	b.n	80089a6 <__ascii_mbtowc+0x16>

080089b4 <memchr>:
 80089b4:	4603      	mov	r3, r0
 80089b6:	b510      	push	{r4, lr}
 80089b8:	b2c9      	uxtb	r1, r1
 80089ba:	4402      	add	r2, r0
 80089bc:	4293      	cmp	r3, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	d101      	bne.n	80089c6 <memchr+0x12>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e003      	b.n	80089ce <memchr+0x1a>
 80089c6:	7804      	ldrb	r4, [r0, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	428c      	cmp	r4, r1
 80089cc:	d1f6      	bne.n	80089bc <memchr+0x8>
 80089ce:	bd10      	pop	{r4, pc}

080089d0 <memcpy>:
 80089d0:	440a      	add	r2, r1
 80089d2:	4291      	cmp	r1, r2
 80089d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d8:	d100      	bne.n	80089dc <memcpy+0xc>
 80089da:	4770      	bx	lr
 80089dc:	b510      	push	{r4, lr}
 80089de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e2:	4291      	cmp	r1, r2
 80089e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e8:	d1f9      	bne.n	80089de <memcpy+0xe>
 80089ea:	bd10      	pop	{r4, pc}

080089ec <_Balloc>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	b976      	cbnz	r6, 8008a14 <_Balloc+0x28>
 80089f6:	2010      	movs	r0, #16
 80089f8:	f7ff ffc2 	bl	8008980 <malloc>
 80089fc:	4602      	mov	r2, r0
 80089fe:	6260      	str	r0, [r4, #36]	; 0x24
 8008a00:	b920      	cbnz	r0, 8008a0c <_Balloc+0x20>
 8008a02:	2166      	movs	r1, #102	; 0x66
 8008a04:	4b17      	ldr	r3, [pc, #92]	; (8008a64 <_Balloc+0x78>)
 8008a06:	4818      	ldr	r0, [pc, #96]	; (8008a68 <_Balloc+0x7c>)
 8008a08:	f7fe fd84 	bl	8007514 <__assert_func>
 8008a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a10:	6006      	str	r6, [r0, #0]
 8008a12:	60c6      	str	r6, [r0, #12]
 8008a14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a16:	68f3      	ldr	r3, [r6, #12]
 8008a18:	b183      	cbz	r3, 8008a3c <_Balloc+0x50>
 8008a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a22:	b9b8      	cbnz	r0, 8008a54 <_Balloc+0x68>
 8008a24:	2101      	movs	r1, #1
 8008a26:	fa01 f605 	lsl.w	r6, r1, r5
 8008a2a:	1d72      	adds	r2, r6, #5
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	0092      	lsls	r2, r2, #2
 8008a30:	f000 fc94 	bl	800935c <_calloc_r>
 8008a34:	b160      	cbz	r0, 8008a50 <_Balloc+0x64>
 8008a36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a3a:	e00e      	b.n	8008a5a <_Balloc+0x6e>
 8008a3c:	2221      	movs	r2, #33	; 0x21
 8008a3e:	2104      	movs	r1, #4
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fc8b 	bl	800935c <_calloc_r>
 8008a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a48:	60f0      	str	r0, [r6, #12]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e4      	bne.n	8008a1a <_Balloc+0x2e>
 8008a50:	2000      	movs	r0, #0
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	6802      	ldr	r2, [r0, #0]
 8008a56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a60:	e7f7      	b.n	8008a52 <_Balloc+0x66>
 8008a62:	bf00      	nop
 8008a64:	0800ae60 	.word	0x0800ae60
 8008a68:	0800b104 	.word	0x0800b104

08008a6c <_Bfree>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	b976      	cbnz	r6, 8008a94 <_Bfree+0x28>
 8008a76:	2010      	movs	r0, #16
 8008a78:	f7ff ff82 	bl	8008980 <malloc>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6268      	str	r0, [r5, #36]	; 0x24
 8008a80:	b920      	cbnz	r0, 8008a8c <_Bfree+0x20>
 8008a82:	218a      	movs	r1, #138	; 0x8a
 8008a84:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <_Bfree+0x3c>)
 8008a86:	4809      	ldr	r0, [pc, #36]	; (8008aac <_Bfree+0x40>)
 8008a88:	f7fe fd44 	bl	8007514 <__assert_func>
 8008a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a90:	6006      	str	r6, [r0, #0]
 8008a92:	60c6      	str	r6, [r0, #12]
 8008a94:	b13c      	cbz	r4, 8008aa6 <_Bfree+0x3a>
 8008a96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a98:	6862      	ldr	r2, [r4, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008aa0:	6021      	str	r1, [r4, #0]
 8008aa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	0800ae60 	.word	0x0800ae60
 8008aac:	0800b104 	.word	0x0800b104

08008ab0 <__multadd>:
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	461e      	mov	r6, r3
 8008aba:	2000      	movs	r0, #0
 8008abc:	690d      	ldr	r5, [r1, #16]
 8008abe:	f101 0c14 	add.w	ip, r1, #20
 8008ac2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	b299      	uxth	r1, r3
 8008aca:	fb02 6101 	mla	r1, r2, r1, r6
 8008ace:	0c1e      	lsrs	r6, r3, #16
 8008ad0:	0c0b      	lsrs	r3, r1, #16
 8008ad2:	fb02 3306 	mla	r3, r2, r6, r3
 8008ad6:	b289      	uxth	r1, r1
 8008ad8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008adc:	4285      	cmp	r5, r0
 8008ade:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ae2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ae6:	dcec      	bgt.n	8008ac2 <__multadd+0x12>
 8008ae8:	b30e      	cbz	r6, 8008b2e <__multadd+0x7e>
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	42ab      	cmp	r3, r5
 8008aee:	dc19      	bgt.n	8008b24 <__multadd+0x74>
 8008af0:	6861      	ldr	r1, [r4, #4]
 8008af2:	4638      	mov	r0, r7
 8008af4:	3101      	adds	r1, #1
 8008af6:	f7ff ff79 	bl	80089ec <_Balloc>
 8008afa:	4680      	mov	r8, r0
 8008afc:	b928      	cbnz	r0, 8008b0a <__multadd+0x5a>
 8008afe:	4602      	mov	r2, r0
 8008b00:	21b5      	movs	r1, #181	; 0xb5
 8008b02:	4b0c      	ldr	r3, [pc, #48]	; (8008b34 <__multadd+0x84>)
 8008b04:	480c      	ldr	r0, [pc, #48]	; (8008b38 <__multadd+0x88>)
 8008b06:	f7fe fd05 	bl	8007514 <__assert_func>
 8008b0a:	6922      	ldr	r2, [r4, #16]
 8008b0c:	f104 010c 	add.w	r1, r4, #12
 8008b10:	3202      	adds	r2, #2
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	300c      	adds	r0, #12
 8008b16:	f7ff ff5b 	bl	80089d0 <memcpy>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f7ff ffa5 	bl	8008a6c <_Bfree>
 8008b22:	4644      	mov	r4, r8
 8008b24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b28:	3501      	adds	r5, #1
 8008b2a:	615e      	str	r6, [r3, #20]
 8008b2c:	6125      	str	r5, [r4, #16]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b34:	0800b079 	.word	0x0800b079
 8008b38:	0800b104 	.word	0x0800b104

08008b3c <__s2b>:
 8008b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b40:	4615      	mov	r5, r2
 8008b42:	2209      	movs	r2, #9
 8008b44:	461f      	mov	r7, r3
 8008b46:	3308      	adds	r3, #8
 8008b48:	460c      	mov	r4, r1
 8008b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b4e:	4606      	mov	r6, r0
 8008b50:	2201      	movs	r2, #1
 8008b52:	2100      	movs	r1, #0
 8008b54:	429a      	cmp	r2, r3
 8008b56:	db09      	blt.n	8008b6c <__s2b+0x30>
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7ff ff47 	bl	80089ec <_Balloc>
 8008b5e:	b940      	cbnz	r0, 8008b72 <__s2b+0x36>
 8008b60:	4602      	mov	r2, r0
 8008b62:	21ce      	movs	r1, #206	; 0xce
 8008b64:	4b18      	ldr	r3, [pc, #96]	; (8008bc8 <__s2b+0x8c>)
 8008b66:	4819      	ldr	r0, [pc, #100]	; (8008bcc <__s2b+0x90>)
 8008b68:	f7fe fcd4 	bl	8007514 <__assert_func>
 8008b6c:	0052      	lsls	r2, r2, #1
 8008b6e:	3101      	adds	r1, #1
 8008b70:	e7f0      	b.n	8008b54 <__s2b+0x18>
 8008b72:	9b08      	ldr	r3, [sp, #32]
 8008b74:	2d09      	cmp	r5, #9
 8008b76:	6143      	str	r3, [r0, #20]
 8008b78:	f04f 0301 	mov.w	r3, #1
 8008b7c:	6103      	str	r3, [r0, #16]
 8008b7e:	dd16      	ble.n	8008bae <__s2b+0x72>
 8008b80:	f104 0909 	add.w	r9, r4, #9
 8008b84:	46c8      	mov	r8, r9
 8008b86:	442c      	add	r4, r5
 8008b88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	220a      	movs	r2, #10
 8008b90:	4630      	mov	r0, r6
 8008b92:	3b30      	subs	r3, #48	; 0x30
 8008b94:	f7ff ff8c 	bl	8008ab0 <__multadd>
 8008b98:	45a0      	cmp	r8, r4
 8008b9a:	d1f5      	bne.n	8008b88 <__s2b+0x4c>
 8008b9c:	f1a5 0408 	sub.w	r4, r5, #8
 8008ba0:	444c      	add	r4, r9
 8008ba2:	1b2d      	subs	r5, r5, r4
 8008ba4:	1963      	adds	r3, r4, r5
 8008ba6:	42bb      	cmp	r3, r7
 8008ba8:	db04      	blt.n	8008bb4 <__s2b+0x78>
 8008baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bae:	2509      	movs	r5, #9
 8008bb0:	340a      	adds	r4, #10
 8008bb2:	e7f6      	b.n	8008ba2 <__s2b+0x66>
 8008bb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bb8:	4601      	mov	r1, r0
 8008bba:	220a      	movs	r2, #10
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	3b30      	subs	r3, #48	; 0x30
 8008bc0:	f7ff ff76 	bl	8008ab0 <__multadd>
 8008bc4:	e7ee      	b.n	8008ba4 <__s2b+0x68>
 8008bc6:	bf00      	nop
 8008bc8:	0800b079 	.word	0x0800b079
 8008bcc:	0800b104 	.word	0x0800b104

08008bd0 <__hi0bits>:
 8008bd0:	0c02      	lsrs	r2, r0, #16
 8008bd2:	0412      	lsls	r2, r2, #16
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	b9ca      	cbnz	r2, 8008c0c <__hi0bits+0x3c>
 8008bd8:	0403      	lsls	r3, r0, #16
 8008bda:	2010      	movs	r0, #16
 8008bdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008be0:	bf04      	itt	eq
 8008be2:	021b      	lsleq	r3, r3, #8
 8008be4:	3008      	addeq	r0, #8
 8008be6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008bea:	bf04      	itt	eq
 8008bec:	011b      	lsleq	r3, r3, #4
 8008bee:	3004      	addeq	r0, #4
 8008bf0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008bf4:	bf04      	itt	eq
 8008bf6:	009b      	lsleq	r3, r3, #2
 8008bf8:	3002      	addeq	r0, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	db05      	blt.n	8008c0a <__hi0bits+0x3a>
 8008bfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c02:	f100 0001 	add.w	r0, r0, #1
 8008c06:	bf08      	it	eq
 8008c08:	2020      	moveq	r0, #32
 8008c0a:	4770      	bx	lr
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	e7e5      	b.n	8008bdc <__hi0bits+0xc>

08008c10 <__lo0bits>:
 8008c10:	6803      	ldr	r3, [r0, #0]
 8008c12:	4602      	mov	r2, r0
 8008c14:	f013 0007 	ands.w	r0, r3, #7
 8008c18:	d00b      	beq.n	8008c32 <__lo0bits+0x22>
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	d421      	bmi.n	8008c62 <__lo0bits+0x52>
 8008c1e:	0798      	lsls	r0, r3, #30
 8008c20:	bf49      	itett	mi
 8008c22:	085b      	lsrmi	r3, r3, #1
 8008c24:	089b      	lsrpl	r3, r3, #2
 8008c26:	2001      	movmi	r0, #1
 8008c28:	6013      	strmi	r3, [r2, #0]
 8008c2a:	bf5c      	itt	pl
 8008c2c:	2002      	movpl	r0, #2
 8008c2e:	6013      	strpl	r3, [r2, #0]
 8008c30:	4770      	bx	lr
 8008c32:	b299      	uxth	r1, r3
 8008c34:	b909      	cbnz	r1, 8008c3a <__lo0bits+0x2a>
 8008c36:	2010      	movs	r0, #16
 8008c38:	0c1b      	lsrs	r3, r3, #16
 8008c3a:	b2d9      	uxtb	r1, r3
 8008c3c:	b909      	cbnz	r1, 8008c42 <__lo0bits+0x32>
 8008c3e:	3008      	adds	r0, #8
 8008c40:	0a1b      	lsrs	r3, r3, #8
 8008c42:	0719      	lsls	r1, r3, #28
 8008c44:	bf04      	itt	eq
 8008c46:	091b      	lsreq	r3, r3, #4
 8008c48:	3004      	addeq	r0, #4
 8008c4a:	0799      	lsls	r1, r3, #30
 8008c4c:	bf04      	itt	eq
 8008c4e:	089b      	lsreq	r3, r3, #2
 8008c50:	3002      	addeq	r0, #2
 8008c52:	07d9      	lsls	r1, r3, #31
 8008c54:	d403      	bmi.n	8008c5e <__lo0bits+0x4e>
 8008c56:	085b      	lsrs	r3, r3, #1
 8008c58:	f100 0001 	add.w	r0, r0, #1
 8008c5c:	d003      	beq.n	8008c66 <__lo0bits+0x56>
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	4770      	bx	lr
 8008c62:	2000      	movs	r0, #0
 8008c64:	4770      	bx	lr
 8008c66:	2020      	movs	r0, #32
 8008c68:	4770      	bx	lr
	...

08008c6c <__i2b>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	460c      	mov	r4, r1
 8008c70:	2101      	movs	r1, #1
 8008c72:	f7ff febb 	bl	80089ec <_Balloc>
 8008c76:	4602      	mov	r2, r0
 8008c78:	b928      	cbnz	r0, 8008c86 <__i2b+0x1a>
 8008c7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c7e:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <__i2b+0x24>)
 8008c80:	4804      	ldr	r0, [pc, #16]	; (8008c94 <__i2b+0x28>)
 8008c82:	f7fe fc47 	bl	8007514 <__assert_func>
 8008c86:	2301      	movs	r3, #1
 8008c88:	6144      	str	r4, [r0, #20]
 8008c8a:	6103      	str	r3, [r0, #16]
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	bf00      	nop
 8008c90:	0800b079 	.word	0x0800b079
 8008c94:	0800b104 	.word	0x0800b104

08008c98 <__multiply>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	4691      	mov	r9, r2
 8008c9e:	690a      	ldr	r2, [r1, #16]
 8008ca0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	bfbe      	ittt	lt
 8008caa:	460b      	movlt	r3, r1
 8008cac:	464c      	movlt	r4, r9
 8008cae:	4699      	movlt	r9, r3
 8008cb0:	6927      	ldr	r7, [r4, #16]
 8008cb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	6861      	ldr	r1, [r4, #4]
 8008cba:	eb07 060a 	add.w	r6, r7, sl
 8008cbe:	42b3      	cmp	r3, r6
 8008cc0:	b085      	sub	sp, #20
 8008cc2:	bfb8      	it	lt
 8008cc4:	3101      	addlt	r1, #1
 8008cc6:	f7ff fe91 	bl	80089ec <_Balloc>
 8008cca:	b930      	cbnz	r0, 8008cda <__multiply+0x42>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f240 115d 	movw	r1, #349	; 0x15d
 8008cd2:	4b43      	ldr	r3, [pc, #268]	; (8008de0 <__multiply+0x148>)
 8008cd4:	4843      	ldr	r0, [pc, #268]	; (8008de4 <__multiply+0x14c>)
 8008cd6:	f7fe fc1d 	bl	8007514 <__assert_func>
 8008cda:	f100 0514 	add.w	r5, r0, #20
 8008cde:	462b      	mov	r3, r5
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ce6:	4543      	cmp	r3, r8
 8008ce8:	d321      	bcc.n	8008d2e <__multiply+0x96>
 8008cea:	f104 0314 	add.w	r3, r4, #20
 8008cee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cf2:	f109 0314 	add.w	r3, r9, #20
 8008cf6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	1b3a      	subs	r2, r7, r4
 8008cfe:	3a15      	subs	r2, #21
 8008d00:	f022 0203 	bic.w	r2, r2, #3
 8008d04:	3204      	adds	r2, #4
 8008d06:	f104 0115 	add.w	r1, r4, #21
 8008d0a:	428f      	cmp	r7, r1
 8008d0c:	bf38      	it	cc
 8008d0e:	2204      	movcc	r2, #4
 8008d10:	9201      	str	r2, [sp, #4]
 8008d12:	9a02      	ldr	r2, [sp, #8]
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d80c      	bhi.n	8008d34 <__multiply+0x9c>
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	dd03      	ble.n	8008d26 <__multiply+0x8e>
 8008d1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d059      	beq.n	8008dda <__multiply+0x142>
 8008d26:	6106      	str	r6, [r0, #16]
 8008d28:	b005      	add	sp, #20
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	f843 2b04 	str.w	r2, [r3], #4
 8008d32:	e7d8      	b.n	8008ce6 <__multiply+0x4e>
 8008d34:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d38:	f1ba 0f00 	cmp.w	sl, #0
 8008d3c:	d023      	beq.n	8008d86 <__multiply+0xee>
 8008d3e:	46a9      	mov	r9, r5
 8008d40:	f04f 0c00 	mov.w	ip, #0
 8008d44:	f104 0e14 	add.w	lr, r4, #20
 8008d48:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d4c:	f8d9 1000 	ldr.w	r1, [r9]
 8008d50:	fa1f fb82 	uxth.w	fp, r2
 8008d54:	b289      	uxth	r1, r1
 8008d56:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d5a:	4461      	add	r1, ip
 8008d5c:	f8d9 c000 	ldr.w	ip, [r9]
 8008d60:	0c12      	lsrs	r2, r2, #16
 8008d62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d66:	fb0a c202 	mla	r2, sl, r2, ip
 8008d6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d6e:	b289      	uxth	r1, r1
 8008d70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d74:	4577      	cmp	r7, lr
 8008d76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d7a:	f849 1b04 	str.w	r1, [r9], #4
 8008d7e:	d8e3      	bhi.n	8008d48 <__multiply+0xb0>
 8008d80:	9a01      	ldr	r2, [sp, #4]
 8008d82:	f845 c002 	str.w	ip, [r5, r2]
 8008d86:	9a03      	ldr	r2, [sp, #12]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d8e:	f1b9 0f00 	cmp.w	r9, #0
 8008d92:	d020      	beq.n	8008dd6 <__multiply+0x13e>
 8008d94:	46ae      	mov	lr, r5
 8008d96:	f04f 0a00 	mov.w	sl, #0
 8008d9a:	6829      	ldr	r1, [r5, #0]
 8008d9c:	f104 0c14 	add.w	ip, r4, #20
 8008da0:	f8bc b000 	ldrh.w	fp, [ip]
 8008da4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008da8:	b289      	uxth	r1, r1
 8008daa:	fb09 220b 	mla	r2, r9, fp, r2
 8008dae:	4492      	add	sl, r2
 8008db0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008db4:	f84e 1b04 	str.w	r1, [lr], #4
 8008db8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008dbc:	f8be 1000 	ldrh.w	r1, [lr]
 8008dc0:	0c12      	lsrs	r2, r2, #16
 8008dc2:	fb09 1102 	mla	r1, r9, r2, r1
 8008dc6:	4567      	cmp	r7, ip
 8008dc8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008dcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dd0:	d8e6      	bhi.n	8008da0 <__multiply+0x108>
 8008dd2:	9a01      	ldr	r2, [sp, #4]
 8008dd4:	50a9      	str	r1, [r5, r2]
 8008dd6:	3504      	adds	r5, #4
 8008dd8:	e79b      	b.n	8008d12 <__multiply+0x7a>
 8008dda:	3e01      	subs	r6, #1
 8008ddc:	e79d      	b.n	8008d1a <__multiply+0x82>
 8008dde:	bf00      	nop
 8008de0:	0800b079 	.word	0x0800b079
 8008de4:	0800b104 	.word	0x0800b104

08008de8 <__pow5mult>:
 8008de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dec:	4615      	mov	r5, r2
 8008dee:	f012 0203 	ands.w	r2, r2, #3
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	d007      	beq.n	8008e08 <__pow5mult+0x20>
 8008df8:	4c25      	ldr	r4, [pc, #148]	; (8008e90 <__pow5mult+0xa8>)
 8008dfa:	3a01      	subs	r2, #1
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e02:	f7ff fe55 	bl	8008ab0 <__multadd>
 8008e06:	4607      	mov	r7, r0
 8008e08:	10ad      	asrs	r5, r5, #2
 8008e0a:	d03d      	beq.n	8008e88 <__pow5mult+0xa0>
 8008e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e0e:	b97c      	cbnz	r4, 8008e30 <__pow5mult+0x48>
 8008e10:	2010      	movs	r0, #16
 8008e12:	f7ff fdb5 	bl	8008980 <malloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	6270      	str	r0, [r6, #36]	; 0x24
 8008e1a:	b928      	cbnz	r0, 8008e28 <__pow5mult+0x40>
 8008e1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e20:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <__pow5mult+0xac>)
 8008e22:	481d      	ldr	r0, [pc, #116]	; (8008e98 <__pow5mult+0xb0>)
 8008e24:	f7fe fb76 	bl	8007514 <__assert_func>
 8008e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e2c:	6004      	str	r4, [r0, #0]
 8008e2e:	60c4      	str	r4, [r0, #12]
 8008e30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e38:	b94c      	cbnz	r4, 8008e4e <__pow5mult+0x66>
 8008e3a:	f240 2171 	movw	r1, #625	; 0x271
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff ff14 	bl	8008c6c <__i2b>
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e4c:	6003      	str	r3, [r0, #0]
 8008e4e:	f04f 0900 	mov.w	r9, #0
 8008e52:	07eb      	lsls	r3, r5, #31
 8008e54:	d50a      	bpl.n	8008e6c <__pow5mult+0x84>
 8008e56:	4639      	mov	r1, r7
 8008e58:	4622      	mov	r2, r4
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff ff1c 	bl	8008c98 <__multiply>
 8008e60:	4680      	mov	r8, r0
 8008e62:	4639      	mov	r1, r7
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff fe01 	bl	8008a6c <_Bfree>
 8008e6a:	4647      	mov	r7, r8
 8008e6c:	106d      	asrs	r5, r5, #1
 8008e6e:	d00b      	beq.n	8008e88 <__pow5mult+0xa0>
 8008e70:	6820      	ldr	r0, [r4, #0]
 8008e72:	b938      	cbnz	r0, 8008e84 <__pow5mult+0x9c>
 8008e74:	4622      	mov	r2, r4
 8008e76:	4621      	mov	r1, r4
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff ff0d 	bl	8008c98 <__multiply>
 8008e7e:	6020      	str	r0, [r4, #0]
 8008e80:	f8c0 9000 	str.w	r9, [r0]
 8008e84:	4604      	mov	r4, r0
 8008e86:	e7e4      	b.n	8008e52 <__pow5mult+0x6a>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8e:	bf00      	nop
 8008e90:	0800b250 	.word	0x0800b250
 8008e94:	0800ae60 	.word	0x0800ae60
 8008e98:	0800b104 	.word	0x0800b104

08008e9c <__lshift>:
 8008e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	4691      	mov	r9, r2
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	6849      	ldr	r1, [r1, #4]
 8008eaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eb4:	f108 0601 	add.w	r6, r8, #1
 8008eb8:	42b3      	cmp	r3, r6
 8008eba:	db0b      	blt.n	8008ed4 <__lshift+0x38>
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff fd95 	bl	80089ec <_Balloc>
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	b948      	cbnz	r0, 8008eda <__lshift+0x3e>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ecc:	4b29      	ldr	r3, [pc, #164]	; (8008f74 <__lshift+0xd8>)
 8008ece:	482a      	ldr	r0, [pc, #168]	; (8008f78 <__lshift+0xdc>)
 8008ed0:	f7fe fb20 	bl	8007514 <__assert_func>
 8008ed4:	3101      	adds	r1, #1
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	e7ee      	b.n	8008eb8 <__lshift+0x1c>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f100 0114 	add.w	r1, r0, #20
 8008ee0:	f100 0210 	add.w	r2, r0, #16
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	4553      	cmp	r3, sl
 8008ee8:	db37      	blt.n	8008f5a <__lshift+0xbe>
 8008eea:	6920      	ldr	r0, [r4, #16]
 8008eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ef0:	f104 0314 	add.w	r3, r4, #20
 8008ef4:	f019 091f 	ands.w	r9, r9, #31
 8008ef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008efc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f00:	d02f      	beq.n	8008f62 <__lshift+0xc6>
 8008f02:	468a      	mov	sl, r1
 8008f04:	f04f 0c00 	mov.w	ip, #0
 8008f08:	f1c9 0e20 	rsb	lr, r9, #32
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	fa02 f209 	lsl.w	r2, r2, r9
 8008f12:	ea42 020c 	orr.w	r2, r2, ip
 8008f16:	f84a 2b04 	str.w	r2, [sl], #4
 8008f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1e:	4298      	cmp	r0, r3
 8008f20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f24:	d8f2      	bhi.n	8008f0c <__lshift+0x70>
 8008f26:	1b03      	subs	r3, r0, r4
 8008f28:	3b15      	subs	r3, #21
 8008f2a:	f023 0303 	bic.w	r3, r3, #3
 8008f2e:	3304      	adds	r3, #4
 8008f30:	f104 0215 	add.w	r2, r4, #21
 8008f34:	4290      	cmp	r0, r2
 8008f36:	bf38      	it	cc
 8008f38:	2304      	movcc	r3, #4
 8008f3a:	f841 c003 	str.w	ip, [r1, r3]
 8008f3e:	f1bc 0f00 	cmp.w	ip, #0
 8008f42:	d001      	beq.n	8008f48 <__lshift+0xac>
 8008f44:	f108 0602 	add.w	r6, r8, #2
 8008f48:	3e01      	subs	r6, #1
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	612e      	str	r6, [r5, #16]
 8008f50:	f7ff fd8c 	bl	8008a6c <_Bfree>
 8008f54:	4628      	mov	r0, r5
 8008f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f5e:	3301      	adds	r3, #1
 8008f60:	e7c1      	b.n	8008ee6 <__lshift+0x4a>
 8008f62:	3904      	subs	r1, #4
 8008f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f68:	4298      	cmp	r0, r3
 8008f6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f6e:	d8f9      	bhi.n	8008f64 <__lshift+0xc8>
 8008f70:	e7ea      	b.n	8008f48 <__lshift+0xac>
 8008f72:	bf00      	nop
 8008f74:	0800b079 	.word	0x0800b079
 8008f78:	0800b104 	.word	0x0800b104

08008f7c <__mcmp>:
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	690a      	ldr	r2, [r1, #16]
 8008f80:	6900      	ldr	r0, [r0, #16]
 8008f82:	b530      	push	{r4, r5, lr}
 8008f84:	1a80      	subs	r0, r0, r2
 8008f86:	d10d      	bne.n	8008fa4 <__mcmp+0x28>
 8008f88:	3314      	adds	r3, #20
 8008f8a:	3114      	adds	r1, #20
 8008f8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f9c:	4295      	cmp	r5, r2
 8008f9e:	d002      	beq.n	8008fa6 <__mcmp+0x2a>
 8008fa0:	d304      	bcc.n	8008fac <__mcmp+0x30>
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	bd30      	pop	{r4, r5, pc}
 8008fa6:	42a3      	cmp	r3, r4
 8008fa8:	d3f4      	bcc.n	8008f94 <__mcmp+0x18>
 8008faa:	e7fb      	b.n	8008fa4 <__mcmp+0x28>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	e7f8      	b.n	8008fa4 <__mcmp+0x28>
	...

08008fb4 <__mdiff>:
 8008fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	460d      	mov	r5, r1
 8008fba:	4607      	mov	r7, r0
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	f7ff ffdb 	bl	8008f7c <__mcmp>
 8008fc6:	1e06      	subs	r6, r0, #0
 8008fc8:	d111      	bne.n	8008fee <__mdiff+0x3a>
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4638      	mov	r0, r7
 8008fce:	f7ff fd0d 	bl	80089ec <_Balloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	b928      	cbnz	r0, 8008fe2 <__mdiff+0x2e>
 8008fd6:	f240 2132 	movw	r1, #562	; 0x232
 8008fda:	4b3a      	ldr	r3, [pc, #232]	; (80090c4 <__mdiff+0x110>)
 8008fdc:	483a      	ldr	r0, [pc, #232]	; (80090c8 <__mdiff+0x114>)
 8008fde:	f7fe fa99 	bl	8007514 <__assert_func>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fe8:	4610      	mov	r0, r2
 8008fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	bfa4      	itt	ge
 8008ff0:	4623      	movge	r3, r4
 8008ff2:	462c      	movge	r4, r5
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	6861      	ldr	r1, [r4, #4]
 8008ff8:	bfa6      	itte	ge
 8008ffa:	461d      	movge	r5, r3
 8008ffc:	2600      	movge	r6, #0
 8008ffe:	2601      	movlt	r6, #1
 8009000:	f7ff fcf4 	bl	80089ec <_Balloc>
 8009004:	4602      	mov	r2, r0
 8009006:	b918      	cbnz	r0, 8009010 <__mdiff+0x5c>
 8009008:	f44f 7110 	mov.w	r1, #576	; 0x240
 800900c:	4b2d      	ldr	r3, [pc, #180]	; (80090c4 <__mdiff+0x110>)
 800900e:	e7e5      	b.n	8008fdc <__mdiff+0x28>
 8009010:	f102 0814 	add.w	r8, r2, #20
 8009014:	46c2      	mov	sl, r8
 8009016:	f04f 0c00 	mov.w	ip, #0
 800901a:	6927      	ldr	r7, [r4, #16]
 800901c:	60c6      	str	r6, [r0, #12]
 800901e:	692e      	ldr	r6, [r5, #16]
 8009020:	f104 0014 	add.w	r0, r4, #20
 8009024:	f105 0914 	add.w	r9, r5, #20
 8009028:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800902c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009030:	3410      	adds	r4, #16
 8009032:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009036:	f859 3b04 	ldr.w	r3, [r9], #4
 800903a:	fa1f f18b 	uxth.w	r1, fp
 800903e:	448c      	add	ip, r1
 8009040:	b299      	uxth	r1, r3
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	ebac 0101 	sub.w	r1, ip, r1
 8009048:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800904c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009050:	b289      	uxth	r1, r1
 8009052:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009056:	454e      	cmp	r6, r9
 8009058:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800905c:	f84a 3b04 	str.w	r3, [sl], #4
 8009060:	d8e7      	bhi.n	8009032 <__mdiff+0x7e>
 8009062:	1b73      	subs	r3, r6, r5
 8009064:	3b15      	subs	r3, #21
 8009066:	f023 0303 	bic.w	r3, r3, #3
 800906a:	3515      	adds	r5, #21
 800906c:	3304      	adds	r3, #4
 800906e:	42ae      	cmp	r6, r5
 8009070:	bf38      	it	cc
 8009072:	2304      	movcc	r3, #4
 8009074:	4418      	add	r0, r3
 8009076:	4443      	add	r3, r8
 8009078:	461e      	mov	r6, r3
 800907a:	4605      	mov	r5, r0
 800907c:	4575      	cmp	r5, lr
 800907e:	d30e      	bcc.n	800909e <__mdiff+0xea>
 8009080:	f10e 0103 	add.w	r1, lr, #3
 8009084:	1a09      	subs	r1, r1, r0
 8009086:	f021 0103 	bic.w	r1, r1, #3
 800908a:	3803      	subs	r0, #3
 800908c:	4586      	cmp	lr, r0
 800908e:	bf38      	it	cc
 8009090:	2100      	movcc	r1, #0
 8009092:	4419      	add	r1, r3
 8009094:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009098:	b18b      	cbz	r3, 80090be <__mdiff+0x10a>
 800909a:	6117      	str	r7, [r2, #16]
 800909c:	e7a4      	b.n	8008fe8 <__mdiff+0x34>
 800909e:	f855 8b04 	ldr.w	r8, [r5], #4
 80090a2:	fa1f f188 	uxth.w	r1, r8
 80090a6:	4461      	add	r1, ip
 80090a8:	140c      	asrs	r4, r1, #16
 80090aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090ae:	b289      	uxth	r1, r1
 80090b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80090b4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80090b8:	f846 1b04 	str.w	r1, [r6], #4
 80090bc:	e7de      	b.n	800907c <__mdiff+0xc8>
 80090be:	3f01      	subs	r7, #1
 80090c0:	e7e8      	b.n	8009094 <__mdiff+0xe0>
 80090c2:	bf00      	nop
 80090c4:	0800b079 	.word	0x0800b079
 80090c8:	0800b104 	.word	0x0800b104

080090cc <__ulp>:
 80090cc:	4b11      	ldr	r3, [pc, #68]	; (8009114 <__ulp+0x48>)
 80090ce:	400b      	ands	r3, r1
 80090d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dd02      	ble.n	80090de <__ulp+0x12>
 80090d8:	2000      	movs	r0, #0
 80090da:	4619      	mov	r1, r3
 80090dc:	4770      	bx	lr
 80090de:	425b      	negs	r3, r3
 80090e0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f04f 0100 	mov.w	r1, #0
 80090ec:	ea4f 5223 	mov.w	r2, r3, asr #20
 80090f0:	da04      	bge.n	80090fc <__ulp+0x30>
 80090f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090f6:	fa43 f102 	asr.w	r1, r3, r2
 80090fa:	4770      	bx	lr
 80090fc:	f1a2 0314 	sub.w	r3, r2, #20
 8009100:	2b1e      	cmp	r3, #30
 8009102:	bfd6      	itet	le
 8009104:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009108:	2301      	movgt	r3, #1
 800910a:	fa22 f303 	lsrle.w	r3, r2, r3
 800910e:	4618      	mov	r0, r3
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	7ff00000 	.word	0x7ff00000

08009118 <__b2d>:
 8009118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800911c:	6907      	ldr	r7, [r0, #16]
 800911e:	f100 0914 	add.w	r9, r0, #20
 8009122:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009126:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800912a:	f1a7 0804 	sub.w	r8, r7, #4
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff fd4e 	bl	8008bd0 <__hi0bits>
 8009134:	f1c0 0320 	rsb	r3, r0, #32
 8009138:	280a      	cmp	r0, #10
 800913a:	600b      	str	r3, [r1, #0]
 800913c:	491f      	ldr	r1, [pc, #124]	; (80091bc <__b2d+0xa4>)
 800913e:	dc17      	bgt.n	8009170 <__b2d+0x58>
 8009140:	45c1      	cmp	r9, r8
 8009142:	bf28      	it	cs
 8009144:	2200      	movcs	r2, #0
 8009146:	f1c0 0c0b 	rsb	ip, r0, #11
 800914a:	fa26 f30c 	lsr.w	r3, r6, ip
 800914e:	bf38      	it	cc
 8009150:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009154:	ea43 0501 	orr.w	r5, r3, r1
 8009158:	f100 0315 	add.w	r3, r0, #21
 800915c:	fa06 f303 	lsl.w	r3, r6, r3
 8009160:	fa22 f20c 	lsr.w	r2, r2, ip
 8009164:	ea43 0402 	orr.w	r4, r3, r2
 8009168:	4620      	mov	r0, r4
 800916a:	4629      	mov	r1, r5
 800916c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009170:	45c1      	cmp	r9, r8
 8009172:	bf2e      	itee	cs
 8009174:	2200      	movcs	r2, #0
 8009176:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800917a:	f1a7 0808 	subcc.w	r8, r7, #8
 800917e:	f1b0 030b 	subs.w	r3, r0, #11
 8009182:	d016      	beq.n	80091b2 <__b2d+0x9a>
 8009184:	f1c3 0720 	rsb	r7, r3, #32
 8009188:	fa22 f107 	lsr.w	r1, r2, r7
 800918c:	45c8      	cmp	r8, r9
 800918e:	fa06 f603 	lsl.w	r6, r6, r3
 8009192:	ea46 0601 	orr.w	r6, r6, r1
 8009196:	bf94      	ite	ls
 8009198:	2100      	movls	r1, #0
 800919a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800919e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80091a2:	fa02 f003 	lsl.w	r0, r2, r3
 80091a6:	40f9      	lsrs	r1, r7
 80091a8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80091ac:	ea40 0401 	orr.w	r4, r0, r1
 80091b0:	e7da      	b.n	8009168 <__b2d+0x50>
 80091b2:	4614      	mov	r4, r2
 80091b4:	ea46 0501 	orr.w	r5, r6, r1
 80091b8:	e7d6      	b.n	8009168 <__b2d+0x50>
 80091ba:	bf00      	nop
 80091bc:	3ff00000 	.word	0x3ff00000

080091c0 <__d2b>:
 80091c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80091c4:	2101      	movs	r1, #1
 80091c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80091ca:	4690      	mov	r8, r2
 80091cc:	461d      	mov	r5, r3
 80091ce:	f7ff fc0d 	bl	80089ec <_Balloc>
 80091d2:	4604      	mov	r4, r0
 80091d4:	b930      	cbnz	r0, 80091e4 <__d2b+0x24>
 80091d6:	4602      	mov	r2, r0
 80091d8:	f240 310a 	movw	r1, #778	; 0x30a
 80091dc:	4b24      	ldr	r3, [pc, #144]	; (8009270 <__d2b+0xb0>)
 80091de:	4825      	ldr	r0, [pc, #148]	; (8009274 <__d2b+0xb4>)
 80091e0:	f7fe f998 	bl	8007514 <__assert_func>
 80091e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80091e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80091ec:	bb2d      	cbnz	r5, 800923a <__d2b+0x7a>
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	f1b8 0300 	subs.w	r3, r8, #0
 80091f4:	d026      	beq.n	8009244 <__d2b+0x84>
 80091f6:	4668      	mov	r0, sp
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	f7ff fd09 	bl	8008c10 <__lo0bits>
 80091fe:	9900      	ldr	r1, [sp, #0]
 8009200:	b1f0      	cbz	r0, 8009240 <__d2b+0x80>
 8009202:	9a01      	ldr	r2, [sp, #4]
 8009204:	f1c0 0320 	rsb	r3, r0, #32
 8009208:	fa02 f303 	lsl.w	r3, r2, r3
 800920c:	430b      	orrs	r3, r1
 800920e:	40c2      	lsrs	r2, r0
 8009210:	6163      	str	r3, [r4, #20]
 8009212:	9201      	str	r2, [sp, #4]
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	bf14      	ite	ne
 800921a:	2102      	movne	r1, #2
 800921c:	2101      	moveq	r1, #1
 800921e:	61a3      	str	r3, [r4, #24]
 8009220:	6121      	str	r1, [r4, #16]
 8009222:	b1c5      	cbz	r5, 8009256 <__d2b+0x96>
 8009224:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009228:	4405      	add	r5, r0
 800922a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800922e:	603d      	str	r5, [r7, #0]
 8009230:	6030      	str	r0, [r6, #0]
 8009232:	4620      	mov	r0, r4
 8009234:	b002      	add	sp, #8
 8009236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800923a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800923e:	e7d6      	b.n	80091ee <__d2b+0x2e>
 8009240:	6161      	str	r1, [r4, #20]
 8009242:	e7e7      	b.n	8009214 <__d2b+0x54>
 8009244:	a801      	add	r0, sp, #4
 8009246:	f7ff fce3 	bl	8008c10 <__lo0bits>
 800924a:	2101      	movs	r1, #1
 800924c:	9b01      	ldr	r3, [sp, #4]
 800924e:	6121      	str	r1, [r4, #16]
 8009250:	6163      	str	r3, [r4, #20]
 8009252:	3020      	adds	r0, #32
 8009254:	e7e5      	b.n	8009222 <__d2b+0x62>
 8009256:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800925a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800925e:	6038      	str	r0, [r7, #0]
 8009260:	6918      	ldr	r0, [r3, #16]
 8009262:	f7ff fcb5 	bl	8008bd0 <__hi0bits>
 8009266:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800926a:	6031      	str	r1, [r6, #0]
 800926c:	e7e1      	b.n	8009232 <__d2b+0x72>
 800926e:	bf00      	nop
 8009270:	0800b079 	.word	0x0800b079
 8009274:	0800b104 	.word	0x0800b104

08009278 <__ratio>:
 8009278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	4688      	mov	r8, r1
 800927e:	4669      	mov	r1, sp
 8009280:	4681      	mov	r9, r0
 8009282:	f7ff ff49 	bl	8009118 <__b2d>
 8009286:	460f      	mov	r7, r1
 8009288:	4604      	mov	r4, r0
 800928a:	460d      	mov	r5, r1
 800928c:	4640      	mov	r0, r8
 800928e:	a901      	add	r1, sp, #4
 8009290:	f7ff ff42 	bl	8009118 <__b2d>
 8009294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009298:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800929c:	468b      	mov	fp, r1
 800929e:	eba3 0c02 	sub.w	ip, r3, r2
 80092a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfd5      	itete	le
 80092b0:	460a      	movle	r2, r1
 80092b2:	462a      	movgt	r2, r5
 80092b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092b8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80092bc:	bfd8      	it	le
 80092be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80092c2:	465b      	mov	r3, fp
 80092c4:	4602      	mov	r2, r0
 80092c6:	4639      	mov	r1, r7
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7f7 fa2f 	bl	800072c <__aeabi_ddiv>
 80092ce:	b003      	add	sp, #12
 80092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092d4 <__copybits>:
 80092d4:	3901      	subs	r1, #1
 80092d6:	b570      	push	{r4, r5, r6, lr}
 80092d8:	1149      	asrs	r1, r1, #5
 80092da:	6914      	ldr	r4, [r2, #16]
 80092dc:	3101      	adds	r1, #1
 80092de:	f102 0314 	add.w	r3, r2, #20
 80092e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092ea:	1f05      	subs	r5, r0, #4
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	d30c      	bcc.n	800930a <__copybits+0x36>
 80092f0:	1aa3      	subs	r3, r4, r2
 80092f2:	3b11      	subs	r3, #17
 80092f4:	f023 0303 	bic.w	r3, r3, #3
 80092f8:	3211      	adds	r2, #17
 80092fa:	42a2      	cmp	r2, r4
 80092fc:	bf88      	it	hi
 80092fe:	2300      	movhi	r3, #0
 8009300:	4418      	add	r0, r3
 8009302:	2300      	movs	r3, #0
 8009304:	4288      	cmp	r0, r1
 8009306:	d305      	bcc.n	8009314 <__copybits+0x40>
 8009308:	bd70      	pop	{r4, r5, r6, pc}
 800930a:	f853 6b04 	ldr.w	r6, [r3], #4
 800930e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009312:	e7eb      	b.n	80092ec <__copybits+0x18>
 8009314:	f840 3b04 	str.w	r3, [r0], #4
 8009318:	e7f4      	b.n	8009304 <__copybits+0x30>

0800931a <__any_on>:
 800931a:	f100 0214 	add.w	r2, r0, #20
 800931e:	6900      	ldr	r0, [r0, #16]
 8009320:	114b      	asrs	r3, r1, #5
 8009322:	4298      	cmp	r0, r3
 8009324:	b510      	push	{r4, lr}
 8009326:	db11      	blt.n	800934c <__any_on+0x32>
 8009328:	dd0a      	ble.n	8009340 <__any_on+0x26>
 800932a:	f011 011f 	ands.w	r1, r1, #31
 800932e:	d007      	beq.n	8009340 <__any_on+0x26>
 8009330:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009334:	fa24 f001 	lsr.w	r0, r4, r1
 8009338:	fa00 f101 	lsl.w	r1, r0, r1
 800933c:	428c      	cmp	r4, r1
 800933e:	d10b      	bne.n	8009358 <__any_on+0x3e>
 8009340:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009344:	4293      	cmp	r3, r2
 8009346:	d803      	bhi.n	8009350 <__any_on+0x36>
 8009348:	2000      	movs	r0, #0
 800934a:	bd10      	pop	{r4, pc}
 800934c:	4603      	mov	r3, r0
 800934e:	e7f7      	b.n	8009340 <__any_on+0x26>
 8009350:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009354:	2900      	cmp	r1, #0
 8009356:	d0f5      	beq.n	8009344 <__any_on+0x2a>
 8009358:	2001      	movs	r0, #1
 800935a:	e7f6      	b.n	800934a <__any_on+0x30>

0800935c <_calloc_r>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	fba1 5402 	umull	r5, r4, r1, r2
 8009362:	b934      	cbnz	r4, 8009372 <_calloc_r+0x16>
 8009364:	4629      	mov	r1, r5
 8009366:	f000 f875 	bl	8009454 <_malloc_r>
 800936a:	4606      	mov	r6, r0
 800936c:	b928      	cbnz	r0, 800937a <_calloc_r+0x1e>
 800936e:	4630      	mov	r0, r6
 8009370:	bd70      	pop	{r4, r5, r6, pc}
 8009372:	220c      	movs	r2, #12
 8009374:	2600      	movs	r6, #0
 8009376:	6002      	str	r2, [r0, #0]
 8009378:	e7f9      	b.n	800936e <_calloc_r+0x12>
 800937a:	462a      	mov	r2, r5
 800937c:	4621      	mov	r1, r4
 800937e:	f7fc fa8f 	bl	80058a0 <memset>
 8009382:	e7f4      	b.n	800936e <_calloc_r+0x12>

08009384 <_free_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4605      	mov	r5, r0
 8009388:	2900      	cmp	r1, #0
 800938a:	d040      	beq.n	800940e <_free_r+0x8a>
 800938c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009390:	1f0c      	subs	r4, r1, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfb8      	it	lt
 8009396:	18e4      	addlt	r4, r4, r3
 8009398:	f001 fad6 	bl	800a948 <__malloc_lock>
 800939c:	4a1c      	ldr	r2, [pc, #112]	; (8009410 <_free_r+0x8c>)
 800939e:	6813      	ldr	r3, [r2, #0]
 80093a0:	b933      	cbnz	r3, 80093b0 <_free_r+0x2c>
 80093a2:	6063      	str	r3, [r4, #4]
 80093a4:	6014      	str	r4, [r2, #0]
 80093a6:	4628      	mov	r0, r5
 80093a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ac:	f001 bad2 	b.w	800a954 <__malloc_unlock>
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	d908      	bls.n	80093c6 <_free_r+0x42>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	1821      	adds	r1, r4, r0
 80093b8:	428b      	cmp	r3, r1
 80093ba:	bf01      	itttt	eq
 80093bc:	6819      	ldreq	r1, [r3, #0]
 80093be:	685b      	ldreq	r3, [r3, #4]
 80093c0:	1809      	addeq	r1, r1, r0
 80093c2:	6021      	streq	r1, [r4, #0]
 80093c4:	e7ed      	b.n	80093a2 <_free_r+0x1e>
 80093c6:	461a      	mov	r2, r3
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	b10b      	cbz	r3, 80093d0 <_free_r+0x4c>
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	d9fa      	bls.n	80093c6 <_free_r+0x42>
 80093d0:	6811      	ldr	r1, [r2, #0]
 80093d2:	1850      	adds	r0, r2, r1
 80093d4:	42a0      	cmp	r0, r4
 80093d6:	d10b      	bne.n	80093f0 <_free_r+0x6c>
 80093d8:	6820      	ldr	r0, [r4, #0]
 80093da:	4401      	add	r1, r0
 80093dc:	1850      	adds	r0, r2, r1
 80093de:	4283      	cmp	r3, r0
 80093e0:	6011      	str	r1, [r2, #0]
 80093e2:	d1e0      	bne.n	80093a6 <_free_r+0x22>
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	4401      	add	r1, r0
 80093ea:	6011      	str	r1, [r2, #0]
 80093ec:	6053      	str	r3, [r2, #4]
 80093ee:	e7da      	b.n	80093a6 <_free_r+0x22>
 80093f0:	d902      	bls.n	80093f8 <_free_r+0x74>
 80093f2:	230c      	movs	r3, #12
 80093f4:	602b      	str	r3, [r5, #0]
 80093f6:	e7d6      	b.n	80093a6 <_free_r+0x22>
 80093f8:	6820      	ldr	r0, [r4, #0]
 80093fa:	1821      	adds	r1, r4, r0
 80093fc:	428b      	cmp	r3, r1
 80093fe:	bf01      	itttt	eq
 8009400:	6819      	ldreq	r1, [r3, #0]
 8009402:	685b      	ldreq	r3, [r3, #4]
 8009404:	1809      	addeq	r1, r1, r0
 8009406:	6021      	streq	r1, [r4, #0]
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	6054      	str	r4, [r2, #4]
 800940c:	e7cb      	b.n	80093a6 <_free_r+0x22>
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	200005a0 	.word	0x200005a0

08009414 <sbrk_aligned>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4e0e      	ldr	r6, [pc, #56]	; (8009450 <sbrk_aligned+0x3c>)
 8009418:	460c      	mov	r4, r1
 800941a:	6831      	ldr	r1, [r6, #0]
 800941c:	4605      	mov	r5, r0
 800941e:	b911      	cbnz	r1, 8009426 <sbrk_aligned+0x12>
 8009420:	f000 fe7e 	bl	800a120 <_sbrk_r>
 8009424:	6030      	str	r0, [r6, #0]
 8009426:	4621      	mov	r1, r4
 8009428:	4628      	mov	r0, r5
 800942a:	f000 fe79 	bl	800a120 <_sbrk_r>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d00a      	beq.n	8009448 <sbrk_aligned+0x34>
 8009432:	1cc4      	adds	r4, r0, #3
 8009434:	f024 0403 	bic.w	r4, r4, #3
 8009438:	42a0      	cmp	r0, r4
 800943a:	d007      	beq.n	800944c <sbrk_aligned+0x38>
 800943c:	1a21      	subs	r1, r4, r0
 800943e:	4628      	mov	r0, r5
 8009440:	f000 fe6e 	bl	800a120 <_sbrk_r>
 8009444:	3001      	adds	r0, #1
 8009446:	d101      	bne.n	800944c <sbrk_aligned+0x38>
 8009448:	f04f 34ff 	mov.w	r4, #4294967295
 800944c:	4620      	mov	r0, r4
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	200005a4 	.word	0x200005a4

08009454 <_malloc_r>:
 8009454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009458:	1ccd      	adds	r5, r1, #3
 800945a:	f025 0503 	bic.w	r5, r5, #3
 800945e:	3508      	adds	r5, #8
 8009460:	2d0c      	cmp	r5, #12
 8009462:	bf38      	it	cc
 8009464:	250c      	movcc	r5, #12
 8009466:	2d00      	cmp	r5, #0
 8009468:	4607      	mov	r7, r0
 800946a:	db01      	blt.n	8009470 <_malloc_r+0x1c>
 800946c:	42a9      	cmp	r1, r5
 800946e:	d905      	bls.n	800947c <_malloc_r+0x28>
 8009470:	230c      	movs	r3, #12
 8009472:	2600      	movs	r6, #0
 8009474:	603b      	str	r3, [r7, #0]
 8009476:	4630      	mov	r0, r6
 8009478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947c:	4e2e      	ldr	r6, [pc, #184]	; (8009538 <_malloc_r+0xe4>)
 800947e:	f001 fa63 	bl	800a948 <__malloc_lock>
 8009482:	6833      	ldr	r3, [r6, #0]
 8009484:	461c      	mov	r4, r3
 8009486:	bb34      	cbnz	r4, 80094d6 <_malloc_r+0x82>
 8009488:	4629      	mov	r1, r5
 800948a:	4638      	mov	r0, r7
 800948c:	f7ff ffc2 	bl	8009414 <sbrk_aligned>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	4604      	mov	r4, r0
 8009494:	d14d      	bne.n	8009532 <_malloc_r+0xde>
 8009496:	6834      	ldr	r4, [r6, #0]
 8009498:	4626      	mov	r6, r4
 800949a:	2e00      	cmp	r6, #0
 800949c:	d140      	bne.n	8009520 <_malloc_r+0xcc>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	4631      	mov	r1, r6
 80094a2:	4638      	mov	r0, r7
 80094a4:	eb04 0803 	add.w	r8, r4, r3
 80094a8:	f000 fe3a 	bl	800a120 <_sbrk_r>
 80094ac:	4580      	cmp	r8, r0
 80094ae:	d13a      	bne.n	8009526 <_malloc_r+0xd2>
 80094b0:	6821      	ldr	r1, [r4, #0]
 80094b2:	3503      	adds	r5, #3
 80094b4:	1a6d      	subs	r5, r5, r1
 80094b6:	f025 0503 	bic.w	r5, r5, #3
 80094ba:	3508      	adds	r5, #8
 80094bc:	2d0c      	cmp	r5, #12
 80094be:	bf38      	it	cc
 80094c0:	250c      	movcc	r5, #12
 80094c2:	4638      	mov	r0, r7
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7ff ffa5 	bl	8009414 <sbrk_aligned>
 80094ca:	3001      	adds	r0, #1
 80094cc:	d02b      	beq.n	8009526 <_malloc_r+0xd2>
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	442b      	add	r3, r5
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	e00e      	b.n	80094f4 <_malloc_r+0xa0>
 80094d6:	6822      	ldr	r2, [r4, #0]
 80094d8:	1b52      	subs	r2, r2, r5
 80094da:	d41e      	bmi.n	800951a <_malloc_r+0xc6>
 80094dc:	2a0b      	cmp	r2, #11
 80094de:	d916      	bls.n	800950e <_malloc_r+0xba>
 80094e0:	1961      	adds	r1, r4, r5
 80094e2:	42a3      	cmp	r3, r4
 80094e4:	6025      	str	r5, [r4, #0]
 80094e6:	bf18      	it	ne
 80094e8:	6059      	strne	r1, [r3, #4]
 80094ea:	6863      	ldr	r3, [r4, #4]
 80094ec:	bf08      	it	eq
 80094ee:	6031      	streq	r1, [r6, #0]
 80094f0:	5162      	str	r2, [r4, r5]
 80094f2:	604b      	str	r3, [r1, #4]
 80094f4:	4638      	mov	r0, r7
 80094f6:	f104 060b 	add.w	r6, r4, #11
 80094fa:	f001 fa2b 	bl	800a954 <__malloc_unlock>
 80094fe:	f026 0607 	bic.w	r6, r6, #7
 8009502:	1d23      	adds	r3, r4, #4
 8009504:	1af2      	subs	r2, r6, r3
 8009506:	d0b6      	beq.n	8009476 <_malloc_r+0x22>
 8009508:	1b9b      	subs	r3, r3, r6
 800950a:	50a3      	str	r3, [r4, r2]
 800950c:	e7b3      	b.n	8009476 <_malloc_r+0x22>
 800950e:	6862      	ldr	r2, [r4, #4]
 8009510:	42a3      	cmp	r3, r4
 8009512:	bf0c      	ite	eq
 8009514:	6032      	streq	r2, [r6, #0]
 8009516:	605a      	strne	r2, [r3, #4]
 8009518:	e7ec      	b.n	80094f4 <_malloc_r+0xa0>
 800951a:	4623      	mov	r3, r4
 800951c:	6864      	ldr	r4, [r4, #4]
 800951e:	e7b2      	b.n	8009486 <_malloc_r+0x32>
 8009520:	4634      	mov	r4, r6
 8009522:	6876      	ldr	r6, [r6, #4]
 8009524:	e7b9      	b.n	800949a <_malloc_r+0x46>
 8009526:	230c      	movs	r3, #12
 8009528:	4638      	mov	r0, r7
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	f001 fa12 	bl	800a954 <__malloc_unlock>
 8009530:	e7a1      	b.n	8009476 <_malloc_r+0x22>
 8009532:	6025      	str	r5, [r4, #0]
 8009534:	e7de      	b.n	80094f4 <_malloc_r+0xa0>
 8009536:	bf00      	nop
 8009538:	200005a0 	.word	0x200005a0

0800953c <__ssputs_r>:
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	688e      	ldr	r6, [r1, #8]
 8009542:	4682      	mov	sl, r0
 8009544:	429e      	cmp	r6, r3
 8009546:	460c      	mov	r4, r1
 8009548:	4690      	mov	r8, r2
 800954a:	461f      	mov	r7, r3
 800954c:	d838      	bhi.n	80095c0 <__ssputs_r+0x84>
 800954e:	898a      	ldrh	r2, [r1, #12]
 8009550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009554:	d032      	beq.n	80095bc <__ssputs_r+0x80>
 8009556:	6825      	ldr	r5, [r4, #0]
 8009558:	6909      	ldr	r1, [r1, #16]
 800955a:	3301      	adds	r3, #1
 800955c:	eba5 0901 	sub.w	r9, r5, r1
 8009560:	6965      	ldr	r5, [r4, #20]
 8009562:	444b      	add	r3, r9
 8009564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800956c:	106d      	asrs	r5, r5, #1
 800956e:	429d      	cmp	r5, r3
 8009570:	bf38      	it	cc
 8009572:	461d      	movcc	r5, r3
 8009574:	0553      	lsls	r3, r2, #21
 8009576:	d531      	bpl.n	80095dc <__ssputs_r+0xa0>
 8009578:	4629      	mov	r1, r5
 800957a:	f7ff ff6b 	bl	8009454 <_malloc_r>
 800957e:	4606      	mov	r6, r0
 8009580:	b950      	cbnz	r0, 8009598 <__ssputs_r+0x5c>
 8009582:	230c      	movs	r3, #12
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	f8ca 3000 	str.w	r3, [sl]
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009598:	464a      	mov	r2, r9
 800959a:	6921      	ldr	r1, [r4, #16]
 800959c:	f7ff fa18 	bl	80089d0 <memcpy>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095aa:	81a3      	strh	r3, [r4, #12]
 80095ac:	6126      	str	r6, [r4, #16]
 80095ae:	444e      	add	r6, r9
 80095b0:	6026      	str	r6, [r4, #0]
 80095b2:	463e      	mov	r6, r7
 80095b4:	6165      	str	r5, [r4, #20]
 80095b6:	eba5 0509 	sub.w	r5, r5, r9
 80095ba:	60a5      	str	r5, [r4, #8]
 80095bc:	42be      	cmp	r6, r7
 80095be:	d900      	bls.n	80095c2 <__ssputs_r+0x86>
 80095c0:	463e      	mov	r6, r7
 80095c2:	4632      	mov	r2, r6
 80095c4:	4641      	mov	r1, r8
 80095c6:	6820      	ldr	r0, [r4, #0]
 80095c8:	f001 f9a4 	bl	800a914 <memmove>
 80095cc:	68a3      	ldr	r3, [r4, #8]
 80095ce:	2000      	movs	r0, #0
 80095d0:	1b9b      	subs	r3, r3, r6
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	4433      	add	r3, r6
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	e7db      	b.n	8009594 <__ssputs_r+0x58>
 80095dc:	462a      	mov	r2, r5
 80095de:	f001 f9bf 	bl	800a960 <_realloc_r>
 80095e2:	4606      	mov	r6, r0
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d1e1      	bne.n	80095ac <__ssputs_r+0x70>
 80095e8:	4650      	mov	r0, sl
 80095ea:	6921      	ldr	r1, [r4, #16]
 80095ec:	f7ff feca 	bl	8009384 <_free_r>
 80095f0:	e7c7      	b.n	8009582 <__ssputs_r+0x46>
	...

080095f4 <_svfiprintf_r>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	4698      	mov	r8, r3
 80095fa:	898b      	ldrh	r3, [r1, #12]
 80095fc:	4607      	mov	r7, r0
 80095fe:	061b      	lsls	r3, r3, #24
 8009600:	460d      	mov	r5, r1
 8009602:	4614      	mov	r4, r2
 8009604:	b09d      	sub	sp, #116	; 0x74
 8009606:	d50e      	bpl.n	8009626 <_svfiprintf_r+0x32>
 8009608:	690b      	ldr	r3, [r1, #16]
 800960a:	b963      	cbnz	r3, 8009626 <_svfiprintf_r+0x32>
 800960c:	2140      	movs	r1, #64	; 0x40
 800960e:	f7ff ff21 	bl	8009454 <_malloc_r>
 8009612:	6028      	str	r0, [r5, #0]
 8009614:	6128      	str	r0, [r5, #16]
 8009616:	b920      	cbnz	r0, 8009622 <_svfiprintf_r+0x2e>
 8009618:	230c      	movs	r3, #12
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e0d1      	b.n	80097c6 <_svfiprintf_r+0x1d2>
 8009622:	2340      	movs	r3, #64	; 0x40
 8009624:	616b      	str	r3, [r5, #20]
 8009626:	2300      	movs	r3, #0
 8009628:	9309      	str	r3, [sp, #36]	; 0x24
 800962a:	2320      	movs	r3, #32
 800962c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009630:	2330      	movs	r3, #48	; 0x30
 8009632:	f04f 0901 	mov.w	r9, #1
 8009636:	f8cd 800c 	str.w	r8, [sp, #12]
 800963a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80097e0 <_svfiprintf_r+0x1ec>
 800963e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009642:	4623      	mov	r3, r4
 8009644:	469a      	mov	sl, r3
 8009646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964a:	b10a      	cbz	r2, 8009650 <_svfiprintf_r+0x5c>
 800964c:	2a25      	cmp	r2, #37	; 0x25
 800964e:	d1f9      	bne.n	8009644 <_svfiprintf_r+0x50>
 8009650:	ebba 0b04 	subs.w	fp, sl, r4
 8009654:	d00b      	beq.n	800966e <_svfiprintf_r+0x7a>
 8009656:	465b      	mov	r3, fp
 8009658:	4622      	mov	r2, r4
 800965a:	4629      	mov	r1, r5
 800965c:	4638      	mov	r0, r7
 800965e:	f7ff ff6d 	bl	800953c <__ssputs_r>
 8009662:	3001      	adds	r0, #1
 8009664:	f000 80aa 	beq.w	80097bc <_svfiprintf_r+0x1c8>
 8009668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800966a:	445a      	add	r2, fp
 800966c:	9209      	str	r2, [sp, #36]	; 0x24
 800966e:	f89a 3000 	ldrb.w	r3, [sl]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 80a2 	beq.w	80097bc <_svfiprintf_r+0x1c8>
 8009678:	2300      	movs	r3, #0
 800967a:	f04f 32ff 	mov.w	r2, #4294967295
 800967e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009682:	f10a 0a01 	add.w	sl, sl, #1
 8009686:	9304      	str	r3, [sp, #16]
 8009688:	9307      	str	r3, [sp, #28]
 800968a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800968e:	931a      	str	r3, [sp, #104]	; 0x68
 8009690:	4654      	mov	r4, sl
 8009692:	2205      	movs	r2, #5
 8009694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009698:	4851      	ldr	r0, [pc, #324]	; (80097e0 <_svfiprintf_r+0x1ec>)
 800969a:	f7ff f98b 	bl	80089b4 <memchr>
 800969e:	9a04      	ldr	r2, [sp, #16]
 80096a0:	b9d8      	cbnz	r0, 80096da <_svfiprintf_r+0xe6>
 80096a2:	06d0      	lsls	r0, r2, #27
 80096a4:	bf44      	itt	mi
 80096a6:	2320      	movmi	r3, #32
 80096a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ac:	0711      	lsls	r1, r2, #28
 80096ae:	bf44      	itt	mi
 80096b0:	232b      	movmi	r3, #43	; 0x2b
 80096b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b6:	f89a 3000 	ldrb.w	r3, [sl]
 80096ba:	2b2a      	cmp	r3, #42	; 0x2a
 80096bc:	d015      	beq.n	80096ea <_svfiprintf_r+0xf6>
 80096be:	4654      	mov	r4, sl
 80096c0:	2000      	movs	r0, #0
 80096c2:	f04f 0c0a 	mov.w	ip, #10
 80096c6:	9a07      	ldr	r2, [sp, #28]
 80096c8:	4621      	mov	r1, r4
 80096ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ce:	3b30      	subs	r3, #48	; 0x30
 80096d0:	2b09      	cmp	r3, #9
 80096d2:	d94e      	bls.n	8009772 <_svfiprintf_r+0x17e>
 80096d4:	b1b0      	cbz	r0, 8009704 <_svfiprintf_r+0x110>
 80096d6:	9207      	str	r2, [sp, #28]
 80096d8:	e014      	b.n	8009704 <_svfiprintf_r+0x110>
 80096da:	eba0 0308 	sub.w	r3, r0, r8
 80096de:	fa09 f303 	lsl.w	r3, r9, r3
 80096e2:	4313      	orrs	r3, r2
 80096e4:	46a2      	mov	sl, r4
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	e7d2      	b.n	8009690 <_svfiprintf_r+0x9c>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	1d19      	adds	r1, r3, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	9103      	str	r1, [sp, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	bfbb      	ittet	lt
 80096f6:	425b      	neglt	r3, r3
 80096f8:	f042 0202 	orrlt.w	r2, r2, #2
 80096fc:	9307      	strge	r3, [sp, #28]
 80096fe:	9307      	strlt	r3, [sp, #28]
 8009700:	bfb8      	it	lt
 8009702:	9204      	strlt	r2, [sp, #16]
 8009704:	7823      	ldrb	r3, [r4, #0]
 8009706:	2b2e      	cmp	r3, #46	; 0x2e
 8009708:	d10c      	bne.n	8009724 <_svfiprintf_r+0x130>
 800970a:	7863      	ldrb	r3, [r4, #1]
 800970c:	2b2a      	cmp	r3, #42	; 0x2a
 800970e:	d135      	bne.n	800977c <_svfiprintf_r+0x188>
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	3402      	adds	r4, #2
 8009714:	1d1a      	adds	r2, r3, #4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	9203      	str	r2, [sp, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	bfb8      	it	lt
 800971e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80097e4 <_svfiprintf_r+0x1f0>
 8009728:	2203      	movs	r2, #3
 800972a:	4650      	mov	r0, sl
 800972c:	7821      	ldrb	r1, [r4, #0]
 800972e:	f7ff f941 	bl	80089b4 <memchr>
 8009732:	b140      	cbz	r0, 8009746 <_svfiprintf_r+0x152>
 8009734:	2340      	movs	r3, #64	; 0x40
 8009736:	eba0 000a 	sub.w	r0, r0, sl
 800973a:	fa03 f000 	lsl.w	r0, r3, r0
 800973e:	9b04      	ldr	r3, [sp, #16]
 8009740:	3401      	adds	r4, #1
 8009742:	4303      	orrs	r3, r0
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974a:	2206      	movs	r2, #6
 800974c:	4826      	ldr	r0, [pc, #152]	; (80097e8 <_svfiprintf_r+0x1f4>)
 800974e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009752:	f7ff f92f 	bl	80089b4 <memchr>
 8009756:	2800      	cmp	r0, #0
 8009758:	d038      	beq.n	80097cc <_svfiprintf_r+0x1d8>
 800975a:	4b24      	ldr	r3, [pc, #144]	; (80097ec <_svfiprintf_r+0x1f8>)
 800975c:	bb1b      	cbnz	r3, 80097a6 <_svfiprintf_r+0x1b2>
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	3307      	adds	r3, #7
 8009762:	f023 0307 	bic.w	r3, r3, #7
 8009766:	3308      	adds	r3, #8
 8009768:	9303      	str	r3, [sp, #12]
 800976a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976c:	4433      	add	r3, r6
 800976e:	9309      	str	r3, [sp, #36]	; 0x24
 8009770:	e767      	b.n	8009642 <_svfiprintf_r+0x4e>
 8009772:	460c      	mov	r4, r1
 8009774:	2001      	movs	r0, #1
 8009776:	fb0c 3202 	mla	r2, ip, r2, r3
 800977a:	e7a5      	b.n	80096c8 <_svfiprintf_r+0xd4>
 800977c:	2300      	movs	r3, #0
 800977e:	f04f 0c0a 	mov.w	ip, #10
 8009782:	4619      	mov	r1, r3
 8009784:	3401      	adds	r4, #1
 8009786:	9305      	str	r3, [sp, #20]
 8009788:	4620      	mov	r0, r4
 800978a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800978e:	3a30      	subs	r2, #48	; 0x30
 8009790:	2a09      	cmp	r2, #9
 8009792:	d903      	bls.n	800979c <_svfiprintf_r+0x1a8>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d0c5      	beq.n	8009724 <_svfiprintf_r+0x130>
 8009798:	9105      	str	r1, [sp, #20]
 800979a:	e7c3      	b.n	8009724 <_svfiprintf_r+0x130>
 800979c:	4604      	mov	r4, r0
 800979e:	2301      	movs	r3, #1
 80097a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097a4:	e7f0      	b.n	8009788 <_svfiprintf_r+0x194>
 80097a6:	ab03      	add	r3, sp, #12
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	462a      	mov	r2, r5
 80097ac:	4638      	mov	r0, r7
 80097ae:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <_svfiprintf_r+0x1fc>)
 80097b0:	a904      	add	r1, sp, #16
 80097b2:	f7fc f91b 	bl	80059ec <_printf_float>
 80097b6:	1c42      	adds	r2, r0, #1
 80097b8:	4606      	mov	r6, r0
 80097ba:	d1d6      	bne.n	800976a <_svfiprintf_r+0x176>
 80097bc:	89ab      	ldrh	r3, [r5, #12]
 80097be:	065b      	lsls	r3, r3, #25
 80097c0:	f53f af2c 	bmi.w	800961c <_svfiprintf_r+0x28>
 80097c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097c6:	b01d      	add	sp, #116	; 0x74
 80097c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097cc:	ab03      	add	r3, sp, #12
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	462a      	mov	r2, r5
 80097d2:	4638      	mov	r0, r7
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <_svfiprintf_r+0x1fc>)
 80097d6:	a904      	add	r1, sp, #16
 80097d8:	f7fc fba4 	bl	8005f24 <_printf_i>
 80097dc:	e7eb      	b.n	80097b6 <_svfiprintf_r+0x1c2>
 80097de:	bf00      	nop
 80097e0:	0800b25c 	.word	0x0800b25c
 80097e4:	0800b262 	.word	0x0800b262
 80097e8:	0800b266 	.word	0x0800b266
 80097ec:	080059ed 	.word	0x080059ed
 80097f0:	0800953d 	.word	0x0800953d

080097f4 <_sungetc_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	1c4b      	adds	r3, r1, #1
 80097f8:	4614      	mov	r4, r2
 80097fa:	d103      	bne.n	8009804 <_sungetc_r+0x10>
 80097fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009800:	4628      	mov	r0, r5
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	8993      	ldrh	r3, [r2, #12]
 8009806:	b2cd      	uxtb	r5, r1
 8009808:	f023 0320 	bic.w	r3, r3, #32
 800980c:	8193      	strh	r3, [r2, #12]
 800980e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009810:	6852      	ldr	r2, [r2, #4]
 8009812:	b18b      	cbz	r3, 8009838 <_sungetc_r+0x44>
 8009814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009816:	4293      	cmp	r3, r2
 8009818:	dd08      	ble.n	800982c <_sungetc_r+0x38>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	1e5a      	subs	r2, r3, #1
 800981e:	6022      	str	r2, [r4, #0]
 8009820:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	3301      	adds	r3, #1
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	e7e9      	b.n	8009800 <_sungetc_r+0xc>
 800982c:	4621      	mov	r1, r4
 800982e:	f000 fd47 	bl	800a2c0 <__submore>
 8009832:	2800      	cmp	r0, #0
 8009834:	d0f1      	beq.n	800981a <_sungetc_r+0x26>
 8009836:	e7e1      	b.n	80097fc <_sungetc_r+0x8>
 8009838:	6921      	ldr	r1, [r4, #16]
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	b151      	cbz	r1, 8009854 <_sungetc_r+0x60>
 800983e:	4299      	cmp	r1, r3
 8009840:	d208      	bcs.n	8009854 <_sungetc_r+0x60>
 8009842:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009846:	42a9      	cmp	r1, r5
 8009848:	d104      	bne.n	8009854 <_sungetc_r+0x60>
 800984a:	3b01      	subs	r3, #1
 800984c:	3201      	adds	r2, #1
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	6062      	str	r2, [r4, #4]
 8009852:	e7d5      	b.n	8009800 <_sungetc_r+0xc>
 8009854:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800985c:	6363      	str	r3, [r4, #52]	; 0x34
 800985e:	2303      	movs	r3, #3
 8009860:	63a3      	str	r3, [r4, #56]	; 0x38
 8009862:	4623      	mov	r3, r4
 8009864:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	2301      	movs	r3, #1
 800986c:	e7dc      	b.n	8009828 <_sungetc_r+0x34>

0800986e <__ssrefill_r>:
 800986e:	b510      	push	{r4, lr}
 8009870:	460c      	mov	r4, r1
 8009872:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009874:	b169      	cbz	r1, 8009892 <__ssrefill_r+0x24>
 8009876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800987a:	4299      	cmp	r1, r3
 800987c:	d001      	beq.n	8009882 <__ssrefill_r+0x14>
 800987e:	f7ff fd81 	bl	8009384 <_free_r>
 8009882:	2000      	movs	r0, #0
 8009884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009886:	6360      	str	r0, [r4, #52]	; 0x34
 8009888:	6063      	str	r3, [r4, #4]
 800988a:	b113      	cbz	r3, 8009892 <__ssrefill_r+0x24>
 800988c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	bd10      	pop	{r4, pc}
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	2300      	movs	r3, #0
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f043 0320 	orr.w	r3, r3, #32
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	e7f3      	b.n	8009890 <__ssrefill_r+0x22>

080098a8 <__ssvfiscanf_r>:
 80098a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ac:	460c      	mov	r4, r1
 80098ae:	2100      	movs	r1, #0
 80098b0:	4606      	mov	r6, r0
 80098b2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80098b6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80098ba:	49a7      	ldr	r1, [pc, #668]	; (8009b58 <__ssvfiscanf_r+0x2b0>)
 80098bc:	f10d 0804 	add.w	r8, sp, #4
 80098c0:	91a0      	str	r1, [sp, #640]	; 0x280
 80098c2:	49a6      	ldr	r1, [pc, #664]	; (8009b5c <__ssvfiscanf_r+0x2b4>)
 80098c4:	4fa6      	ldr	r7, [pc, #664]	; (8009b60 <__ssvfiscanf_r+0x2b8>)
 80098c6:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009b64 <__ssvfiscanf_r+0x2bc>
 80098ca:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80098ce:	91a1      	str	r1, [sp, #644]	; 0x284
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	7813      	ldrb	r3, [r2, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 815c 	beq.w	8009b92 <__ssvfiscanf_r+0x2ea>
 80098da:	5dd9      	ldrb	r1, [r3, r7]
 80098dc:	1c55      	adds	r5, r2, #1
 80098de:	f011 0108 	ands.w	r1, r1, #8
 80098e2:	d019      	beq.n	8009918 <__ssvfiscanf_r+0x70>
 80098e4:	6863      	ldr	r3, [r4, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	dd0f      	ble.n	800990a <__ssvfiscanf_r+0x62>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	781a      	ldrb	r2, [r3, #0]
 80098ee:	5cba      	ldrb	r2, [r7, r2]
 80098f0:	0712      	lsls	r2, r2, #28
 80098f2:	d401      	bmi.n	80098f8 <__ssvfiscanf_r+0x50>
 80098f4:	462a      	mov	r2, r5
 80098f6:	e7ec      	b.n	80098d2 <__ssvfiscanf_r+0x2a>
 80098f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80098fa:	3301      	adds	r3, #1
 80098fc:	3201      	adds	r2, #1
 80098fe:	9245      	str	r2, [sp, #276]	; 0x114
 8009900:	6862      	ldr	r2, [r4, #4]
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	3a01      	subs	r2, #1
 8009906:	6062      	str	r2, [r4, #4]
 8009908:	e7ec      	b.n	80098e4 <__ssvfiscanf_r+0x3c>
 800990a:	4621      	mov	r1, r4
 800990c:	4630      	mov	r0, r6
 800990e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009910:	4798      	blx	r3
 8009912:	2800      	cmp	r0, #0
 8009914:	d0e9      	beq.n	80098ea <__ssvfiscanf_r+0x42>
 8009916:	e7ed      	b.n	80098f4 <__ssvfiscanf_r+0x4c>
 8009918:	2b25      	cmp	r3, #37	; 0x25
 800991a:	d012      	beq.n	8009942 <__ssvfiscanf_r+0x9a>
 800991c:	469a      	mov	sl, r3
 800991e:	6863      	ldr	r3, [r4, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	f340 8094 	ble.w	8009a4e <__ssvfiscanf_r+0x1a6>
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	7813      	ldrb	r3, [r2, #0]
 800992a:	4553      	cmp	r3, sl
 800992c:	f040 8131 	bne.w	8009b92 <__ssvfiscanf_r+0x2ea>
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	3201      	adds	r2, #1
 8009934:	3b01      	subs	r3, #1
 8009936:	6063      	str	r3, [r4, #4]
 8009938:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800993a:	6022      	str	r2, [r4, #0]
 800993c:	3301      	adds	r3, #1
 800993e:	9345      	str	r3, [sp, #276]	; 0x114
 8009940:	e7d8      	b.n	80098f4 <__ssvfiscanf_r+0x4c>
 8009942:	9141      	str	r1, [sp, #260]	; 0x104
 8009944:	9143      	str	r1, [sp, #268]	; 0x10c
 8009946:	7853      	ldrb	r3, [r2, #1]
 8009948:	2b2a      	cmp	r3, #42	; 0x2a
 800994a:	bf04      	itt	eq
 800994c:	2310      	moveq	r3, #16
 800994e:	1c95      	addeq	r5, r2, #2
 8009950:	f04f 020a 	mov.w	r2, #10
 8009954:	bf08      	it	eq
 8009956:	9341      	streq	r3, [sp, #260]	; 0x104
 8009958:	46aa      	mov	sl, r5
 800995a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800995e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009962:	2b09      	cmp	r3, #9
 8009964:	d91d      	bls.n	80099a2 <__ssvfiscanf_r+0xfa>
 8009966:	2203      	movs	r2, #3
 8009968:	487e      	ldr	r0, [pc, #504]	; (8009b64 <__ssvfiscanf_r+0x2bc>)
 800996a:	f7ff f823 	bl	80089b4 <memchr>
 800996e:	b140      	cbz	r0, 8009982 <__ssvfiscanf_r+0xda>
 8009970:	2301      	movs	r3, #1
 8009972:	4655      	mov	r5, sl
 8009974:	eba0 0009 	sub.w	r0, r0, r9
 8009978:	fa03 f000 	lsl.w	r0, r3, r0
 800997c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800997e:	4318      	orrs	r0, r3
 8009980:	9041      	str	r0, [sp, #260]	; 0x104
 8009982:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009986:	2b78      	cmp	r3, #120	; 0x78
 8009988:	d806      	bhi.n	8009998 <__ssvfiscanf_r+0xf0>
 800998a:	2b57      	cmp	r3, #87	; 0x57
 800998c:	d810      	bhi.n	80099b0 <__ssvfiscanf_r+0x108>
 800998e:	2b25      	cmp	r3, #37	; 0x25
 8009990:	d0c4      	beq.n	800991c <__ssvfiscanf_r+0x74>
 8009992:	d857      	bhi.n	8009a44 <__ssvfiscanf_r+0x19c>
 8009994:	2b00      	cmp	r3, #0
 8009996:	d065      	beq.n	8009a64 <__ssvfiscanf_r+0x1bc>
 8009998:	2303      	movs	r3, #3
 800999a:	9347      	str	r3, [sp, #284]	; 0x11c
 800999c:	230a      	movs	r3, #10
 800999e:	9342      	str	r3, [sp, #264]	; 0x108
 80099a0:	e072      	b.n	8009a88 <__ssvfiscanf_r+0x1e0>
 80099a2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80099a4:	4655      	mov	r5, sl
 80099a6:	fb02 1103 	mla	r1, r2, r3, r1
 80099aa:	3930      	subs	r1, #48	; 0x30
 80099ac:	9143      	str	r1, [sp, #268]	; 0x10c
 80099ae:	e7d3      	b.n	8009958 <__ssvfiscanf_r+0xb0>
 80099b0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80099b4:	2a20      	cmp	r2, #32
 80099b6:	d8ef      	bhi.n	8009998 <__ssvfiscanf_r+0xf0>
 80099b8:	a101      	add	r1, pc, #4	; (adr r1, 80099c0 <__ssvfiscanf_r+0x118>)
 80099ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099be:	bf00      	nop
 80099c0:	08009a73 	.word	0x08009a73
 80099c4:	08009999 	.word	0x08009999
 80099c8:	08009999 	.word	0x08009999
 80099cc:	08009ad1 	.word	0x08009ad1
 80099d0:	08009999 	.word	0x08009999
 80099d4:	08009999 	.word	0x08009999
 80099d8:	08009999 	.word	0x08009999
 80099dc:	08009999 	.word	0x08009999
 80099e0:	08009999 	.word	0x08009999
 80099e4:	08009999 	.word	0x08009999
 80099e8:	08009999 	.word	0x08009999
 80099ec:	08009ae7 	.word	0x08009ae7
 80099f0:	08009abd 	.word	0x08009abd
 80099f4:	08009a4b 	.word	0x08009a4b
 80099f8:	08009a4b 	.word	0x08009a4b
 80099fc:	08009a4b 	.word	0x08009a4b
 8009a00:	08009999 	.word	0x08009999
 8009a04:	08009ac1 	.word	0x08009ac1
 8009a08:	08009999 	.word	0x08009999
 8009a0c:	08009999 	.word	0x08009999
 8009a10:	08009999 	.word	0x08009999
 8009a14:	08009999 	.word	0x08009999
 8009a18:	08009af7 	.word	0x08009af7
 8009a1c:	08009ac9 	.word	0x08009ac9
 8009a20:	08009a6b 	.word	0x08009a6b
 8009a24:	08009999 	.word	0x08009999
 8009a28:	08009999 	.word	0x08009999
 8009a2c:	08009af3 	.word	0x08009af3
 8009a30:	08009999 	.word	0x08009999
 8009a34:	08009abd 	.word	0x08009abd
 8009a38:	08009999 	.word	0x08009999
 8009a3c:	08009999 	.word	0x08009999
 8009a40:	08009a73 	.word	0x08009a73
 8009a44:	3b45      	subs	r3, #69	; 0x45
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d8a6      	bhi.n	8009998 <__ssvfiscanf_r+0xf0>
 8009a4a:	2305      	movs	r3, #5
 8009a4c:	e01b      	b.n	8009a86 <__ssvfiscanf_r+0x1de>
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4630      	mov	r0, r6
 8009a52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a54:	4798      	blx	r3
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f43f af65 	beq.w	8009926 <__ssvfiscanf_r+0x7e>
 8009a5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f040 808d 	bne.w	8009b7e <__ssvfiscanf_r+0x2d6>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	e08f      	b.n	8009b8a <__ssvfiscanf_r+0x2e2>
 8009a6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a6c:	f042 0220 	orr.w	r2, r2, #32
 8009a70:	9241      	str	r2, [sp, #260]	; 0x104
 8009a72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a78:	9241      	str	r2, [sp, #260]	; 0x104
 8009a7a:	2210      	movs	r2, #16
 8009a7c:	2b6f      	cmp	r3, #111	; 0x6f
 8009a7e:	bf34      	ite	cc
 8009a80:	2303      	movcc	r3, #3
 8009a82:	2304      	movcs	r3, #4
 8009a84:	9242      	str	r2, [sp, #264]	; 0x108
 8009a86:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a88:	6863      	ldr	r3, [r4, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	dd42      	ble.n	8009b14 <__ssvfiscanf_r+0x26c>
 8009a8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a90:	0659      	lsls	r1, r3, #25
 8009a92:	d404      	bmi.n	8009a9e <__ssvfiscanf_r+0x1f6>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	781a      	ldrb	r2, [r3, #0]
 8009a98:	5cba      	ldrb	r2, [r7, r2]
 8009a9a:	0712      	lsls	r2, r2, #28
 8009a9c:	d441      	bmi.n	8009b22 <__ssvfiscanf_r+0x27a>
 8009a9e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	dc50      	bgt.n	8009b46 <__ssvfiscanf_r+0x29e>
 8009aa4:	466b      	mov	r3, sp
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	a941      	add	r1, sp, #260	; 0x104
 8009aac:	f000 f9ce 	bl	8009e4c <_scanf_chars>
 8009ab0:	2801      	cmp	r0, #1
 8009ab2:	d06e      	beq.n	8009b92 <__ssvfiscanf_r+0x2ea>
 8009ab4:	2802      	cmp	r0, #2
 8009ab6:	f47f af1d 	bne.w	80098f4 <__ssvfiscanf_r+0x4c>
 8009aba:	e7cf      	b.n	8009a5c <__ssvfiscanf_r+0x1b4>
 8009abc:	220a      	movs	r2, #10
 8009abe:	e7dd      	b.n	8009a7c <__ssvfiscanf_r+0x1d4>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9342      	str	r3, [sp, #264]	; 0x108
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e7de      	b.n	8009a86 <__ssvfiscanf_r+0x1de>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	9342      	str	r3, [sp, #264]	; 0x108
 8009acc:	2304      	movs	r3, #4
 8009ace:	e7da      	b.n	8009a86 <__ssvfiscanf_r+0x1de>
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f000 fb34 	bl	800a140 <__sccl>
 8009ad8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ada:	4605      	mov	r5, r0
 8009adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae0:	9341      	str	r3, [sp, #260]	; 0x104
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e7cf      	b.n	8009a86 <__ssvfiscanf_r+0x1de>
 8009ae6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aec:	9341      	str	r3, [sp, #260]	; 0x104
 8009aee:	2300      	movs	r3, #0
 8009af0:	e7c9      	b.n	8009a86 <__ssvfiscanf_r+0x1de>
 8009af2:	2302      	movs	r3, #2
 8009af4:	e7c7      	b.n	8009a86 <__ssvfiscanf_r+0x1de>
 8009af6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009af8:	06c3      	lsls	r3, r0, #27
 8009afa:	f53f aefb 	bmi.w	80098f4 <__ssvfiscanf_r+0x4c>
 8009afe:	9b00      	ldr	r3, [sp, #0]
 8009b00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b02:	1d19      	adds	r1, r3, #4
 8009b04:	9100      	str	r1, [sp, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f010 0f01 	tst.w	r0, #1
 8009b0c:	bf14      	ite	ne
 8009b0e:	801a      	strhne	r2, [r3, #0]
 8009b10:	601a      	streq	r2, [r3, #0]
 8009b12:	e6ef      	b.n	80098f4 <__ssvfiscanf_r+0x4c>
 8009b14:	4621      	mov	r1, r4
 8009b16:	4630      	mov	r0, r6
 8009b18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b1a:	4798      	blx	r3
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d0b6      	beq.n	8009a8e <__ssvfiscanf_r+0x1e6>
 8009b20:	e79c      	b.n	8009a5c <__ssvfiscanf_r+0x1b4>
 8009b22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b24:	3201      	adds	r2, #1
 8009b26:	9245      	str	r2, [sp, #276]	; 0x114
 8009b28:	6862      	ldr	r2, [r4, #4]
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	6062      	str	r2, [r4, #4]
 8009b30:	dd02      	ble.n	8009b38 <__ssvfiscanf_r+0x290>
 8009b32:	3301      	adds	r3, #1
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	e7ad      	b.n	8009a94 <__ssvfiscanf_r+0x1ec>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b3e:	4798      	blx	r3
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0a7      	beq.n	8009a94 <__ssvfiscanf_r+0x1ec>
 8009b44:	e78a      	b.n	8009a5c <__ssvfiscanf_r+0x1b4>
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	dc0e      	bgt.n	8009b68 <__ssvfiscanf_r+0x2c0>
 8009b4a:	466b      	mov	r3, sp
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	4630      	mov	r0, r6
 8009b50:	a941      	add	r1, sp, #260	; 0x104
 8009b52:	f000 f9d5 	bl	8009f00 <_scanf_i>
 8009b56:	e7ab      	b.n	8009ab0 <__ssvfiscanf_r+0x208>
 8009b58:	080097f5 	.word	0x080097f5
 8009b5c:	0800986f 	.word	0x0800986f
 8009b60:	0800af11 	.word	0x0800af11
 8009b64:	0800b262 	.word	0x0800b262
 8009b68:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <__ssvfiscanf_r+0x2f0>)
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f43f aec2 	beq.w	80098f4 <__ssvfiscanf_r+0x4c>
 8009b70:	466b      	mov	r3, sp
 8009b72:	4622      	mov	r2, r4
 8009b74:	4630      	mov	r0, r6
 8009b76:	a941      	add	r1, sp, #260	; 0x104
 8009b78:	f7fc fafa 	bl	8006170 <_scanf_float>
 8009b7c:	e798      	b.n	8009ab0 <__ssvfiscanf_r+0x208>
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b84:	bf18      	it	ne
 8009b86:	f04f 30ff 	movne.w	r0, #4294967295
 8009b8a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b92:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b94:	e7f9      	b.n	8009b8a <__ssvfiscanf_r+0x2e2>
 8009b96:	bf00      	nop
 8009b98:	08006171 	.word	0x08006171

08009b9c <__sfputc_r>:
 8009b9c:	6893      	ldr	r3, [r2, #8]
 8009b9e:	b410      	push	{r4}
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	6093      	str	r3, [r2, #8]
 8009ba6:	da07      	bge.n	8009bb8 <__sfputc_r+0x1c>
 8009ba8:	6994      	ldr	r4, [r2, #24]
 8009baa:	42a3      	cmp	r3, r4
 8009bac:	db01      	blt.n	8009bb2 <__sfputc_r+0x16>
 8009bae:	290a      	cmp	r1, #10
 8009bb0:	d102      	bne.n	8009bb8 <__sfputc_r+0x1c>
 8009bb2:	bc10      	pop	{r4}
 8009bb4:	f000 bbbc 	b.w	800a330 <__swbuf_r>
 8009bb8:	6813      	ldr	r3, [r2, #0]
 8009bba:	1c58      	adds	r0, r3, #1
 8009bbc:	6010      	str	r0, [r2, #0]
 8009bbe:	7019      	strb	r1, [r3, #0]
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	bc10      	pop	{r4}
 8009bc4:	4770      	bx	lr

08009bc6 <__sfputs_r>:
 8009bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc8:	4606      	mov	r6, r0
 8009bca:	460f      	mov	r7, r1
 8009bcc:	4614      	mov	r4, r2
 8009bce:	18d5      	adds	r5, r2, r3
 8009bd0:	42ac      	cmp	r4, r5
 8009bd2:	d101      	bne.n	8009bd8 <__sfputs_r+0x12>
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	e007      	b.n	8009be8 <__sfputs_r+0x22>
 8009bd8:	463a      	mov	r2, r7
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be0:	f7ff ffdc 	bl	8009b9c <__sfputc_r>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d1f3      	bne.n	8009bd0 <__sfputs_r+0xa>
 8009be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bec <_vfiprintf_r>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	460d      	mov	r5, r1
 8009bf2:	4614      	mov	r4, r2
 8009bf4:	4698      	mov	r8, r3
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	b09d      	sub	sp, #116	; 0x74
 8009bfa:	b118      	cbz	r0, 8009c04 <_vfiprintf_r+0x18>
 8009bfc:	6983      	ldr	r3, [r0, #24]
 8009bfe:	b90b      	cbnz	r3, 8009c04 <_vfiprintf_r+0x18>
 8009c00:	f000 fd82 	bl	800a708 <__sinit>
 8009c04:	4b89      	ldr	r3, [pc, #548]	; (8009e2c <_vfiprintf_r+0x240>)
 8009c06:	429d      	cmp	r5, r3
 8009c08:	d11b      	bne.n	8009c42 <_vfiprintf_r+0x56>
 8009c0a:	6875      	ldr	r5, [r6, #4]
 8009c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c0e:	07d9      	lsls	r1, r3, #31
 8009c10:	d405      	bmi.n	8009c1e <_vfiprintf_r+0x32>
 8009c12:	89ab      	ldrh	r3, [r5, #12]
 8009c14:	059a      	lsls	r2, r3, #22
 8009c16:	d402      	bmi.n	8009c1e <_vfiprintf_r+0x32>
 8009c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1a:	f000 fe13 	bl	800a844 <__retarget_lock_acquire_recursive>
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	071b      	lsls	r3, r3, #28
 8009c22:	d501      	bpl.n	8009c28 <_vfiprintf_r+0x3c>
 8009c24:	692b      	ldr	r3, [r5, #16]
 8009c26:	b9eb      	cbnz	r3, 8009c64 <_vfiprintf_r+0x78>
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f000 fbe0 	bl	800a3f0 <__swsetup_r>
 8009c30:	b1c0      	cbz	r0, 8009c64 <_vfiprintf_r+0x78>
 8009c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c34:	07dc      	lsls	r4, r3, #31
 8009c36:	d50e      	bpl.n	8009c56 <_vfiprintf_r+0x6a>
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	b01d      	add	sp, #116	; 0x74
 8009c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c42:	4b7b      	ldr	r3, [pc, #492]	; (8009e30 <_vfiprintf_r+0x244>)
 8009c44:	429d      	cmp	r5, r3
 8009c46:	d101      	bne.n	8009c4c <_vfiprintf_r+0x60>
 8009c48:	68b5      	ldr	r5, [r6, #8]
 8009c4a:	e7df      	b.n	8009c0c <_vfiprintf_r+0x20>
 8009c4c:	4b79      	ldr	r3, [pc, #484]	; (8009e34 <_vfiprintf_r+0x248>)
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	bf08      	it	eq
 8009c52:	68f5      	ldreq	r5, [r6, #12]
 8009c54:	e7da      	b.n	8009c0c <_vfiprintf_r+0x20>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	0598      	lsls	r0, r3, #22
 8009c5a:	d4ed      	bmi.n	8009c38 <_vfiprintf_r+0x4c>
 8009c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c5e:	f000 fdf2 	bl	800a846 <__retarget_lock_release_recursive>
 8009c62:	e7e9      	b.n	8009c38 <_vfiprintf_r+0x4c>
 8009c64:	2300      	movs	r3, #0
 8009c66:	9309      	str	r3, [sp, #36]	; 0x24
 8009c68:	2320      	movs	r3, #32
 8009c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c6e:	2330      	movs	r3, #48	; 0x30
 8009c70:	f04f 0901 	mov.w	r9, #1
 8009c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e38 <_vfiprintf_r+0x24c>
 8009c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c80:	4623      	mov	r3, r4
 8009c82:	469a      	mov	sl, r3
 8009c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c88:	b10a      	cbz	r2, 8009c8e <_vfiprintf_r+0xa2>
 8009c8a:	2a25      	cmp	r2, #37	; 0x25
 8009c8c:	d1f9      	bne.n	8009c82 <_vfiprintf_r+0x96>
 8009c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c92:	d00b      	beq.n	8009cac <_vfiprintf_r+0xc0>
 8009c94:	465b      	mov	r3, fp
 8009c96:	4622      	mov	r2, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7ff ff93 	bl	8009bc6 <__sfputs_r>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f000 80aa 	beq.w	8009dfa <_vfiprintf_r+0x20e>
 8009ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca8:	445a      	add	r2, fp
 8009caa:	9209      	str	r2, [sp, #36]	; 0x24
 8009cac:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 80a2 	beq.w	8009dfa <_vfiprintf_r+0x20e>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc0:	f10a 0a01 	add.w	sl, sl, #1
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	9307      	str	r3, [sp, #28]
 8009cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8009cce:	4654      	mov	r4, sl
 8009cd0:	2205      	movs	r2, #5
 8009cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd6:	4858      	ldr	r0, [pc, #352]	; (8009e38 <_vfiprintf_r+0x24c>)
 8009cd8:	f7fe fe6c 	bl	80089b4 <memchr>
 8009cdc:	9a04      	ldr	r2, [sp, #16]
 8009cde:	b9d8      	cbnz	r0, 8009d18 <_vfiprintf_r+0x12c>
 8009ce0:	06d1      	lsls	r1, r2, #27
 8009ce2:	bf44      	itt	mi
 8009ce4:	2320      	movmi	r3, #32
 8009ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cea:	0713      	lsls	r3, r2, #28
 8009cec:	bf44      	itt	mi
 8009cee:	232b      	movmi	r3, #43	; 0x2b
 8009cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cfa:	d015      	beq.n	8009d28 <_vfiprintf_r+0x13c>
 8009cfc:	4654      	mov	r4, sl
 8009cfe:	2000      	movs	r0, #0
 8009d00:	f04f 0c0a 	mov.w	ip, #10
 8009d04:	9a07      	ldr	r2, [sp, #28]
 8009d06:	4621      	mov	r1, r4
 8009d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d0c:	3b30      	subs	r3, #48	; 0x30
 8009d0e:	2b09      	cmp	r3, #9
 8009d10:	d94e      	bls.n	8009db0 <_vfiprintf_r+0x1c4>
 8009d12:	b1b0      	cbz	r0, 8009d42 <_vfiprintf_r+0x156>
 8009d14:	9207      	str	r2, [sp, #28]
 8009d16:	e014      	b.n	8009d42 <_vfiprintf_r+0x156>
 8009d18:	eba0 0308 	sub.w	r3, r0, r8
 8009d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d20:	4313      	orrs	r3, r2
 8009d22:	46a2      	mov	sl, r4
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	e7d2      	b.n	8009cce <_vfiprintf_r+0xe2>
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	1d19      	adds	r1, r3, #4
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	9103      	str	r1, [sp, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bfbb      	ittet	lt
 8009d34:	425b      	neglt	r3, r3
 8009d36:	f042 0202 	orrlt.w	r2, r2, #2
 8009d3a:	9307      	strge	r3, [sp, #28]
 8009d3c:	9307      	strlt	r3, [sp, #28]
 8009d3e:	bfb8      	it	lt
 8009d40:	9204      	strlt	r2, [sp, #16]
 8009d42:	7823      	ldrb	r3, [r4, #0]
 8009d44:	2b2e      	cmp	r3, #46	; 0x2e
 8009d46:	d10c      	bne.n	8009d62 <_vfiprintf_r+0x176>
 8009d48:	7863      	ldrb	r3, [r4, #1]
 8009d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d4c:	d135      	bne.n	8009dba <_vfiprintf_r+0x1ce>
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	3402      	adds	r4, #2
 8009d52:	1d1a      	adds	r2, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	9203      	str	r2, [sp, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bfb8      	it	lt
 8009d5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e3c <_vfiprintf_r+0x250>
 8009d66:	2203      	movs	r2, #3
 8009d68:	4650      	mov	r0, sl
 8009d6a:	7821      	ldrb	r1, [r4, #0]
 8009d6c:	f7fe fe22 	bl	80089b4 <memchr>
 8009d70:	b140      	cbz	r0, 8009d84 <_vfiprintf_r+0x198>
 8009d72:	2340      	movs	r3, #64	; 0x40
 8009d74:	eba0 000a 	sub.w	r0, r0, sl
 8009d78:	fa03 f000 	lsl.w	r0, r3, r0
 8009d7c:	9b04      	ldr	r3, [sp, #16]
 8009d7e:	3401      	adds	r4, #1
 8009d80:	4303      	orrs	r3, r0
 8009d82:	9304      	str	r3, [sp, #16]
 8009d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d88:	2206      	movs	r2, #6
 8009d8a:	482d      	ldr	r0, [pc, #180]	; (8009e40 <_vfiprintf_r+0x254>)
 8009d8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d90:	f7fe fe10 	bl	80089b4 <memchr>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d03f      	beq.n	8009e18 <_vfiprintf_r+0x22c>
 8009d98:	4b2a      	ldr	r3, [pc, #168]	; (8009e44 <_vfiprintf_r+0x258>)
 8009d9a:	bb1b      	cbnz	r3, 8009de4 <_vfiprintf_r+0x1f8>
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	3307      	adds	r3, #7
 8009da0:	f023 0307 	bic.w	r3, r3, #7
 8009da4:	3308      	adds	r3, #8
 8009da6:	9303      	str	r3, [sp, #12]
 8009da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009daa:	443b      	add	r3, r7
 8009dac:	9309      	str	r3, [sp, #36]	; 0x24
 8009dae:	e767      	b.n	8009c80 <_vfiprintf_r+0x94>
 8009db0:	460c      	mov	r4, r1
 8009db2:	2001      	movs	r0, #1
 8009db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009db8:	e7a5      	b.n	8009d06 <_vfiprintf_r+0x11a>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f04f 0c0a 	mov.w	ip, #10
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	3401      	adds	r4, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dcc:	3a30      	subs	r2, #48	; 0x30
 8009dce:	2a09      	cmp	r2, #9
 8009dd0:	d903      	bls.n	8009dda <_vfiprintf_r+0x1ee>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0c5      	beq.n	8009d62 <_vfiprintf_r+0x176>
 8009dd6:	9105      	str	r1, [sp, #20]
 8009dd8:	e7c3      	b.n	8009d62 <_vfiprintf_r+0x176>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	2301      	movs	r3, #1
 8009dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de2:	e7f0      	b.n	8009dc6 <_vfiprintf_r+0x1da>
 8009de4:	ab03      	add	r3, sp, #12
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	462a      	mov	r2, r5
 8009dea:	4630      	mov	r0, r6
 8009dec:	4b16      	ldr	r3, [pc, #88]	; (8009e48 <_vfiprintf_r+0x25c>)
 8009dee:	a904      	add	r1, sp, #16
 8009df0:	f7fb fdfc 	bl	80059ec <_printf_float>
 8009df4:	4607      	mov	r7, r0
 8009df6:	1c78      	adds	r0, r7, #1
 8009df8:	d1d6      	bne.n	8009da8 <_vfiprintf_r+0x1bc>
 8009dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dfc:	07d9      	lsls	r1, r3, #31
 8009dfe:	d405      	bmi.n	8009e0c <_vfiprintf_r+0x220>
 8009e00:	89ab      	ldrh	r3, [r5, #12]
 8009e02:	059a      	lsls	r2, r3, #22
 8009e04:	d402      	bmi.n	8009e0c <_vfiprintf_r+0x220>
 8009e06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e08:	f000 fd1d 	bl	800a846 <__retarget_lock_release_recursive>
 8009e0c:	89ab      	ldrh	r3, [r5, #12]
 8009e0e:	065b      	lsls	r3, r3, #25
 8009e10:	f53f af12 	bmi.w	8009c38 <_vfiprintf_r+0x4c>
 8009e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e16:	e711      	b.n	8009c3c <_vfiprintf_r+0x50>
 8009e18:	ab03      	add	r3, sp, #12
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <_vfiprintf_r+0x25c>)
 8009e22:	a904      	add	r1, sp, #16
 8009e24:	f7fc f87e 	bl	8005f24 <_printf_i>
 8009e28:	e7e4      	b.n	8009df4 <_vfiprintf_r+0x208>
 8009e2a:	bf00      	nop
 8009e2c:	0800b2a8 	.word	0x0800b2a8
 8009e30:	0800b2c8 	.word	0x0800b2c8
 8009e34:	0800b288 	.word	0x0800b288
 8009e38:	0800b25c 	.word	0x0800b25c
 8009e3c:	0800b262 	.word	0x0800b262
 8009e40:	0800b266 	.word	0x0800b266
 8009e44:	080059ed 	.word	0x080059ed
 8009e48:	08009bc7 	.word	0x08009bc7

08009e4c <_scanf_chars>:
 8009e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e50:	4615      	mov	r5, r2
 8009e52:	688a      	ldr	r2, [r1, #8]
 8009e54:	4680      	mov	r8, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b932      	cbnz	r2, 8009e68 <_scanf_chars+0x1c>
 8009e5a:	698a      	ldr	r2, [r1, #24]
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	bf0c      	ite	eq
 8009e60:	2201      	moveq	r2, #1
 8009e62:	f04f 32ff 	movne.w	r2, #4294967295
 8009e66:	608a      	str	r2, [r1, #8]
 8009e68:	2700      	movs	r7, #0
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009efc <_scanf_chars+0xb0>
 8009e70:	06d1      	lsls	r1, r2, #27
 8009e72:	bf5f      	itttt	pl
 8009e74:	681a      	ldrpl	r2, [r3, #0]
 8009e76:	1d11      	addpl	r1, r2, #4
 8009e78:	6019      	strpl	r1, [r3, #0]
 8009e7a:	6816      	ldrpl	r6, [r2, #0]
 8009e7c:	69a0      	ldr	r0, [r4, #24]
 8009e7e:	b188      	cbz	r0, 8009ea4 <_scanf_chars+0x58>
 8009e80:	2801      	cmp	r0, #1
 8009e82:	d107      	bne.n	8009e94 <_scanf_chars+0x48>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	781a      	ldrb	r2, [r3, #0]
 8009e88:	6963      	ldr	r3, [r4, #20]
 8009e8a:	5c9b      	ldrb	r3, [r3, r2]
 8009e8c:	b953      	cbnz	r3, 8009ea4 <_scanf_chars+0x58>
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	d031      	beq.n	8009ef6 <_scanf_chars+0xaa>
 8009e92:	e022      	b.n	8009eda <_scanf_chars+0x8e>
 8009e94:	2802      	cmp	r0, #2
 8009e96:	d120      	bne.n	8009eda <_scanf_chars+0x8e>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009ea0:	071b      	lsls	r3, r3, #28
 8009ea2:	d41a      	bmi.n	8009eda <_scanf_chars+0x8e>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	3701      	adds	r7, #1
 8009ea8:	06da      	lsls	r2, r3, #27
 8009eaa:	bf5e      	ittt	pl
 8009eac:	682b      	ldrpl	r3, [r5, #0]
 8009eae:	781b      	ldrbpl	r3, [r3, #0]
 8009eb0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009eb4:	682a      	ldr	r2, [r5, #0]
 8009eb6:	686b      	ldr	r3, [r5, #4]
 8009eb8:	3201      	adds	r2, #1
 8009eba:	602a      	str	r2, [r5, #0]
 8009ebc:	68a2      	ldr	r2, [r4, #8]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	3a01      	subs	r2, #1
 8009ec2:	606b      	str	r3, [r5, #4]
 8009ec4:	60a2      	str	r2, [r4, #8]
 8009ec6:	b142      	cbz	r2, 8009eda <_scanf_chars+0x8e>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	dcd7      	bgt.n	8009e7c <_scanf_chars+0x30>
 8009ecc:	4629      	mov	r1, r5
 8009ece:	4640      	mov	r0, r8
 8009ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ed4:	4798      	blx	r3
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d0d0      	beq.n	8009e7c <_scanf_chars+0x30>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	f013 0310 	ands.w	r3, r3, #16
 8009ee0:	d105      	bne.n	8009eee <_scanf_chars+0xa2>
 8009ee2:	68e2      	ldr	r2, [r4, #12]
 8009ee4:	3201      	adds	r2, #1
 8009ee6:	60e2      	str	r2, [r4, #12]
 8009ee8:	69a2      	ldr	r2, [r4, #24]
 8009eea:	b102      	cbz	r2, 8009eee <_scanf_chars+0xa2>
 8009eec:	7033      	strb	r3, [r6, #0]
 8009eee:	2000      	movs	r0, #0
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	443b      	add	r3, r7
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efa:	bf00      	nop
 8009efc:	0800af11 	.word	0x0800af11

08009f00 <_scanf_i>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	460c      	mov	r4, r1
 8009f06:	4698      	mov	r8, r3
 8009f08:	4b75      	ldr	r3, [pc, #468]	; (800a0e0 <_scanf_i+0x1e0>)
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	4682      	mov	sl, r0
 8009f0e:	4616      	mov	r6, r2
 8009f10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f14:	ab03      	add	r3, sp, #12
 8009f16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f1a:	4b72      	ldr	r3, [pc, #456]	; (800a0e4 <_scanf_i+0x1e4>)
 8009f1c:	69a1      	ldr	r1, [r4, #24]
 8009f1e:	4a72      	ldr	r2, [pc, #456]	; (800a0e8 <_scanf_i+0x1e8>)
 8009f20:	4627      	mov	r7, r4
 8009f22:	2903      	cmp	r1, #3
 8009f24:	bf18      	it	ne
 8009f26:	461a      	movne	r2, r3
 8009f28:	68a3      	ldr	r3, [r4, #8]
 8009f2a:	9201      	str	r2, [sp, #4]
 8009f2c:	1e5a      	subs	r2, r3, #1
 8009f2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f32:	bf81      	itttt	hi
 8009f34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f38:	eb03 0905 	addhi.w	r9, r3, r5
 8009f3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f40:	60a3      	strhi	r3, [r4, #8]
 8009f42:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009f46:	bf98      	it	ls
 8009f48:	f04f 0900 	movls.w	r9, #0
 8009f4c:	463d      	mov	r5, r7
 8009f4e:	f04f 0b00 	mov.w	fp, #0
 8009f52:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	6831      	ldr	r1, [r6, #0]
 8009f5a:	ab03      	add	r3, sp, #12
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	7809      	ldrb	r1, [r1, #0]
 8009f60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009f64:	f7fe fd26 	bl	80089b4 <memchr>
 8009f68:	b328      	cbz	r0, 8009fb6 <_scanf_i+0xb6>
 8009f6a:	f1bb 0f01 	cmp.w	fp, #1
 8009f6e:	d159      	bne.n	800a024 <_scanf_i+0x124>
 8009f70:	6862      	ldr	r2, [r4, #4]
 8009f72:	b92a      	cbnz	r2, 8009f80 <_scanf_i+0x80>
 8009f74:	2308      	movs	r3, #8
 8009f76:	6822      	ldr	r2, [r4, #0]
 8009f78:	6063      	str	r3, [r4, #4]
 8009f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f7e:	6022      	str	r2, [r4, #0]
 8009f80:	6822      	ldr	r2, [r4, #0]
 8009f82:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	68a2      	ldr	r2, [r4, #8]
 8009f8a:	1e51      	subs	r1, r2, #1
 8009f8c:	60a1      	str	r1, [r4, #8]
 8009f8e:	b192      	cbz	r2, 8009fb6 <_scanf_i+0xb6>
 8009f90:	6832      	ldr	r2, [r6, #0]
 8009f92:	1c51      	adds	r1, r2, #1
 8009f94:	6031      	str	r1, [r6, #0]
 8009f96:	7812      	ldrb	r2, [r2, #0]
 8009f98:	f805 2b01 	strb.w	r2, [r5], #1
 8009f9c:	6872      	ldr	r2, [r6, #4]
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	6072      	str	r2, [r6, #4]
 8009fa4:	dc07      	bgt.n	8009fb6 <_scanf_i+0xb6>
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4650      	mov	r0, sl
 8009faa:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009fae:	4790      	blx	r2
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f040 8085 	bne.w	800a0c0 <_scanf_i+0x1c0>
 8009fb6:	f10b 0b01 	add.w	fp, fp, #1
 8009fba:	f1bb 0f03 	cmp.w	fp, #3
 8009fbe:	d1cb      	bne.n	8009f58 <_scanf_i+0x58>
 8009fc0:	6863      	ldr	r3, [r4, #4]
 8009fc2:	b90b      	cbnz	r3, 8009fc8 <_scanf_i+0xc8>
 8009fc4:	230a      	movs	r3, #10
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	4948      	ldr	r1, [pc, #288]	; (800a0ec <_scanf_i+0x1ec>)
 8009fcc:	6960      	ldr	r0, [r4, #20]
 8009fce:	1ac9      	subs	r1, r1, r3
 8009fd0:	f000 f8b6 	bl	800a140 <__sccl>
 8009fd4:	f04f 0b00 	mov.w	fp, #0
 8009fd8:	68a3      	ldr	r3, [r4, #8]
 8009fda:	6822      	ldr	r2, [r4, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d03d      	beq.n	800a05c <_scanf_i+0x15c>
 8009fe0:	6831      	ldr	r1, [r6, #0]
 8009fe2:	6960      	ldr	r0, [r4, #20]
 8009fe4:	f891 c000 	ldrb.w	ip, [r1]
 8009fe8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d035      	beq.n	800a05c <_scanf_i+0x15c>
 8009ff0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009ff4:	d124      	bne.n	800a040 <_scanf_i+0x140>
 8009ff6:	0510      	lsls	r0, r2, #20
 8009ff8:	d522      	bpl.n	800a040 <_scanf_i+0x140>
 8009ffa:	f10b 0b01 	add.w	fp, fp, #1
 8009ffe:	f1b9 0f00 	cmp.w	r9, #0
 800a002:	d003      	beq.n	800a00c <_scanf_i+0x10c>
 800a004:	3301      	adds	r3, #1
 800a006:	f109 39ff 	add.w	r9, r9, #4294967295
 800a00a:	60a3      	str	r3, [r4, #8]
 800a00c:	6873      	ldr	r3, [r6, #4]
 800a00e:	3b01      	subs	r3, #1
 800a010:	2b00      	cmp	r3, #0
 800a012:	6073      	str	r3, [r6, #4]
 800a014:	dd1b      	ble.n	800a04e <_scanf_i+0x14e>
 800a016:	6833      	ldr	r3, [r6, #0]
 800a018:	3301      	adds	r3, #1
 800a01a:	6033      	str	r3, [r6, #0]
 800a01c:	68a3      	ldr	r3, [r4, #8]
 800a01e:	3b01      	subs	r3, #1
 800a020:	60a3      	str	r3, [r4, #8]
 800a022:	e7d9      	b.n	8009fd8 <_scanf_i+0xd8>
 800a024:	f1bb 0f02 	cmp.w	fp, #2
 800a028:	d1ae      	bne.n	8009f88 <_scanf_i+0x88>
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a030:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a034:	d1bf      	bne.n	8009fb6 <_scanf_i+0xb6>
 800a036:	2310      	movs	r3, #16
 800a038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a03c:	6063      	str	r3, [r4, #4]
 800a03e:	e7a2      	b.n	8009f86 <_scanf_i+0x86>
 800a040:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a044:	6022      	str	r2, [r4, #0]
 800a046:	780b      	ldrb	r3, [r1, #0]
 800a048:	f805 3b01 	strb.w	r3, [r5], #1
 800a04c:	e7de      	b.n	800a00c <_scanf_i+0x10c>
 800a04e:	4631      	mov	r1, r6
 800a050:	4650      	mov	r0, sl
 800a052:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a056:	4798      	blx	r3
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0df      	beq.n	800a01c <_scanf_i+0x11c>
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	05db      	lsls	r3, r3, #23
 800a060:	d50d      	bpl.n	800a07e <_scanf_i+0x17e>
 800a062:	42bd      	cmp	r5, r7
 800a064:	d909      	bls.n	800a07a <_scanf_i+0x17a>
 800a066:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a06a:	4632      	mov	r2, r6
 800a06c:	4650      	mov	r0, sl
 800a06e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a072:	f105 39ff 	add.w	r9, r5, #4294967295
 800a076:	4798      	blx	r3
 800a078:	464d      	mov	r5, r9
 800a07a:	42bd      	cmp	r5, r7
 800a07c:	d02d      	beq.n	800a0da <_scanf_i+0x1da>
 800a07e:	6822      	ldr	r2, [r4, #0]
 800a080:	f012 0210 	ands.w	r2, r2, #16
 800a084:	d113      	bne.n	800a0ae <_scanf_i+0x1ae>
 800a086:	702a      	strb	r2, [r5, #0]
 800a088:	4639      	mov	r1, r7
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	4650      	mov	r0, sl
 800a08e:	9e01      	ldr	r6, [sp, #4]
 800a090:	47b0      	blx	r6
 800a092:	6821      	ldr	r1, [r4, #0]
 800a094:	f8d8 3000 	ldr.w	r3, [r8]
 800a098:	f011 0f20 	tst.w	r1, #32
 800a09c:	d013      	beq.n	800a0c6 <_scanf_i+0x1c6>
 800a09e:	1d1a      	adds	r2, r3, #4
 800a0a0:	f8c8 2000 	str.w	r2, [r8]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6018      	str	r0, [r3, #0]
 800a0a8:	68e3      	ldr	r3, [r4, #12]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	60e3      	str	r3, [r4, #12]
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	1bed      	subs	r5, r5, r7
 800a0b2:	44ab      	add	fp, r5
 800a0b4:	6925      	ldr	r5, [r4, #16]
 800a0b6:	445d      	add	r5, fp
 800a0b8:	6125      	str	r5, [r4, #16]
 800a0ba:	b007      	add	sp, #28
 800a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c0:	f04f 0b00 	mov.w	fp, #0
 800a0c4:	e7ca      	b.n	800a05c <_scanf_i+0x15c>
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	f8c8 2000 	str.w	r2, [r8]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f011 0f01 	tst.w	r1, #1
 800a0d2:	bf14      	ite	ne
 800a0d4:	8018      	strhne	r0, [r3, #0]
 800a0d6:	6018      	streq	r0, [r3, #0]
 800a0d8:	e7e6      	b.n	800a0a8 <_scanf_i+0x1a8>
 800a0da:	2001      	movs	r0, #1
 800a0dc:	e7ed      	b.n	800a0ba <_scanf_i+0x1ba>
 800a0de:	bf00      	nop
 800a0e0:	0800ad7c 	.word	0x0800ad7c
 800a0e4:	0800a2bd 	.word	0x0800a2bd
 800a0e8:	080074ed 	.word	0x080074ed
 800a0ec:	0800b286 	.word	0x0800b286

0800a0f0 <_read_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4d05      	ldr	r5, [pc, #20]	; (800a110 <_read_r+0x20>)
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f7f7 ffe7 	bl	80020d2 <_read>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_read_r+0x1e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_read_r+0x1e>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	200005a8 	.word	0x200005a8

0800a114 <nan>:
 800a114:	2000      	movs	r0, #0
 800a116:	4901      	ldr	r1, [pc, #4]	; (800a11c <nan+0x8>)
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	7ff80000 	.word	0x7ff80000

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	2300      	movs	r3, #0
 800a124:	4d05      	ldr	r5, [pc, #20]	; (800a13c <_sbrk_r+0x1c>)
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f7f8 f83a 	bl	80021a4 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	200005a8 	.word	0x200005a8

0800a140 <__sccl>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	780b      	ldrb	r3, [r1, #0]
 800a144:	4604      	mov	r4, r0
 800a146:	2b5e      	cmp	r3, #94	; 0x5e
 800a148:	bf13      	iteet	ne
 800a14a:	2200      	movne	r2, #0
 800a14c:	2201      	moveq	r2, #1
 800a14e:	784b      	ldrbeq	r3, [r1, #1]
 800a150:	1c48      	addne	r0, r1, #1
 800a152:	bf08      	it	eq
 800a154:	1c88      	addeq	r0, r1, #2
 800a156:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a15a:	1e61      	subs	r1, r4, #1
 800a15c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a160:	42a9      	cmp	r1, r5
 800a162:	d1fb      	bne.n	800a15c <__sccl+0x1c>
 800a164:	b90b      	cbnz	r3, 800a16a <__sccl+0x2a>
 800a166:	3801      	subs	r0, #1
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	f082 0201 	eor.w	r2, r2, #1
 800a16e:	4605      	mov	r5, r0
 800a170:	54e2      	strb	r2, [r4, r3]
 800a172:	4628      	mov	r0, r5
 800a174:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a178:	292d      	cmp	r1, #45	; 0x2d
 800a17a:	d006      	beq.n	800a18a <__sccl+0x4a>
 800a17c:	295d      	cmp	r1, #93	; 0x5d
 800a17e:	d0f3      	beq.n	800a168 <__sccl+0x28>
 800a180:	b909      	cbnz	r1, 800a186 <__sccl+0x46>
 800a182:	4628      	mov	r0, r5
 800a184:	e7f0      	b.n	800a168 <__sccl+0x28>
 800a186:	460b      	mov	r3, r1
 800a188:	e7f1      	b.n	800a16e <__sccl+0x2e>
 800a18a:	786e      	ldrb	r6, [r5, #1]
 800a18c:	2e5d      	cmp	r6, #93	; 0x5d
 800a18e:	d0fa      	beq.n	800a186 <__sccl+0x46>
 800a190:	42b3      	cmp	r3, r6
 800a192:	dcf8      	bgt.n	800a186 <__sccl+0x46>
 800a194:	4619      	mov	r1, r3
 800a196:	3502      	adds	r5, #2
 800a198:	3101      	adds	r1, #1
 800a19a:	428e      	cmp	r6, r1
 800a19c:	5462      	strb	r2, [r4, r1]
 800a19e:	dcfb      	bgt.n	800a198 <__sccl+0x58>
 800a1a0:	1af1      	subs	r1, r6, r3
 800a1a2:	3901      	subs	r1, #1
 800a1a4:	42b3      	cmp	r3, r6
 800a1a6:	bfa8      	it	ge
 800a1a8:	2100      	movge	r1, #0
 800a1aa:	1c58      	adds	r0, r3, #1
 800a1ac:	1843      	adds	r3, r0, r1
 800a1ae:	e7e0      	b.n	800a172 <__sccl+0x32>

0800a1b0 <strncmp>:
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	b172      	cbz	r2, 800a1d4 <strncmp+0x24>
 800a1b6:	3901      	subs	r1, #1
 800a1b8:	1884      	adds	r4, r0, r2
 800a1ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1c2:	4290      	cmp	r0, r2
 800a1c4:	d101      	bne.n	800a1ca <strncmp+0x1a>
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	d101      	bne.n	800a1ce <strncmp+0x1e>
 800a1ca:	1a80      	subs	r0, r0, r2
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d1f3      	bne.n	800a1ba <strncmp+0xa>
 800a1d2:	e7fa      	b.n	800a1ca <strncmp+0x1a>
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	e7f9      	b.n	800a1cc <strncmp+0x1c>

0800a1d8 <_strtoul_l.constprop.0>:
 800a1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1dc:	4686      	mov	lr, r0
 800a1de:	460d      	mov	r5, r1
 800a1e0:	4f35      	ldr	r7, [pc, #212]	; (800a2b8 <_strtoul_l.constprop.0+0xe0>)
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1e8:	5de6      	ldrb	r6, [r4, r7]
 800a1ea:	f016 0608 	ands.w	r6, r6, #8
 800a1ee:	d1f8      	bne.n	800a1e2 <_strtoul_l.constprop.0+0xa>
 800a1f0:	2c2d      	cmp	r4, #45	; 0x2d
 800a1f2:	d12f      	bne.n	800a254 <_strtoul_l.constprop.0+0x7c>
 800a1f4:	2601      	movs	r6, #1
 800a1f6:	782c      	ldrb	r4, [r5, #0]
 800a1f8:	1c85      	adds	r5, r0, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d057      	beq.n	800a2ae <_strtoul_l.constprop.0+0xd6>
 800a1fe:	2b10      	cmp	r3, #16
 800a200:	d109      	bne.n	800a216 <_strtoul_l.constprop.0+0x3e>
 800a202:	2c30      	cmp	r4, #48	; 0x30
 800a204:	d107      	bne.n	800a216 <_strtoul_l.constprop.0+0x3e>
 800a206:	7828      	ldrb	r0, [r5, #0]
 800a208:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a20c:	2858      	cmp	r0, #88	; 0x58
 800a20e:	d149      	bne.n	800a2a4 <_strtoul_l.constprop.0+0xcc>
 800a210:	2310      	movs	r3, #16
 800a212:	786c      	ldrb	r4, [r5, #1]
 800a214:	3502      	adds	r5, #2
 800a216:	f04f 38ff 	mov.w	r8, #4294967295
 800a21a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a21e:	2700      	movs	r7, #0
 800a220:	fb03 f908 	mul.w	r9, r3, r8
 800a224:	4638      	mov	r0, r7
 800a226:	ea6f 0909 	mvn.w	r9, r9
 800a22a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a22e:	f1bc 0f09 	cmp.w	ip, #9
 800a232:	d814      	bhi.n	800a25e <_strtoul_l.constprop.0+0x86>
 800a234:	4664      	mov	r4, ip
 800a236:	42a3      	cmp	r3, r4
 800a238:	dd22      	ble.n	800a280 <_strtoul_l.constprop.0+0xa8>
 800a23a:	2f00      	cmp	r7, #0
 800a23c:	db1d      	blt.n	800a27a <_strtoul_l.constprop.0+0xa2>
 800a23e:	4580      	cmp	r8, r0
 800a240:	d31b      	bcc.n	800a27a <_strtoul_l.constprop.0+0xa2>
 800a242:	d101      	bne.n	800a248 <_strtoul_l.constprop.0+0x70>
 800a244:	45a1      	cmp	r9, r4
 800a246:	db18      	blt.n	800a27a <_strtoul_l.constprop.0+0xa2>
 800a248:	2701      	movs	r7, #1
 800a24a:	fb00 4003 	mla	r0, r0, r3, r4
 800a24e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a252:	e7ea      	b.n	800a22a <_strtoul_l.constprop.0+0x52>
 800a254:	2c2b      	cmp	r4, #43	; 0x2b
 800a256:	bf04      	itt	eq
 800a258:	782c      	ldrbeq	r4, [r5, #0]
 800a25a:	1c85      	addeq	r5, r0, #2
 800a25c:	e7cd      	b.n	800a1fa <_strtoul_l.constprop.0+0x22>
 800a25e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a262:	f1bc 0f19 	cmp.w	ip, #25
 800a266:	d801      	bhi.n	800a26c <_strtoul_l.constprop.0+0x94>
 800a268:	3c37      	subs	r4, #55	; 0x37
 800a26a:	e7e4      	b.n	800a236 <_strtoul_l.constprop.0+0x5e>
 800a26c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a270:	f1bc 0f19 	cmp.w	ip, #25
 800a274:	d804      	bhi.n	800a280 <_strtoul_l.constprop.0+0xa8>
 800a276:	3c57      	subs	r4, #87	; 0x57
 800a278:	e7dd      	b.n	800a236 <_strtoul_l.constprop.0+0x5e>
 800a27a:	f04f 37ff 	mov.w	r7, #4294967295
 800a27e:	e7e6      	b.n	800a24e <_strtoul_l.constprop.0+0x76>
 800a280:	2f00      	cmp	r7, #0
 800a282:	da07      	bge.n	800a294 <_strtoul_l.constprop.0+0xbc>
 800a284:	2322      	movs	r3, #34	; 0x22
 800a286:	f04f 30ff 	mov.w	r0, #4294967295
 800a28a:	f8ce 3000 	str.w	r3, [lr]
 800a28e:	b932      	cbnz	r2, 800a29e <_strtoul_l.constprop.0+0xc6>
 800a290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a294:	b106      	cbz	r6, 800a298 <_strtoul_l.constprop.0+0xc0>
 800a296:	4240      	negs	r0, r0
 800a298:	2a00      	cmp	r2, #0
 800a29a:	d0f9      	beq.n	800a290 <_strtoul_l.constprop.0+0xb8>
 800a29c:	b107      	cbz	r7, 800a2a0 <_strtoul_l.constprop.0+0xc8>
 800a29e:	1e69      	subs	r1, r5, #1
 800a2a0:	6011      	str	r1, [r2, #0]
 800a2a2:	e7f5      	b.n	800a290 <_strtoul_l.constprop.0+0xb8>
 800a2a4:	2430      	movs	r4, #48	; 0x30
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1b5      	bne.n	800a216 <_strtoul_l.constprop.0+0x3e>
 800a2aa:	2308      	movs	r3, #8
 800a2ac:	e7b3      	b.n	800a216 <_strtoul_l.constprop.0+0x3e>
 800a2ae:	2c30      	cmp	r4, #48	; 0x30
 800a2b0:	d0a9      	beq.n	800a206 <_strtoul_l.constprop.0+0x2e>
 800a2b2:	230a      	movs	r3, #10
 800a2b4:	e7af      	b.n	800a216 <_strtoul_l.constprop.0+0x3e>
 800a2b6:	bf00      	nop
 800a2b8:	0800af11 	.word	0x0800af11

0800a2bc <_strtoul_r>:
 800a2bc:	f7ff bf8c 	b.w	800a1d8 <_strtoul_l.constprop.0>

0800a2c0 <__submore>:
 800a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	d11b      	bne.n	800a308 <__submore+0x48>
 800a2d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a2d4:	f7ff f8be 	bl	8009454 <_malloc_r>
 800a2d8:	b918      	cbnz	r0, 800a2e2 <__submore+0x22>
 800a2da:	f04f 30ff 	mov.w	r0, #4294967295
 800a2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a2e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a2ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a2ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a2f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a2f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a2fa:	7043      	strb	r3, [r0, #1]
 800a2fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a300:	7003      	strb	r3, [r0, #0]
 800a302:	6020      	str	r0, [r4, #0]
 800a304:	2000      	movs	r0, #0
 800a306:	e7ea      	b.n	800a2de <__submore+0x1e>
 800a308:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a30a:	0077      	lsls	r7, r6, #1
 800a30c:	463a      	mov	r2, r7
 800a30e:	f000 fb27 	bl	800a960 <_realloc_r>
 800a312:	4605      	mov	r5, r0
 800a314:	2800      	cmp	r0, #0
 800a316:	d0e0      	beq.n	800a2da <__submore+0x1a>
 800a318:	eb00 0806 	add.w	r8, r0, r6
 800a31c:	4601      	mov	r1, r0
 800a31e:	4632      	mov	r2, r6
 800a320:	4640      	mov	r0, r8
 800a322:	f7fe fb55 	bl	80089d0 <memcpy>
 800a326:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a32a:	f8c4 8000 	str.w	r8, [r4]
 800a32e:	e7e9      	b.n	800a304 <__submore+0x44>

0800a330 <__swbuf_r>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	460e      	mov	r6, r1
 800a334:	4614      	mov	r4, r2
 800a336:	4605      	mov	r5, r0
 800a338:	b118      	cbz	r0, 800a342 <__swbuf_r+0x12>
 800a33a:	6983      	ldr	r3, [r0, #24]
 800a33c:	b90b      	cbnz	r3, 800a342 <__swbuf_r+0x12>
 800a33e:	f000 f9e3 	bl	800a708 <__sinit>
 800a342:	4b21      	ldr	r3, [pc, #132]	; (800a3c8 <__swbuf_r+0x98>)
 800a344:	429c      	cmp	r4, r3
 800a346:	d12b      	bne.n	800a3a0 <__swbuf_r+0x70>
 800a348:	686c      	ldr	r4, [r5, #4]
 800a34a:	69a3      	ldr	r3, [r4, #24]
 800a34c:	60a3      	str	r3, [r4, #8]
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	071a      	lsls	r2, r3, #28
 800a352:	d52f      	bpl.n	800a3b4 <__swbuf_r+0x84>
 800a354:	6923      	ldr	r3, [r4, #16]
 800a356:	b36b      	cbz	r3, 800a3b4 <__swbuf_r+0x84>
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	6820      	ldr	r0, [r4, #0]
 800a35c:	b2f6      	uxtb	r6, r6
 800a35e:	1ac0      	subs	r0, r0, r3
 800a360:	6963      	ldr	r3, [r4, #20]
 800a362:	4637      	mov	r7, r6
 800a364:	4283      	cmp	r3, r0
 800a366:	dc04      	bgt.n	800a372 <__swbuf_r+0x42>
 800a368:	4621      	mov	r1, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	f000 f938 	bl	800a5e0 <_fflush_r>
 800a370:	bb30      	cbnz	r0, 800a3c0 <__swbuf_r+0x90>
 800a372:	68a3      	ldr	r3, [r4, #8]
 800a374:	3001      	adds	r0, #1
 800a376:	3b01      	subs	r3, #1
 800a378:	60a3      	str	r3, [r4, #8]
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	6022      	str	r2, [r4, #0]
 800a380:	701e      	strb	r6, [r3, #0]
 800a382:	6963      	ldr	r3, [r4, #20]
 800a384:	4283      	cmp	r3, r0
 800a386:	d004      	beq.n	800a392 <__swbuf_r+0x62>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	07db      	lsls	r3, r3, #31
 800a38c:	d506      	bpl.n	800a39c <__swbuf_r+0x6c>
 800a38e:	2e0a      	cmp	r6, #10
 800a390:	d104      	bne.n	800a39c <__swbuf_r+0x6c>
 800a392:	4621      	mov	r1, r4
 800a394:	4628      	mov	r0, r5
 800a396:	f000 f923 	bl	800a5e0 <_fflush_r>
 800a39a:	b988      	cbnz	r0, 800a3c0 <__swbuf_r+0x90>
 800a39c:	4638      	mov	r0, r7
 800a39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a0:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <__swbuf_r+0x9c>)
 800a3a2:	429c      	cmp	r4, r3
 800a3a4:	d101      	bne.n	800a3aa <__swbuf_r+0x7a>
 800a3a6:	68ac      	ldr	r4, [r5, #8]
 800a3a8:	e7cf      	b.n	800a34a <__swbuf_r+0x1a>
 800a3aa:	4b09      	ldr	r3, [pc, #36]	; (800a3d0 <__swbuf_r+0xa0>)
 800a3ac:	429c      	cmp	r4, r3
 800a3ae:	bf08      	it	eq
 800a3b0:	68ec      	ldreq	r4, [r5, #12]
 800a3b2:	e7ca      	b.n	800a34a <__swbuf_r+0x1a>
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f000 f81a 	bl	800a3f0 <__swsetup_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d0cb      	beq.n	800a358 <__swbuf_r+0x28>
 800a3c0:	f04f 37ff 	mov.w	r7, #4294967295
 800a3c4:	e7ea      	b.n	800a39c <__swbuf_r+0x6c>
 800a3c6:	bf00      	nop
 800a3c8:	0800b2a8 	.word	0x0800b2a8
 800a3cc:	0800b2c8 	.word	0x0800b2c8
 800a3d0:	0800b288 	.word	0x0800b288

0800a3d4 <__ascii_wctomb>:
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	b141      	cbz	r1, 800a3ec <__ascii_wctomb+0x18>
 800a3da:	2aff      	cmp	r2, #255	; 0xff
 800a3dc:	d904      	bls.n	800a3e8 <__ascii_wctomb+0x14>
 800a3de:	228a      	movs	r2, #138	; 0x8a
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	4770      	bx	lr
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	700a      	strb	r2, [r1, #0]
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <__swsetup_r>:
 800a3f0:	4b32      	ldr	r3, [pc, #200]	; (800a4bc <__swsetup_r+0xcc>)
 800a3f2:	b570      	push	{r4, r5, r6, lr}
 800a3f4:	681d      	ldr	r5, [r3, #0]
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	b125      	cbz	r5, 800a406 <__swsetup_r+0x16>
 800a3fc:	69ab      	ldr	r3, [r5, #24]
 800a3fe:	b913      	cbnz	r3, 800a406 <__swsetup_r+0x16>
 800a400:	4628      	mov	r0, r5
 800a402:	f000 f981 	bl	800a708 <__sinit>
 800a406:	4b2e      	ldr	r3, [pc, #184]	; (800a4c0 <__swsetup_r+0xd0>)
 800a408:	429c      	cmp	r4, r3
 800a40a:	d10f      	bne.n	800a42c <__swsetup_r+0x3c>
 800a40c:	686c      	ldr	r4, [r5, #4]
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a414:	0719      	lsls	r1, r3, #28
 800a416:	d42c      	bmi.n	800a472 <__swsetup_r+0x82>
 800a418:	06dd      	lsls	r5, r3, #27
 800a41a:	d411      	bmi.n	800a440 <__swsetup_r+0x50>
 800a41c:	2309      	movs	r3, #9
 800a41e:	6033      	str	r3, [r6, #0]
 800a420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	e03e      	b.n	800a4aa <__swsetup_r+0xba>
 800a42c:	4b25      	ldr	r3, [pc, #148]	; (800a4c4 <__swsetup_r+0xd4>)
 800a42e:	429c      	cmp	r4, r3
 800a430:	d101      	bne.n	800a436 <__swsetup_r+0x46>
 800a432:	68ac      	ldr	r4, [r5, #8]
 800a434:	e7eb      	b.n	800a40e <__swsetup_r+0x1e>
 800a436:	4b24      	ldr	r3, [pc, #144]	; (800a4c8 <__swsetup_r+0xd8>)
 800a438:	429c      	cmp	r4, r3
 800a43a:	bf08      	it	eq
 800a43c:	68ec      	ldreq	r4, [r5, #12]
 800a43e:	e7e6      	b.n	800a40e <__swsetup_r+0x1e>
 800a440:	0758      	lsls	r0, r3, #29
 800a442:	d512      	bpl.n	800a46a <__swsetup_r+0x7a>
 800a444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a446:	b141      	cbz	r1, 800a45a <__swsetup_r+0x6a>
 800a448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a44c:	4299      	cmp	r1, r3
 800a44e:	d002      	beq.n	800a456 <__swsetup_r+0x66>
 800a450:	4630      	mov	r0, r6
 800a452:	f7fe ff97 	bl	8009384 <_free_r>
 800a456:	2300      	movs	r3, #0
 800a458:	6363      	str	r3, [r4, #52]	; 0x34
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	2300      	movs	r3, #0
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	6923      	ldr	r3, [r4, #16]
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	f043 0308 	orr.w	r3, r3, #8
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	b94b      	cbnz	r3, 800a48a <__swsetup_r+0x9a>
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a480:	d003      	beq.n	800a48a <__swsetup_r+0x9a>
 800a482:	4621      	mov	r1, r4
 800a484:	4630      	mov	r0, r6
 800a486:	f000 fa05 	bl	800a894 <__smakebuf_r>
 800a48a:	89a0      	ldrh	r0, [r4, #12]
 800a48c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a490:	f010 0301 	ands.w	r3, r0, #1
 800a494:	d00a      	beq.n	800a4ac <__swsetup_r+0xbc>
 800a496:	2300      	movs	r3, #0
 800a498:	60a3      	str	r3, [r4, #8]
 800a49a:	6963      	ldr	r3, [r4, #20]
 800a49c:	425b      	negs	r3, r3
 800a49e:	61a3      	str	r3, [r4, #24]
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	b943      	cbnz	r3, 800a4b6 <__swsetup_r+0xc6>
 800a4a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4a8:	d1ba      	bne.n	800a420 <__swsetup_r+0x30>
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	0781      	lsls	r1, r0, #30
 800a4ae:	bf58      	it	pl
 800a4b0:	6963      	ldrpl	r3, [r4, #20]
 800a4b2:	60a3      	str	r3, [r4, #8]
 800a4b4:	e7f4      	b.n	800a4a0 <__swsetup_r+0xb0>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	e7f7      	b.n	800a4aa <__swsetup_r+0xba>
 800a4ba:	bf00      	nop
 800a4bc:	20000078 	.word	0x20000078
 800a4c0:	0800b2a8 	.word	0x0800b2a8
 800a4c4:	0800b2c8 	.word	0x0800b2c8
 800a4c8:	0800b288 	.word	0x0800b288

0800a4cc <abort>:
 800a4cc:	2006      	movs	r0, #6
 800a4ce:	b508      	push	{r3, lr}
 800a4d0:	f000 fa9e 	bl	800aa10 <raise>
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	f7f7 fdf2 	bl	80020be <_exit>
	...

0800a4dc <__sflush_r>:
 800a4dc:	898a      	ldrh	r2, [r1, #12]
 800a4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	0710      	lsls	r0, r2, #28
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	d457      	bmi.n	800a598 <__sflush_r+0xbc>
 800a4e8:	684b      	ldr	r3, [r1, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	dc04      	bgt.n	800a4f8 <__sflush_r+0x1c>
 800a4ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	dc01      	bgt.n	800a4f8 <__sflush_r+0x1c>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4fa:	2e00      	cmp	r6, #0
 800a4fc:	d0fa      	beq.n	800a4f4 <__sflush_r+0x18>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a504:	682f      	ldr	r7, [r5, #0]
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	d032      	beq.n	800a570 <__sflush_r+0x94>
 800a50a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	075a      	lsls	r2, r3, #29
 800a510:	d505      	bpl.n	800a51e <__sflush_r+0x42>
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	1ac0      	subs	r0, r0, r3
 800a516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a518:	b10b      	cbz	r3, 800a51e <__sflush_r+0x42>
 800a51a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a51c:	1ac0      	subs	r0, r0, r3
 800a51e:	2300      	movs	r3, #0
 800a520:	4602      	mov	r2, r0
 800a522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a524:	4628      	mov	r0, r5
 800a526:	6a21      	ldr	r1, [r4, #32]
 800a528:	47b0      	blx	r6
 800a52a:	1c43      	adds	r3, r0, #1
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	d106      	bne.n	800a53e <__sflush_r+0x62>
 800a530:	6829      	ldr	r1, [r5, #0]
 800a532:	291d      	cmp	r1, #29
 800a534:	d82c      	bhi.n	800a590 <__sflush_r+0xb4>
 800a536:	4a29      	ldr	r2, [pc, #164]	; (800a5dc <__sflush_r+0x100>)
 800a538:	40ca      	lsrs	r2, r1
 800a53a:	07d6      	lsls	r6, r2, #31
 800a53c:	d528      	bpl.n	800a590 <__sflush_r+0xb4>
 800a53e:	2200      	movs	r2, #0
 800a540:	6062      	str	r2, [r4, #4]
 800a542:	6922      	ldr	r2, [r4, #16]
 800a544:	04d9      	lsls	r1, r3, #19
 800a546:	6022      	str	r2, [r4, #0]
 800a548:	d504      	bpl.n	800a554 <__sflush_r+0x78>
 800a54a:	1c42      	adds	r2, r0, #1
 800a54c:	d101      	bne.n	800a552 <__sflush_r+0x76>
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	b903      	cbnz	r3, 800a554 <__sflush_r+0x78>
 800a552:	6560      	str	r0, [r4, #84]	; 0x54
 800a554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a556:	602f      	str	r7, [r5, #0]
 800a558:	2900      	cmp	r1, #0
 800a55a:	d0cb      	beq.n	800a4f4 <__sflush_r+0x18>
 800a55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a560:	4299      	cmp	r1, r3
 800a562:	d002      	beq.n	800a56a <__sflush_r+0x8e>
 800a564:	4628      	mov	r0, r5
 800a566:	f7fe ff0d 	bl	8009384 <_free_r>
 800a56a:	2000      	movs	r0, #0
 800a56c:	6360      	str	r0, [r4, #52]	; 0x34
 800a56e:	e7c2      	b.n	800a4f6 <__sflush_r+0x1a>
 800a570:	6a21      	ldr	r1, [r4, #32]
 800a572:	2301      	movs	r3, #1
 800a574:	4628      	mov	r0, r5
 800a576:	47b0      	blx	r6
 800a578:	1c41      	adds	r1, r0, #1
 800a57a:	d1c7      	bne.n	800a50c <__sflush_r+0x30>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0c4      	beq.n	800a50c <__sflush_r+0x30>
 800a582:	2b1d      	cmp	r3, #29
 800a584:	d001      	beq.n	800a58a <__sflush_r+0xae>
 800a586:	2b16      	cmp	r3, #22
 800a588:	d101      	bne.n	800a58e <__sflush_r+0xb2>
 800a58a:	602f      	str	r7, [r5, #0]
 800a58c:	e7b2      	b.n	800a4f4 <__sflush_r+0x18>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	e7ae      	b.n	800a4f6 <__sflush_r+0x1a>
 800a598:	690f      	ldr	r7, [r1, #16]
 800a59a:	2f00      	cmp	r7, #0
 800a59c:	d0aa      	beq.n	800a4f4 <__sflush_r+0x18>
 800a59e:	0793      	lsls	r3, r2, #30
 800a5a0:	bf18      	it	ne
 800a5a2:	2300      	movne	r3, #0
 800a5a4:	680e      	ldr	r6, [r1, #0]
 800a5a6:	bf08      	it	eq
 800a5a8:	694b      	ldreq	r3, [r1, #20]
 800a5aa:	1bf6      	subs	r6, r6, r7
 800a5ac:	600f      	str	r7, [r1, #0]
 800a5ae:	608b      	str	r3, [r1, #8]
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	dd9f      	ble.n	800a4f4 <__sflush_r+0x18>
 800a5b4:	4633      	mov	r3, r6
 800a5b6:	463a      	mov	r2, r7
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	6a21      	ldr	r1, [r4, #32]
 800a5bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a5c0:	47e0      	blx	ip
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	dc06      	bgt.n	800a5d4 <__sflush_r+0xf8>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d0:	81a3      	strh	r3, [r4, #12]
 800a5d2:	e790      	b.n	800a4f6 <__sflush_r+0x1a>
 800a5d4:	4407      	add	r7, r0
 800a5d6:	1a36      	subs	r6, r6, r0
 800a5d8:	e7ea      	b.n	800a5b0 <__sflush_r+0xd4>
 800a5da:	bf00      	nop
 800a5dc:	20400001 	.word	0x20400001

0800a5e0 <_fflush_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	690b      	ldr	r3, [r1, #16]
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	b913      	cbnz	r3, 800a5f0 <_fflush_r+0x10>
 800a5ea:	2500      	movs	r5, #0
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	b118      	cbz	r0, 800a5fa <_fflush_r+0x1a>
 800a5f2:	6983      	ldr	r3, [r0, #24]
 800a5f4:	b90b      	cbnz	r3, 800a5fa <_fflush_r+0x1a>
 800a5f6:	f000 f887 	bl	800a708 <__sinit>
 800a5fa:	4b14      	ldr	r3, [pc, #80]	; (800a64c <_fflush_r+0x6c>)
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	d11b      	bne.n	800a638 <_fflush_r+0x58>
 800a600:	686c      	ldr	r4, [r5, #4]
 800a602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0ef      	beq.n	800a5ea <_fflush_r+0xa>
 800a60a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a60c:	07d0      	lsls	r0, r2, #31
 800a60e:	d404      	bmi.n	800a61a <_fflush_r+0x3a>
 800a610:	0599      	lsls	r1, r3, #22
 800a612:	d402      	bmi.n	800a61a <_fflush_r+0x3a>
 800a614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a616:	f000 f915 	bl	800a844 <__retarget_lock_acquire_recursive>
 800a61a:	4628      	mov	r0, r5
 800a61c:	4621      	mov	r1, r4
 800a61e:	f7ff ff5d 	bl	800a4dc <__sflush_r>
 800a622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a624:	4605      	mov	r5, r0
 800a626:	07da      	lsls	r2, r3, #31
 800a628:	d4e0      	bmi.n	800a5ec <_fflush_r+0xc>
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	059b      	lsls	r3, r3, #22
 800a62e:	d4dd      	bmi.n	800a5ec <_fflush_r+0xc>
 800a630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a632:	f000 f908 	bl	800a846 <__retarget_lock_release_recursive>
 800a636:	e7d9      	b.n	800a5ec <_fflush_r+0xc>
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <_fflush_r+0x70>)
 800a63a:	429c      	cmp	r4, r3
 800a63c:	d101      	bne.n	800a642 <_fflush_r+0x62>
 800a63e:	68ac      	ldr	r4, [r5, #8]
 800a640:	e7df      	b.n	800a602 <_fflush_r+0x22>
 800a642:	4b04      	ldr	r3, [pc, #16]	; (800a654 <_fflush_r+0x74>)
 800a644:	429c      	cmp	r4, r3
 800a646:	bf08      	it	eq
 800a648:	68ec      	ldreq	r4, [r5, #12]
 800a64a:	e7da      	b.n	800a602 <_fflush_r+0x22>
 800a64c:	0800b2a8 	.word	0x0800b2a8
 800a650:	0800b2c8 	.word	0x0800b2c8
 800a654:	0800b288 	.word	0x0800b288

0800a658 <std>:
 800a658:	2300      	movs	r3, #0
 800a65a:	b510      	push	{r4, lr}
 800a65c:	4604      	mov	r4, r0
 800a65e:	e9c0 3300 	strd	r3, r3, [r0]
 800a662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a666:	6083      	str	r3, [r0, #8]
 800a668:	8181      	strh	r1, [r0, #12]
 800a66a:	6643      	str	r3, [r0, #100]	; 0x64
 800a66c:	81c2      	strh	r2, [r0, #14]
 800a66e:	6183      	str	r3, [r0, #24]
 800a670:	4619      	mov	r1, r3
 800a672:	2208      	movs	r2, #8
 800a674:	305c      	adds	r0, #92	; 0x5c
 800a676:	f7fb f913 	bl	80058a0 <memset>
 800a67a:	4b05      	ldr	r3, [pc, #20]	; (800a690 <std+0x38>)
 800a67c:	6224      	str	r4, [r4, #32]
 800a67e:	6263      	str	r3, [r4, #36]	; 0x24
 800a680:	4b04      	ldr	r3, [pc, #16]	; (800a694 <std+0x3c>)
 800a682:	62a3      	str	r3, [r4, #40]	; 0x28
 800a684:	4b04      	ldr	r3, [pc, #16]	; (800a698 <std+0x40>)
 800a686:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a688:	4b04      	ldr	r3, [pc, #16]	; (800a69c <std+0x44>)
 800a68a:	6323      	str	r3, [r4, #48]	; 0x30
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	bf00      	nop
 800a690:	08006629 	.word	0x08006629
 800a694:	0800664f 	.word	0x0800664f
 800a698:	08006687 	.word	0x08006687
 800a69c:	080066ab 	.word	0x080066ab

0800a6a0 <_cleanup_r>:
 800a6a0:	4901      	ldr	r1, [pc, #4]	; (800a6a8 <_cleanup_r+0x8>)
 800a6a2:	f000 b8af 	b.w	800a804 <_fwalk_reent>
 800a6a6:	bf00      	nop
 800a6a8:	0800a5e1 	.word	0x0800a5e1

0800a6ac <__sfmoreglue>:
 800a6ac:	2268      	movs	r2, #104	; 0x68
 800a6ae:	b570      	push	{r4, r5, r6, lr}
 800a6b0:	1e4d      	subs	r5, r1, #1
 800a6b2:	4355      	muls	r5, r2
 800a6b4:	460e      	mov	r6, r1
 800a6b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6ba:	f7fe fecb 	bl	8009454 <_malloc_r>
 800a6be:	4604      	mov	r4, r0
 800a6c0:	b140      	cbz	r0, 800a6d4 <__sfmoreglue+0x28>
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	e9c0 1600 	strd	r1, r6, [r0]
 800a6c8:	300c      	adds	r0, #12
 800a6ca:	60a0      	str	r0, [r4, #8]
 800a6cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6d0:	f7fb f8e6 	bl	80058a0 <memset>
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}

0800a6d8 <__sfp_lock_acquire>:
 800a6d8:	4801      	ldr	r0, [pc, #4]	; (800a6e0 <__sfp_lock_acquire+0x8>)
 800a6da:	f000 b8b3 	b.w	800a844 <__retarget_lock_acquire_recursive>
 800a6de:	bf00      	nop
 800a6e0:	200005ad 	.word	0x200005ad

0800a6e4 <__sfp_lock_release>:
 800a6e4:	4801      	ldr	r0, [pc, #4]	; (800a6ec <__sfp_lock_release+0x8>)
 800a6e6:	f000 b8ae 	b.w	800a846 <__retarget_lock_release_recursive>
 800a6ea:	bf00      	nop
 800a6ec:	200005ad 	.word	0x200005ad

0800a6f0 <__sinit_lock_acquire>:
 800a6f0:	4801      	ldr	r0, [pc, #4]	; (800a6f8 <__sinit_lock_acquire+0x8>)
 800a6f2:	f000 b8a7 	b.w	800a844 <__retarget_lock_acquire_recursive>
 800a6f6:	bf00      	nop
 800a6f8:	200005ae 	.word	0x200005ae

0800a6fc <__sinit_lock_release>:
 800a6fc:	4801      	ldr	r0, [pc, #4]	; (800a704 <__sinit_lock_release+0x8>)
 800a6fe:	f000 b8a2 	b.w	800a846 <__retarget_lock_release_recursive>
 800a702:	bf00      	nop
 800a704:	200005ae 	.word	0x200005ae

0800a708 <__sinit>:
 800a708:	b510      	push	{r4, lr}
 800a70a:	4604      	mov	r4, r0
 800a70c:	f7ff fff0 	bl	800a6f0 <__sinit_lock_acquire>
 800a710:	69a3      	ldr	r3, [r4, #24]
 800a712:	b11b      	cbz	r3, 800a71c <__sinit+0x14>
 800a714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a718:	f7ff bff0 	b.w	800a6fc <__sinit_lock_release>
 800a71c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a720:	6523      	str	r3, [r4, #80]	; 0x50
 800a722:	4b13      	ldr	r3, [pc, #76]	; (800a770 <__sinit+0x68>)
 800a724:	4a13      	ldr	r2, [pc, #76]	; (800a774 <__sinit+0x6c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	62a2      	str	r2, [r4, #40]	; 0x28
 800a72a:	42a3      	cmp	r3, r4
 800a72c:	bf08      	it	eq
 800a72e:	2301      	moveq	r3, #1
 800a730:	4620      	mov	r0, r4
 800a732:	bf08      	it	eq
 800a734:	61a3      	streq	r3, [r4, #24]
 800a736:	f000 f81f 	bl	800a778 <__sfp>
 800a73a:	6060      	str	r0, [r4, #4]
 800a73c:	4620      	mov	r0, r4
 800a73e:	f000 f81b 	bl	800a778 <__sfp>
 800a742:	60a0      	str	r0, [r4, #8]
 800a744:	4620      	mov	r0, r4
 800a746:	f000 f817 	bl	800a778 <__sfp>
 800a74a:	2200      	movs	r2, #0
 800a74c:	2104      	movs	r1, #4
 800a74e:	60e0      	str	r0, [r4, #12]
 800a750:	6860      	ldr	r0, [r4, #4]
 800a752:	f7ff ff81 	bl	800a658 <std>
 800a756:	2201      	movs	r2, #1
 800a758:	2109      	movs	r1, #9
 800a75a:	68a0      	ldr	r0, [r4, #8]
 800a75c:	f7ff ff7c 	bl	800a658 <std>
 800a760:	2202      	movs	r2, #2
 800a762:	2112      	movs	r1, #18
 800a764:	68e0      	ldr	r0, [r4, #12]
 800a766:	f7ff ff77 	bl	800a658 <std>
 800a76a:	2301      	movs	r3, #1
 800a76c:	61a3      	str	r3, [r4, #24]
 800a76e:	e7d1      	b.n	800a714 <__sinit+0xc>
 800a770:	0800add4 	.word	0x0800add4
 800a774:	0800a6a1 	.word	0x0800a6a1

0800a778 <__sfp>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	4607      	mov	r7, r0
 800a77c:	f7ff ffac 	bl	800a6d8 <__sfp_lock_acquire>
 800a780:	4b1e      	ldr	r3, [pc, #120]	; (800a7fc <__sfp+0x84>)
 800a782:	681e      	ldr	r6, [r3, #0]
 800a784:	69b3      	ldr	r3, [r6, #24]
 800a786:	b913      	cbnz	r3, 800a78e <__sfp+0x16>
 800a788:	4630      	mov	r0, r6
 800a78a:	f7ff ffbd 	bl	800a708 <__sinit>
 800a78e:	3648      	adds	r6, #72	; 0x48
 800a790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a794:	3b01      	subs	r3, #1
 800a796:	d503      	bpl.n	800a7a0 <__sfp+0x28>
 800a798:	6833      	ldr	r3, [r6, #0]
 800a79a:	b30b      	cbz	r3, 800a7e0 <__sfp+0x68>
 800a79c:	6836      	ldr	r6, [r6, #0]
 800a79e:	e7f7      	b.n	800a790 <__sfp+0x18>
 800a7a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7a4:	b9d5      	cbnz	r5, 800a7dc <__sfp+0x64>
 800a7a6:	4b16      	ldr	r3, [pc, #88]	; (800a800 <__sfp+0x88>)
 800a7a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7ac:	60e3      	str	r3, [r4, #12]
 800a7ae:	6665      	str	r5, [r4, #100]	; 0x64
 800a7b0:	f000 f847 	bl	800a842 <__retarget_lock_init_recursive>
 800a7b4:	f7ff ff96 	bl	800a6e4 <__sfp_lock_release>
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7c4:	6025      	str	r5, [r4, #0]
 800a7c6:	61a5      	str	r5, [r4, #24]
 800a7c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7cc:	f7fb f868 	bl	80058a0 <memset>
 800a7d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7d8:	4620      	mov	r0, r4
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7dc:	3468      	adds	r4, #104	; 0x68
 800a7de:	e7d9      	b.n	800a794 <__sfp+0x1c>
 800a7e0:	2104      	movs	r1, #4
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	f7ff ff62 	bl	800a6ac <__sfmoreglue>
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	6030      	str	r0, [r6, #0]
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d1d5      	bne.n	800a79c <__sfp+0x24>
 800a7f0:	f7ff ff78 	bl	800a6e4 <__sfp_lock_release>
 800a7f4:	230c      	movs	r3, #12
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	e7ee      	b.n	800a7d8 <__sfp+0x60>
 800a7fa:	bf00      	nop
 800a7fc:	0800add4 	.word	0x0800add4
 800a800:	ffff0001 	.word	0xffff0001

0800a804 <_fwalk_reent>:
 800a804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a808:	4606      	mov	r6, r0
 800a80a:	4688      	mov	r8, r1
 800a80c:	2700      	movs	r7, #0
 800a80e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a816:	f1b9 0901 	subs.w	r9, r9, #1
 800a81a:	d505      	bpl.n	800a828 <_fwalk_reent+0x24>
 800a81c:	6824      	ldr	r4, [r4, #0]
 800a81e:	2c00      	cmp	r4, #0
 800a820:	d1f7      	bne.n	800a812 <_fwalk_reent+0xe>
 800a822:	4638      	mov	r0, r7
 800a824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a828:	89ab      	ldrh	r3, [r5, #12]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d907      	bls.n	800a83e <_fwalk_reent+0x3a>
 800a82e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a832:	3301      	adds	r3, #1
 800a834:	d003      	beq.n	800a83e <_fwalk_reent+0x3a>
 800a836:	4629      	mov	r1, r5
 800a838:	4630      	mov	r0, r6
 800a83a:	47c0      	blx	r8
 800a83c:	4307      	orrs	r7, r0
 800a83e:	3568      	adds	r5, #104	; 0x68
 800a840:	e7e9      	b.n	800a816 <_fwalk_reent+0x12>

0800a842 <__retarget_lock_init_recursive>:
 800a842:	4770      	bx	lr

0800a844 <__retarget_lock_acquire_recursive>:
 800a844:	4770      	bx	lr

0800a846 <__retarget_lock_release_recursive>:
 800a846:	4770      	bx	lr

0800a848 <__swhatbuf_r>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	460e      	mov	r6, r1
 800a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a850:	4614      	mov	r4, r2
 800a852:	2900      	cmp	r1, #0
 800a854:	461d      	mov	r5, r3
 800a856:	b096      	sub	sp, #88	; 0x58
 800a858:	da08      	bge.n	800a86c <__swhatbuf_r+0x24>
 800a85a:	2200      	movs	r2, #0
 800a85c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a860:	602a      	str	r2, [r5, #0]
 800a862:	061a      	lsls	r2, r3, #24
 800a864:	d410      	bmi.n	800a888 <__swhatbuf_r+0x40>
 800a866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a86a:	e00e      	b.n	800a88a <__swhatbuf_r+0x42>
 800a86c:	466a      	mov	r2, sp
 800a86e:	f000 f8eb 	bl	800aa48 <_fstat_r>
 800a872:	2800      	cmp	r0, #0
 800a874:	dbf1      	blt.n	800a85a <__swhatbuf_r+0x12>
 800a876:	9a01      	ldr	r2, [sp, #4]
 800a878:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a87c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a880:	425a      	negs	r2, r3
 800a882:	415a      	adcs	r2, r3
 800a884:	602a      	str	r2, [r5, #0]
 800a886:	e7ee      	b.n	800a866 <__swhatbuf_r+0x1e>
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	2000      	movs	r0, #0
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	b016      	add	sp, #88	; 0x58
 800a890:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a894 <__smakebuf_r>:
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a898:	079d      	lsls	r5, r3, #30
 800a89a:	4606      	mov	r6, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	d507      	bpl.n	800a8b0 <__smakebuf_r+0x1c>
 800a8a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	6163      	str	r3, [r4, #20]
 800a8ac:	b002      	add	sp, #8
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	466a      	mov	r2, sp
 800a8b2:	ab01      	add	r3, sp, #4
 800a8b4:	f7ff ffc8 	bl	800a848 <__swhatbuf_r>
 800a8b8:	9900      	ldr	r1, [sp, #0]
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7fe fdc9 	bl	8009454 <_malloc_r>
 800a8c2:	b948      	cbnz	r0, 800a8d8 <__smakebuf_r+0x44>
 800a8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d4ef      	bmi.n	800a8ac <__smakebuf_r+0x18>
 800a8cc:	f023 0303 	bic.w	r3, r3, #3
 800a8d0:	f043 0302 	orr.w	r3, r3, #2
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	e7e3      	b.n	800a8a0 <__smakebuf_r+0xc>
 800a8d8:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <__smakebuf_r+0x7c>)
 800a8da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	6020      	str	r0, [r4, #0]
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	6120      	str	r0, [r4, #16]
 800a8ea:	6163      	str	r3, [r4, #20]
 800a8ec:	9b01      	ldr	r3, [sp, #4]
 800a8ee:	b15b      	cbz	r3, 800a908 <__smakebuf_r+0x74>
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8f6:	f000 f8b9 	bl	800aa6c <_isatty_r>
 800a8fa:	b128      	cbz	r0, 800a908 <__smakebuf_r+0x74>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	89a0      	ldrh	r0, [r4, #12]
 800a90a:	4305      	orrs	r5, r0
 800a90c:	81a5      	strh	r5, [r4, #12]
 800a90e:	e7cd      	b.n	800a8ac <__smakebuf_r+0x18>
 800a910:	0800a6a1 	.word	0x0800a6a1

0800a914 <memmove>:
 800a914:	4288      	cmp	r0, r1
 800a916:	b510      	push	{r4, lr}
 800a918:	eb01 0402 	add.w	r4, r1, r2
 800a91c:	d902      	bls.n	800a924 <memmove+0x10>
 800a91e:	4284      	cmp	r4, r0
 800a920:	4623      	mov	r3, r4
 800a922:	d807      	bhi.n	800a934 <memmove+0x20>
 800a924:	1e43      	subs	r3, r0, #1
 800a926:	42a1      	cmp	r1, r4
 800a928:	d008      	beq.n	800a93c <memmove+0x28>
 800a92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a932:	e7f8      	b.n	800a926 <memmove+0x12>
 800a934:	4601      	mov	r1, r0
 800a936:	4402      	add	r2, r0
 800a938:	428a      	cmp	r2, r1
 800a93a:	d100      	bne.n	800a93e <memmove+0x2a>
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a946:	e7f7      	b.n	800a938 <memmove+0x24>

0800a948 <__malloc_lock>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__malloc_lock+0x8>)
 800a94a:	f7ff bf7b 	b.w	800a844 <__retarget_lock_acquire_recursive>
 800a94e:	bf00      	nop
 800a950:	200005ac 	.word	0x200005ac

0800a954 <__malloc_unlock>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__malloc_unlock+0x8>)
 800a956:	f7ff bf76 	b.w	800a846 <__retarget_lock_release_recursive>
 800a95a:	bf00      	nop
 800a95c:	200005ac 	.word	0x200005ac

0800a960 <_realloc_r>:
 800a960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a964:	4680      	mov	r8, r0
 800a966:	4614      	mov	r4, r2
 800a968:	460e      	mov	r6, r1
 800a96a:	b921      	cbnz	r1, 800a976 <_realloc_r+0x16>
 800a96c:	4611      	mov	r1, r2
 800a96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a972:	f7fe bd6f 	b.w	8009454 <_malloc_r>
 800a976:	b92a      	cbnz	r2, 800a984 <_realloc_r+0x24>
 800a978:	f7fe fd04 	bl	8009384 <_free_r>
 800a97c:	4625      	mov	r5, r4
 800a97e:	4628      	mov	r0, r5
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	f000 f882 	bl	800aa8c <_malloc_usable_size_r>
 800a988:	4284      	cmp	r4, r0
 800a98a:	4607      	mov	r7, r0
 800a98c:	d802      	bhi.n	800a994 <_realloc_r+0x34>
 800a98e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a992:	d812      	bhi.n	800a9ba <_realloc_r+0x5a>
 800a994:	4621      	mov	r1, r4
 800a996:	4640      	mov	r0, r8
 800a998:	f7fe fd5c 	bl	8009454 <_malloc_r>
 800a99c:	4605      	mov	r5, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d0ed      	beq.n	800a97e <_realloc_r+0x1e>
 800a9a2:	42bc      	cmp	r4, r7
 800a9a4:	4622      	mov	r2, r4
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	bf28      	it	cs
 800a9aa:	463a      	movcs	r2, r7
 800a9ac:	f7fe f810 	bl	80089d0 <memcpy>
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7fe fce6 	bl	8009384 <_free_r>
 800a9b8:	e7e1      	b.n	800a97e <_realloc_r+0x1e>
 800a9ba:	4635      	mov	r5, r6
 800a9bc:	e7df      	b.n	800a97e <_realloc_r+0x1e>

0800a9be <_raise_r>:
 800a9be:	291f      	cmp	r1, #31
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	d904      	bls.n	800a9d2 <_raise_r+0x14>
 800a9c8:	2316      	movs	r3, #22
 800a9ca:	6003      	str	r3, [r0, #0]
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	bd38      	pop	{r3, r4, r5, pc}
 800a9d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9d4:	b112      	cbz	r2, 800a9dc <_raise_r+0x1e>
 800a9d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9da:	b94b      	cbnz	r3, 800a9f0 <_raise_r+0x32>
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 f831 	bl	800aa44 <_getpid_r>
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	4601      	mov	r1, r0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ec:	f000 b818 	b.w	800aa20 <_kill_r>
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d00a      	beq.n	800aa0a <_raise_r+0x4c>
 800a9f4:	1c59      	adds	r1, r3, #1
 800a9f6:	d103      	bne.n	800aa00 <_raise_r+0x42>
 800a9f8:	2316      	movs	r3, #22
 800a9fa:	6003      	str	r3, [r0, #0]
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	e7e7      	b.n	800a9d0 <_raise_r+0x12>
 800aa00:	2400      	movs	r4, #0
 800aa02:	4628      	mov	r0, r5
 800aa04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa08:	4798      	blx	r3
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e7e0      	b.n	800a9d0 <_raise_r+0x12>
	...

0800aa10 <raise>:
 800aa10:	4b02      	ldr	r3, [pc, #8]	; (800aa1c <raise+0xc>)
 800aa12:	4601      	mov	r1, r0
 800aa14:	6818      	ldr	r0, [r3, #0]
 800aa16:	f7ff bfd2 	b.w	800a9be <_raise_r>
 800aa1a:	bf00      	nop
 800aa1c:	20000078 	.word	0x20000078

0800aa20 <_kill_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	2300      	movs	r3, #0
 800aa24:	4d06      	ldr	r5, [pc, #24]	; (800aa40 <_kill_r+0x20>)
 800aa26:	4604      	mov	r4, r0
 800aa28:	4608      	mov	r0, r1
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	602b      	str	r3, [r5, #0]
 800aa2e:	f7f7 fb36 	bl	800209e <_kill>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	d102      	bne.n	800aa3c <_kill_r+0x1c>
 800aa36:	682b      	ldr	r3, [r5, #0]
 800aa38:	b103      	cbz	r3, 800aa3c <_kill_r+0x1c>
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	bd38      	pop	{r3, r4, r5, pc}
 800aa3e:	bf00      	nop
 800aa40:	200005a8 	.word	0x200005a8

0800aa44 <_getpid_r>:
 800aa44:	f7f7 bb24 	b.w	8002090 <_getpid>

0800aa48 <_fstat_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	4d06      	ldr	r5, [pc, #24]	; (800aa68 <_fstat_r+0x20>)
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	4611      	mov	r1, r2
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	f7f7 fb80 	bl	800215a <_fstat>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d102      	bne.n	800aa64 <_fstat_r+0x1c>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	b103      	cbz	r3, 800aa64 <_fstat_r+0x1c>
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	bf00      	nop
 800aa68:	200005a8 	.word	0x200005a8

0800aa6c <_isatty_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	2300      	movs	r3, #0
 800aa70:	4d05      	ldr	r5, [pc, #20]	; (800aa88 <_isatty_r+0x1c>)
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	602b      	str	r3, [r5, #0]
 800aa78:	f7f7 fb7e 	bl	8002178 <_isatty>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_isatty_r+0x1a>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_isatty_r+0x1a>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	200005a8 	.word	0x200005a8

0800aa8c <_malloc_usable_size_r>:
 800aa8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa90:	1f18      	subs	r0, r3, #4
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bfbc      	itt	lt
 800aa96:	580b      	ldrlt	r3, [r1, r0]
 800aa98:	18c0      	addlt	r0, r0, r3
 800aa9a:	4770      	bx	lr

0800aa9c <_init>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	bf00      	nop
 800aaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa2:	bc08      	pop	{r3}
 800aaa4:	469e      	mov	lr, r3
 800aaa6:	4770      	bx	lr

0800aaa8 <_fini>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	bf00      	nop
 800aaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaae:	bc08      	pop	{r3}
 800aab0:	469e      	mov	lr, r3
 800aab2:	4770      	bx	lr
